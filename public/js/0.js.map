{"version":3,"sources":["webpack:///./node_modules/relative-time-format/modules/LocaleDataStore.js","webpack:///./node_modules/relative-time-format/modules/resolveLocale.js","webpack:///./node_modules/relative-time-format/modules/RelativeTimeFormat.js","webpack:///./node_modules/javascript-time-ago/modules/cache.js","webpack:///./node_modules/javascript-time-ago/modules/gradation/helpers.js","webpack:///./node_modules/javascript-time-ago/modules/gradation/convenient.js","webpack:///./node_modules/javascript-time-ago/modules/grade.js","webpack:///./node_modules/javascript-time-ago/modules/locale.js","webpack:///./node_modules/javascript-time-ago/modules/style/default.js","webpack:///./node_modules/javascript-time-ago/modules/gradation/canonical.js","webpack:///./node_modules/javascript-time-ago/modules/style/twitter.js","webpack:///./node_modules/javascript-time-ago/modules/style/time.js","webpack:///./node_modules/javascript-time-ago/modules/LocaleDataStore.js","webpack:///./node_modules/javascript-time-ago/modules/JavascriptTimeAgo.js"],"names":["defaultLocale","localesData","getDefaultLocale","locale","resolveLocale","options","arguments","length","undefined","localeMatcher","resolveLocaleLookup","RangeError","concat","parts","split","pop","join","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_defineProperty","obj","value","UNITS","NUMERIC_VALUES","STYLE_VALUES","RelativeTimeFormat","locales","this","numeric","style","indexOf","push","supportedLocalesOf","Intl","NumberFormat","numberFormat","protoProps","staticProps","unit","getRule","replace","formatNumber","Math","abs","rule","valueIndex","type","slice","unitRules","message","_message","current","quantifierRules","quantify","quantifier","other","number","format","String","prototype","_typeof","Symbol","iterator","constructor","filter","addLocale","localeData","Error","setDefaultLocale","Cache","cache","_len","keys","Array","_key","_i","_len2","_key2","lastKey","_i2","day","getStep","gradation","_iterator","_isArray","isArray","_ref","next","done","step","getDate","Date","factor","threshold","threshold_for_now","granularity","threshold_for_minute","grade","elapsed","now","units","convenient","getAllowedSteps","findGradationStep","amount","round","getThreshold","fromStep","toStep","future","id","JSON","stringify","chooseLocale","isLocaleDataAvailable","intlDateTimeFormatSupported","DateTimeFormat","flavour","_objectSpread","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","forEach","formatters","canonical","this_year","month","getFullYear","getTime","year","JavascriptTimeAgo","relativeTimeFormatCache","input","twitter","_getDateAndTimeBeingF","getDateAndTimeBeingFormatted","date","time","_this$getLocaleData","getLocaleData","custom","getTimeIntervalMeasurementUnits","console","error","getNowMessage","sign","getFormatter","formatValue","flavor","get","put","_","object","restrictedSetOfUnits","second","unshift","past"],"mappings":"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","file":"js/0.js","sourcesContent":["// Fallback locale.\n// (when not a single one of the supplied \"preferred\" locales is available)\nvar defaultLocale = 'en'; // For all locales added\n// their relative time formatter messages will be stored here.\n\nvar localesData = {};\nexport function getDefaultLocale() {\n  return defaultLocale;\n}\nexport function setDefaultLocale(locale) {\n  defaultLocale = locale;\n} // export function isLocaleDataAvailable(locale) {\n//  return localesData.hasOwnProperty(locale)\n// }\n\nexport function getLocaleData(locale) {\n  return localesData[locale];\n}\nexport function addLocaleData(localeData) {\n  if (!localeData) {\n    throw new Error('No locale data passed');\n  } // This locale data is stored in a global variable\n  // and later used when calling `.format(time)`.\n\n\n  localesData[localeData.locale] = localeData;\n}\n//# sourceMappingURL=LocaleDataStore.js.map","import { getLocaleData } from './LocaleDataStore';\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * @param  {string} locale\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocale(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocale(\"xx-Latn\")\r\n */\n\nexport default function resolveLocale(locale) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var localeMatcher = options.localeMatcher || 'lookup';\n\n  switch (localeMatcher) {\n    case 'lookup':\n      return resolveLocaleLookup(locale);\n    // \"best fit\" locale matching is not supported.\n    // https://github.com/catamphetamine/relative-time-format/issues/2\n\n    case 'best fit':\n      // return resolveLocaleBestFit(locale)\n      return resolveLocaleLookup(locale);\n\n    default:\n      throw new RangeError(\"Invalid \\\"localeMatcher\\\" option: \".concat(localeMatcher));\n  }\n}\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * Starts from the most specific locale and gradually\r\n * falls back to less specific ones.\r\n * This is a basic implementation of the \"lookup\" algorithm.\r\n * https://tools.ietf.org/html/rfc4647#section-3.4\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocaleLookup(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocaleLookup(\"xx-Latn\")\r\n */\n\nexport function resolveLocaleLookup(locale) {\n  if (getLocaleData(locale)) {\n    return locale;\n  } // `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\n\n\n  var parts = locale.split('-');\n\n  while (locale.length > 1) {\n    parts.pop();\n    locale = parts.join('-');\n\n    if (getLocaleData(locale)) {\n      return locale;\n    }\n  }\n}\n//# sourceMappingURL=resolveLocale.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getDefaultLocale, setDefaultLocale, getLocaleData, addLocaleData } from './LocaleDataStore';\nimport resolveLocale from './resolveLocale'; // Valid time units.\n\nexport var UNITS = [\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"]; // Valid values for the `numeric` option.\n\nvar NUMERIC_VALUES = [\"auto\", \"always\"]; // Valid values for the `style` option.\n\nvar STYLE_VALUES = [\"long\", \"short\", \"narrow\"];\n/**\r\n * Polyfill for `Intl.RelativeTimeFormat` proposal.\r\n * https://github.com/tc39/proposal-intl-relative-time\r\n * https://github.com/tc39/proposal-intl-relative-time/issues/55\r\n */\n\nvar RelativeTimeFormat =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param {(string|string[])} [locales] - Preferred locales (or locale).\r\n   * @param {Object} [options] - Formatting options.\r\n   * @param {string} [options.style=\"long\"] - One of: \"long\", \"short\", \"narrow\".\r\n   * @param {string} [options.numeric=\"always\"] - (Version >= 2) One of: \"always\", \"auto\".\r\n   * @param {string} [options.localeMatcher=\"lookup\"] - One of: \"lookup\", \"best fit\". Currently only \"lookup\" is supported.\r\n   */\n  function RelativeTimeFormat() {\n    var locales = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, RelativeTimeFormat);\n\n    _defineProperty(this, \"numeric\", \"always\");\n\n    _defineProperty(this, \"style\", \"long\");\n\n    _defineProperty(this, \"localeMatcher\", \"lookup\");\n\n    var numeric = options.numeric,\n        style = options.style,\n        localeMatcher = options.localeMatcher; // Set `numeric` option.\n\n    if (numeric) {\n      if (NUMERIC_VALUES.indexOf(numeric) < 0) {\n        throw new RangeError(\"Invalid \\\"numeric\\\" option: \".concat(numeric));\n      }\n\n      this.numeric = numeric;\n    } // Set `style` option.\n\n\n    if (style) {\n      if (STYLE_VALUES.indexOf(style) < 0) {\n        throw new RangeError(\"Invalid \\\"style\\\" option: \".concat(style));\n      }\n\n      this.style = style;\n    } // Set `localeMatcher` option.\n\n\n    if (localeMatcher) {\n      this.localeMatcher = localeMatcher;\n    } // Set `locale`.\n    // Convert `locales` to an array.\n\n\n    if (typeof locales === 'string') {\n      locales = [locales];\n    } // Add default locale.\n\n\n    locales.push(getDefaultLocale()); // Choose the most appropriate locale.\n\n    this.locale = RelativeTimeFormat.supportedLocalesOf(locales, {\n      localeMatcher: this.localeMatcher\n    })[0];\n\n    if (!this.locale) {\n      throw new TypeError(\"No supported locale was found\");\n    }\n\n    this.locale = resolveLocale(this.locale, {\n      localeMatcher: this.localeMatcher\n    }); // Use `Intl.NumberFormat` for formatting numbers (when available).\n\n    if (typeof Intl !== 'undefined' && Intl.NumberFormat) {\n      this.numberFormat = new Intl.NumberFormat(this.locale);\n    }\n  }\n  /**\r\n   * Formats time `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"2 days ago\"\r\n   * rtf.format(-2, \"day\")\r\n   * // Returns \"in 5 minutes\"\r\n   * rtf.format(5, \"minute\")\r\n   */\n\n\n  _createClass(RelativeTimeFormat, [{\n    key: \"format\",\n    value: function format(value, unit) {\n      return this.getRule(value, unit).replace('{0}', this.formatNumber(Math.abs(value)));\n    }\n    /**\r\n     * Formats time `value` in `units` (either in past or in future).\r\n     * @param {number} value - Time interval value.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @return {Object[]} The parts (`{ type, value }`).\r\n     * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n     * @example\r\n     * // Version 1.\r\n     * // Returns [\r\n     * //   { type: \"literal\", value: \"in \" },\r\n     * //   { type: \"day\", value: \"100\" },\r\n     * //   { type: \"literal\", value: \" days\" }\r\n     * // ]\r\n     * rtf.formatToParts(100, \"day\")\r\n     * //\r\n     * // Version 2.\r\n     * // Returns [\r\n     * //   { type: \"literal\", value: \"in \" },\r\n     * //   { type: \"integer\", value: \"100\", unit: \"day\" },\r\n     * //   { type: \"literal\", value: \" days\" }\r\n     * // ]\r\n     * rtf.formatToParts(100, \"day\")\r\n     */\n\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(value, unit) {\n      var rule = this.getRule(value, unit);\n      var valueIndex = rule.indexOf(\"{0}\"); // \"yesterday\"/\"today\"/\"tomorrow\".\n\n      if (valueIndex < 0) {\n        return [{\n          type: \"literal\",\n          value: rule\n        }];\n      }\n\n      var parts = [];\n\n      if (valueIndex > 0) {\n        parts.push({\n          type: \"literal\",\n          value: rule.slice(0, valueIndex)\n        });\n      }\n\n      parts.push({\n        unit: unit,\n        type: \"integer\",\n        value: this.formatNumber(Math.abs(value))\n      });\n\n      if (valueIndex + \"{0}\".length < rule.length - 1) {\n        parts.push({\n          type: \"literal\",\n          value: rule.slice(valueIndex + \"{0}\".length)\n        });\n      }\n\n      return parts;\n    }\n    /**\r\n     * Returns formatting rule for `value` in `units` (either in past or in future).\r\n     * @param {number} value - Time interval value.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @return {string}\r\n     * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n     * @example\r\n     * // Returns \"{0} days ago\"\r\n     * getRule(-2, \"day\")\r\n     */\n\n  }, {\n    key: \"getRule\",\n    value: function getRule(value, unit) {\n      if (UNITS.indexOf(unit) < 0) {\n        throw new RangeError(\"Unknown time unit: \".concat(unit, \".\"));\n      } // Get locale-specific time interval formatting rules\n      // of a given `style` for the given value of measurement `unit`.\n      //\n      // E.g.:\n      //\n      // ```json\n      // {\n      //  \"past\": {\n      //    \"one\": \"a second ago\",\n      //    \"other\": \"{0} seconds ago\"\n      //  },\n      //  \"future\": {\n      //    \"one\": \"in a second\",\n      //    \"other\": \"in {0} seconds\"\n      //  }\n      // }\n      // ```\n      //\n\n\n      var unitRules = getLocaleData(this.locale)[this.style][unit]; // Special case for \"yesterday\"/\"today\"/\"tomorrow\".\n\n      if (this.numeric === \"auto\") {\n        // \"yesterday\", \"the day before yesterday\", etc.\n        if (value === -2 || value === -1) {\n          var message = unitRules[\"previous\".concat(value === -1 ? '' : '-' + Math.abs(value))];\n\n          if (message) {\n            return message;\n          }\n        } // \"tomorrow\", \"the day after tomorrow\", etc.\n        else if (value === 1 || value === 2) {\n            var _message = unitRules[\"next\".concat(value === 1 ? '' : '-' + Math.abs(value))];\n\n            if (_message) {\n              return _message;\n            }\n          } // \"today\"\n          else if (value === 0) {\n              if (unitRules.current) {\n                return unitRules.current;\n              }\n            }\n      } // Choose either \"past\" or \"future\" based on time `value` sign.\n      // If there's only \"other\" then it's being collapsed.\n      // (the resulting bundle size optimization technique)\n\n\n      var quantifierRules = unitRules[value <= 0 ? \"past\" : \"future\"]; // Bundle size optimization technique.\n\n      if (typeof quantifierRules === \"string\") {\n        return quantifierRules;\n      } // Quantify `value`.\n\n\n      var quantify = getLocaleData(this.locale).quantify;\n      var quantifier = quantify && quantify(Math.abs(value)); // There seems to be no such locale in CLDR\n      // for which `quantify` is missing\n      // and still `past` and `future` messages\n      // contain something other than \"other\".\n\n      /* istanbul ignore next */\n\n      quantifier = quantifier || 'other'; // \"other\" rule is supposed to be always present.\n      // If only \"other\" rule is present then \"rules\" is not an object and is a string.\n\n      return quantifierRules[quantifier] || quantifierRules.other;\n    }\n    /**\r\n     * Formats a number into a string.\r\n     * Uses `Intl.NumberFormat` when available.\r\n     * @param  {number} number\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatNumber\",\n    value: function formatNumber(number) {\n      return this.numberFormat ? this.numberFormat.format(number) : String(number);\n    }\n    /**\r\n     * Returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.\r\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\r\n     * @return {Object}\r\n     */\n\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      return {\n        locale: this.locale,\n        style: this.style,\n        numeric: this.numeric\n      };\n    }\n  }]);\n\n  return RelativeTimeFormat;\n}();\n/**\r\n * Returns an array containing those of the provided locales\r\n * that are supported in collation without having to fall back\r\n * to the runtime's default locale.\r\n * @param {(string|string[])} locale - A string with a BCP 47 language tag, or an array of such strings. For the general form of the locales argument, see the Intl page.\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string[]} An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\r\n * @example\r\n * var locales = ['ban', 'id-u-co-pinyin', 'es-PY']\r\n * var options = { localeMatcher: 'lookup' }\r\n * // Returns [\"id\", \"es-PY\"]\r\n * Intl.RelativeTimeFormat.supportedLocalesOf(locales, options)\r\n */\n\n\nexport { RelativeTimeFormat as default };\n\nRelativeTimeFormat.supportedLocalesOf = function (locales) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Convert `locales` to an array.\n  if (typeof locales === 'string') {\n    locales = [locales];\n  }\n\n  return locales.filter(function (locale) {\n    return resolveLocale(locale, options);\n  });\n};\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\n\n\nRelativeTimeFormat.addLocale = addLocaleData;\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\n\nRelativeTimeFormat.setDefaultLocale = setDefaultLocale;\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\n\nRelativeTimeFormat.getDefaultLocale = getDefaultLocale;\n/**\r\n * Extracts language from an IETF BCP 47 language tag.\r\n * @param {string} languageTag - IETF BCP 47 language tag.\r\n * @return {string}\r\n * @example\r\n * // Returns \"he\"\r\n * getLanguageFromLanguageTag(\"he-IL-u-ca-hebrew-tz-jeruslm\")\r\n * // Returns \"ar\"\r\n * getLanguageFromLanguageTag(\"ar-u-nu-latn\")\r\n */\n// export function getLanguageFromLanguageTag(languageTag) {\n//   const hyphenIndex = languageTag.indexOf('-')\n//   if (hyphenIndex > 0) {\n//     return languageTag.slice(0, hyphenIndex)\n//   }\n//   return languageTag\n// }\n//# sourceMappingURL=RelativeTimeFormat.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * A basic in-memory cache.\r\n *\r\n * import Cache from 'javascript-time-ago/Cache'\r\n * const cache = new Cache()\r\n * const object = cache.get('key1', 'key2', ...) || cache.put('key1', 'key2', ..., createObject())\r\n */\nvar Cache =\n/*#__PURE__*/\nfunction () {\n  function Cache() {\n    _classCallCheck(this, Cache);\n\n    _defineProperty(this, \"cache\", {});\n  }\n\n  _createClass(Cache, [{\n    key: \"get\",\n    value: function get() {\n      var cache = this.cache;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n        keys[_key] = arguments[_key];\n      }\n\n      for (var _i = 0; _i < keys.length; _i++) {\n        var key = keys[_i];\n\n        if (_typeof(cache) !== 'object') {\n          return;\n        }\n\n        cache = cache[key];\n      }\n\n      return cache;\n    }\n  }, {\n    key: \"put\",\n    value: function put() {\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      var value = keys.pop();\n      var lastKey = keys.pop();\n      var cache = this.cache;\n\n      for (var _i2 = 0; _i2 < keys.length; _i2++) {\n        var key = keys[_i2];\n\n        if (_typeof(cache[key]) !== 'object') {\n          cache[key] = {};\n        }\n\n        cache = cache[key];\n      }\n\n      return cache[lastKey] = value;\n    }\n  }]);\n\n  return Cache;\n}();\n\nexport { Cache as default };\n//# sourceMappingURL=cache.js.map","export var minute = 60; // in seconds\n\nexport var hour = 60 * minute; // in seconds\n\nexport var day = 24 * hour; // in seconds\n// https://www.quora.com/What-is-the-average-number-of-days-in-a-month\n\nexport var month = 30.44 * day; // in seconds\n// \"400 years have 146097 days (taking into account leap year rules)\"\n\nexport var year = 146097 / 400 * day; // in seconds\n\n/**\r\n * Returns a step of gradation corresponding to the unit.\r\n * @param  {Object[]} gradation\r\n * @param  {string} unit\r\n * @return {?Object}\r\n */\n\nexport function getStep(gradation, unit) {\n  for (var _iterator = gradation, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var step = _ref;\n\n    if (step.unit === unit) {\n      return step;\n    }\n  }\n}\n/**\r\n * Converts value to a `Date`\r\n * @param {(number|Date)} value\r\n * @return {Date}\r\n */\n\nexport function getDate(value) {\n  return value instanceof Date ? value : new Date(value);\n}\n//# sourceMappingURL=helpers.js.map","import { day, month, year } from './helpers'; // just now\n// 1 minute ago\n// 2 minutes ago\n// 5 minutes ago\n// 10 minutes ago\n// 15 minutes ago\n// 20 minutes ago\n// an hour ago\n// 2 hours ago\n// …\n// 20 hours ago\n// a day ago\n// 2 days ago\n// 5 days ago\n// a week ago\n// 2 weeks ago\n// 3 weeks ago\n// a month ago\n// 2 months ago\n// 4 months ago\n// a year ago\n// 2 years ago\n// …\n\nexport default [{\n  factor: 1,\n  unit: 'now'\n}, {\n  threshold: 1,\n  threshold_for_now: 45,\n  factor: 1,\n  unit: 'second'\n}, {\n  threshold: 45,\n  factor: 60,\n  unit: 'minute'\n}, {\n  threshold: 2.5 * 60,\n  factor: 60,\n  granularity: 5,\n  unit: 'minute'\n}, {\n  threshold: 22.5 * 60,\n  factor: 30 * 60,\n  unit: 'half-hour'\n}, {\n  threshold: 42.5 * 60,\n  threshold_for_minute: 52.5 * 60,\n  factor: 60 * 60,\n  unit: 'hour'\n}, {\n  threshold: 20.5 / 24 * day,\n  factor: day,\n  unit: 'day'\n}, {\n  threshold: 5.5 * day,\n  factor: 7 * day,\n  unit: 'week'\n}, {\n  threshold: 3.5 * 7 * day,\n  factor: month,\n  unit: 'month'\n}, {\n  threshold: 10.5 * month,\n  factor: year,\n  unit: 'year'\n}];\n//# sourceMappingURL=convenient.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { convenient } from './gradation';\n/**\r\n * Takes seconds `elapsed` and measures them against\r\n * `gradation` to return the suitable `gradation` step.\r\n *\r\n * @param {number} elapsed - Time interval (in seconds). Is < 0 for past dates and > 0 for future dates.\r\n *\r\n * @param {string[]} units - A list of allowed time units\r\n *                           (e.g. ['second', 'minute', 'hour', …])\r\n *\r\n * @param {Object} [gradation] - Time scale gradation steps.\r\n *\r\n *                               E.g.:\r\n *                               [\r\n *                                 { unit: 'second', factor: 1 },\r\n *                                 { unit: 'minute', factor: 60, threshold: 60 },\r\n *                                 { format(), threshold: 24 * 60 * 60 },\r\n *                                 …\r\n *                               ]\r\n *\r\n * @return {?Object} `gradation` step.\r\n */\n\nexport default function grade(elapsed, now, units) {\n  var gradation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : convenient;\n  // Leave only allowed time measurement units.\n  // E.g. omit \"quarter\" unit.\n  gradation = getAllowedSteps(gradation, units); // If no steps of gradation fit the conditions\n  // then return nothing.\n\n  if (gradation.length === 0) {\n    return;\n  } // Find the most appropriate gradation step\n\n\n  var i = findGradationStep(elapsed, now, gradation);\n  var step = gradation[i]; // If time elapsed is too small and even\n  // the first gradation step doesn't suit it\n  // then return nothing.\n\n  if (i === -1) {\n    return;\n  } // Apply granularity to the time amount\n  // (and fall back to the previous step\n  //  if the first level of granularity\n  //  isn't met by this amount)\n\n\n  if (step.granularity) {\n    // Recalculate the elapsed time amount based on granularity\n    var amount = Math.round(Math.abs(elapsed) / step.factor / step.granularity) * step.granularity; // If the granularity for this step\n    // is too high, then fallback\n    // to the previous step of gradation.\n    // (if there is any previous step of gradation)\n\n    if (amount === 0 && i > 0) {\n      return gradation[i - 1];\n    }\n  }\n\n  return step;\n}\n/**\r\n * Gets threshold for moving from `fromStep` to `next_step`.\r\n * @param  {Object} fromStep - From step.\r\n * @param  {Object} next_step - To step.\r\n * @param  {number} now - The current timestamp.\r\n * @param  {boolean} future - Is `true` for future dates (\"in 5 minutes\").\r\n * @return {number}\r\n * @throws Will throw if no threshold is found.\r\n */\n\nfunction getThreshold(fromStep, toStep, now, future) {\n  var threshold; // Allows custom thresholds when moving\n  // from a specific step to a specific step.\n\n  if (fromStep && (fromStep.id || fromStep.unit)) {\n    threshold = toStep[\"threshold_for_\".concat(fromStep.id || fromStep.unit)];\n  } // If no custom threshold is set for this transition\n  // then use the usual threshold for the next step.\n\n\n  if (threshold === undefined) {\n    threshold = toStep.threshold;\n  } // Convert threshold to a number.\n\n\n  if (typeof threshold === 'function') {\n    threshold = threshold(now, future);\n  } // Throw if no threshold is found.\n\n\n  if (fromStep && typeof threshold !== 'number') {\n    // Babel transforms `typeof` into some \"branches\"\n    // so istanbul will show this as \"branch not covered\".\n\n    /* istanbul ignore next */\n    var type = _typeof(threshold);\n\n    throw new Error(\"Each step of a gradation must have a threshold defined except for the first one. Got \\\"\".concat(threshold, \"\\\", \").concat(type, \". Step: \").concat(JSON.stringify(toStep)));\n  }\n\n  return threshold;\n}\n/**\r\n * @param  {number} elapsed - Time elapsed (in seconds).\r\n * @param  {number} now - Current timestamp.\r\n * @param  {Object} gradation - Gradation.\r\n * @param  {number} i - Gradation step currently being tested.\r\n * @return {number} Gradation step index.\r\n */\n\n\nfunction findGradationStep(elapsed, now, gradation) {\n  var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  // If the threshold for moving from previous step\n  // to this step is too high then return the previous step.\n  if (Math.abs(elapsed) < getThreshold(gradation[i - 1], gradation[i], now, elapsed < 0)) {\n    return i - 1;\n  } // If it's the last step of gradation then return it.\n\n\n  if (i === gradation.length - 1) {\n    return i;\n  } // Move to the next step.\n\n\n  return findGradationStep(elapsed, now, gradation, i + 1);\n}\n/**\r\n * Leaves only allowed gradation steps.\r\n * @param  {Object[]} gradation\r\n * @param  {string[]} units - Allowed time units.\r\n * @return {Object[]}\r\n */\n\n\nfunction getAllowedSteps(gradation, units) {\n  return gradation.filter(function (_ref) {\n    var unit = _ref.unit;\n\n    // If this step has a `unit` defined\n    // then this `unit` must be in the list of `units` allowed.\n    if (unit) {\n      return units.indexOf(unit) >= 0;\n    } // A gradation step is not required to specify a `unit`.\n    // E.g. for Twitter gradation it specifies `format()` instead.\n\n\n    return true;\n  });\n}\n//# sourceMappingURL=grade.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Chooses the most appropriate locale\n// (one of the registered ones)\n// based on the list of preferred `locales` supplied by the user.\n//\n// @param {string[]} locales - the list of preferable locales (in [IETF format](https://en.wikipedia.org/wiki/IETF_language_tag)).\n// @param {Function} isLocaleDataAvailable - tests if a locale is available.\n//\n// @returns {string} The most suitable locale\n//\n// @example\n// // Returns 'en'\n// chooseLocale(['en-US'], undefined, (locale) => locale === 'ru' || locale === 'en')\n//\nexport default function chooseLocale(locales, isLocaleDataAvailable) {\n  // This is not an intelligent algorithm,\n  // but it will do for this library's case.\n  // `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\n  for (var _iterator = locales, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var locale = _ref;\n\n    if (isLocaleDataAvailable(locale)) {\n      return locale;\n    }\n\n    var parts = locale.split('-');\n\n    while (parts.length > 1) {\n      parts.pop();\n      locale = parts.join('-');\n\n      if (isLocaleDataAvailable(locale)) {\n        return locale;\n      }\n    }\n  }\n\n  throw new Error(\"No locale data has been registered for any of the locales: \".concat(locales.join(', ')));\n}\n/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\n\nexport function intlDateTimeFormatSupportedLocale(locales) {\n  /* istanbul ignore else */\n  if (intlDateTimeFormatSupported()) {\n    return Intl.DateTimeFormat.supportedLocalesOf(locales)[0];\n  }\n}\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\n\nexport function intlDateTimeFormatSupported() {\n  // Babel transforms `typeof` into some \"branches\"\n  // so istanbul will show this as \"branch not covered\".\n\n  /* istanbul ignore next */\n  var isIntlAvailable = (typeof Intl === \"undefined\" ? \"undefined\" : _typeof(Intl)) === 'object';\n  return isIntlAvailable && typeof Intl.DateTimeFormat === 'function';\n}\n//# sourceMappingURL=locale.js.map","import { convenient } from '../gradation';\nexport default {\n  gradation: convenient,\n  flavour: ['long-convenient', 'long'],\n  units: ['now', 'minute', 'hour', 'day', 'week', 'month', 'year']\n};\n//# sourceMappingURL=default.js.map","import { day, month, year } from './helpers'; // just now\n// 1 second ago\n// 2 seconds ago\n// …\n// 59 seconds ago\n// 1 minute ago\n// 2 minutes ago\n// …\n// 59 minutes ago\n// 1 hour ago\n// 2 hours ago\n// …\n// 24 hours ago\n// 1 day ago\n// 2 days ago\n// …\n// 7 days ago\n// 1 week ago\n// 2 weeks ago\n// …\n// 3 weeks ago\n// 1 month ago\n// 2 months ago\n// …\n// 11 months ago\n// 1 year ago\n// 2 years ago\n// …\n\nexport default [{\n  factor: 1,\n  unit: 'now'\n}, {\n  threshold: 0.5,\n  factor: 1,\n  unit: 'second'\n}, {\n  threshold: 59.5,\n  factor: 60,\n  unit: 'minute'\n}, {\n  threshold: 59.5 * 60,\n  factor: 60 * 60,\n  unit: 'hour'\n}, {\n  threshold: 23.5 * 60 * 60,\n  factor: day,\n  unit: 'day'\n}, {\n  threshold: 6.5 * day,\n  factor: 7 * day,\n  unit: 'week'\n}, {\n  threshold: 3.5 * 7 * day,\n  factor: month,\n  unit: 'month'\n}, {\n  threshold: 11.5 * month,\n  factor: year,\n  unit: 'year'\n}];\n//# sourceMappingURL=canonical.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { canonical, day, hour, getStep, getDate } from '../gradation';\nimport { intlDateTimeFormatSupported } from '../locale'; // A cache for `Intl.DateTimeFormat` twitter formatters\n// for various locales (is a global variable).\n\nvar formatters = {}; // Twitter style relative time formatting.\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\n// Seconds, minutes and hours are shown relatively,\n// and other intervals can be shown using full date format.\n\nexport default {\n  // Twitter gradation is derived from \"canonical\" gradation\n  // adjusting its \"minute\" `threshold` to be 45.\n  gradation: [// Minutes\n  _objectSpread({}, getStep(canonical, 'minute'), {\n    // Starts showing `1m` after `59s`.\n    threshold: 59.5\n  }), // Hours\n  _objectSpread({}, getStep(canonical, 'hour'), {\n    // After `59m` it will show `1h`.\n    threshold: 59.5 * 60\n  }), // If `date` and `now` happened the same year,\n  // then only output month and day.\n  {\n    threshold: day - 0.5 * hour,\n    format: function format(value, locale) {\n      // Whether can use `Intl.DateTimeFormat`.\n      // If `Intl` is not available,\n      // or the locale is not supported,\n      // then don't override the default labels.\n\n      /* istanbul ignore if */\n      if (!intlDateTimeFormatSupported()) {\n        return;\n      }\n      /* istanbul ignore else */\n\n\n      if (!formatters[locale]) {\n        formatters[locale] = {};\n      }\n      /* istanbul ignore else */\n\n\n      if (!formatters[locale].this_year) {\n        // \"Apr 11\" (MMMd)\n        formatters[locale].this_year = new Intl.DateTimeFormat(locale, {\n          month: 'short',\n          day: 'numeric'\n        });\n      } // Output month and day.\n\n\n      return formatters[locale].this_year.format(getDate(value));\n    }\n  }, // If `date` and `now` happened in defferent years,\n  // then output day, month and year.\n  {\n    threshold: function threshold(now, future) {\n      if (future) {\n        // Jan 1st 00:00 of the next year.\n        var nextYear = new Date(new Date(now).getFullYear() + 1, 0);\n        return (nextYear.getTime() - now) / 1000;\n      } else {\n        // Jan 1st of the current year.\n        var thisYear = new Date(new Date(now).getFullYear(), 0);\n        return (now - thisYear.getTime()) / 1000;\n      }\n    },\n    format: function format(value, locale) {\n      // Whether can use `Intl.DateTimeFormat`.\n      // If `Intl` is not available,\n      // or the locale is not supported,\n      // then don't override the default labels.\n\n      /* istanbul ignore if */\n      if (!intlDateTimeFormatSupported()) {\n        return;\n      }\n      /* istanbul ignore if */\n\n\n      if (!formatters[locale]) {\n        formatters[locale] = {};\n      }\n      /* istanbul ignore else */\n\n\n      if (!formatters[locale].other) {\n        // \"Apr 11, 2017\" (yMMMd)\n        formatters[locale].other = new Intl.DateTimeFormat(locale, {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric'\n        });\n      } // Output day, month and year.\n\n\n      return formatters[locale].other.format(getDate(value));\n    }\n  }],\n  flavour: ['tiny', 'short-time', 'narrow', 'short']\n};\n//# sourceMappingURL=twitter.js.map","import { convenient } from '../gradation'; // Similar to the default style but with \"ago\" omitted.\n//\n// just now\n// 5 minutes\n// 10 minutes\n// 15 minutes\n// 20 minutes\n// an hour\n// 2 hours\n// …\n// 20 hours\n// 1 day\n// 2 days\n// a week\n// 2 weeks\n// 3 weeks\n// a month\n// 2 months\n// 3 months\n// 4 months\n// a year\n// 2 years\n//\n\nexport default {\n  gradation: convenient,\n  flavour: 'long-time',\n  units: ['now', 'minute', 'hour', 'day', 'week', 'month', 'year']\n};\n//# sourceMappingURL=time.js.map","// Fallback locale.\n// (when not a single one of the supplied \"preferred\" locales is available)\nvar defaultLocale = 'en'; // For all locales added\n// their relative time formatter messages will be stored here.\n\nvar localesData = {};\nexport function getLocaleData(locale) {\n  return localesData[locale];\n}\nexport function addLocaleData(localeData) {\n  if (!localeData) {\n    throw new Error('[javascript-time-ago] No locale data passed.');\n  } // This locale data is stored in a global variable\n  // and later used when calling `.format(time)`.\n\n\n  localesData[localeData.locale] = localeData;\n}\n//# sourceMappingURL=LocaleDataStore.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport RelativeTimeFormat from 'relative-time-format';\nimport Cache from './cache';\nimport grade from './grade';\nimport chooseLocale from './locale';\nimport { twitterStyle, timeStyle, defaultStyle } from './style';\nimport { addLocaleData, getLocaleData as _getLocaleData } from './LocaleDataStore'; // const EXTRA_STYLES = [\n// \t'long-convenient',\n// \t'long-time',\n// \t'short-convenient',\n// \t'short-time',\n// \t'tiny'\n// ]\n// Valid time units.\n\nvar UNITS = ['now', // The rest are the same as in `Intl.RelativeTimeFormat`.\n'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'];\n\nvar JavascriptTimeAgo =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n   */\n  function JavascriptTimeAgo() {\n    var locales = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, JavascriptTimeAgo);\n\n    // Convert `locales` to an array.\n    if (typeof locales === 'string') {\n      locales = [locales];\n    } // Choose the most appropriate locale\n    // (one of the previously added ones)\n    // based on the list of preferred `locales` supplied by the user.\n\n\n    this.locale = chooseLocale(locales.concat(RelativeTimeFormat.getDefaultLocale()), _getLocaleData); // Use `Intl.NumberFormat` for formatting numbers (when available).\n\n    if (typeof Intl !== 'undefined' && Intl.NumberFormat) {\n      this.numberFormat = new Intl.NumberFormat(this.locale);\n    } // Cache `Intl.RelativeTimeFormat` instance.\n\n\n    this.relativeTimeFormatCache = new Cache();\n  } // Formats the relative date/time.\n  //\n  // @return {string} Returns the formatted relative date/time.\n  //\n  // @param {(Object|string)} [style] - Relative date/time formatting style.\n  //\n  // @param {string[]} [style.units] - A list of allowed time units\n  //                                  (e.g. ['second', 'minute', 'hour', …])\n  //\n  // @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.\n  //                                    If this function returns a value, then\n  //                                    the `.format()` call will return that value.\n  //                                    Otherwise it has no effect.\n  //\n  // @param {string} [style.flavour] - e.g. \"long\", \"short\", \"tiny\", etc.\n  //\n  // @param {Object[]} [style.gradation] - Time scale gradation steps.\n  //\n  // @param {string} style.gradation[].unit - Time interval measurement unit.\n  //                                          (e.g. ['second', 'minute', 'hour', …])\n  //\n  // @param {Number} style.gradation[].factor - Time interval measurement unit factor.\n  //                                            (e.g. `60` for 'minute')\n  //\n  // @param {Number} [style.gradation[].granularity] - A step for the unit's \"amount\" value.\n  //                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)\n  //\n  // @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.\n  //                                                 (e.g. `45` seconds for 'minute').\n  //                                                 There can also be specific `threshold_[unit]`\n  //                                                 thresholds for fine-tuning.\n  //\n\n\n  _createClass(JavascriptTimeAgo, [{\n    key: \"format\",\n    value: function format(input) {\n      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultStyle;\n\n      if (typeof style === 'string') {\n        switch (style) {\n          case 'twitter':\n            style = twitterStyle;\n            break;\n\n          case 'time':\n            style = timeStyle;\n            break;\n\n          default:\n            style = defaultStyle;\n        }\n      }\n\n      var _getDateAndTimeBeingF = getDateAndTimeBeingFormatted(input),\n          date = _getDateAndTimeBeingF.date,\n          time = _getDateAndTimeBeingF.time; // Get locale messages for this formatting flavour\n\n\n      var _this$getLocaleData = this.getLocaleData(style.flavour),\n          flavour = _this$getLocaleData.flavour,\n          localeData = _this$getLocaleData.localeData; // Can pass a custom `now`, e.g. for testing purposes.\n      // Technically it doesn't belong to `style`\n      // but since this is an undocumented internal feature,\n      // taking it from the `style` argument will do (for now).\n\n\n      var now = style.now || Date.now(); // how much time elapsed (in seconds)\n\n      var elapsed = (now - time) / 1000; // in seconds\n      // `custom` – A function of `{ elapsed, time, date, now, locale }`.\n      // If this function returns a value, then the `.format()` call will return that value.\n      // Otherwise the relative date/time is formatted as usual.\n      // This feature is currently not used anywhere and is here\n      // just for providing the ultimate customization point\n      // in case anyone would ever need that. Prefer using\n      // `gradation[step].format(value, locale)` instead.\n      //\n      // I guess `custom` is deprecated and will be removed\n      // in some future major version release.\n      //\n\n      if (style.custom) {\n        var custom = style.custom({\n          now: now,\n          date: date,\n          time: time,\n          elapsed: elapsed,\n          locale: this.locale\n        });\n\n        if (custom !== undefined) {\n          return custom;\n        }\n      } // Available time interval measurement units.\n\n\n      var units = getTimeIntervalMeasurementUnits(localeData, style.units); // If no available time unit is suitable, just output an empty string.\n\n      if (units.length === 0) {\n        console.error(\"Units \\\"\".concat(units.join(', '), \"\\\" were not found in locale data for \\\"\").concat(this.locale, \"\\\".\"));\n        return '';\n      } // Choose the appropriate time measurement unit\n      // and get the corresponding rounded time amount.\n\n\n      var step = grade(elapsed, now, units, style.gradation); // If no time unit is suitable, just output an empty string.\n      // E.g. when \"now\" unit is not available\n      // and \"second\" has a threshold of `0.5`\n      // (e.g. the \"canonical\" grading scale).\n\n      if (!step) {\n        return '';\n      }\n\n      if (step.format) {\n        return step.format(date || time, this.locale);\n      }\n\n      var unit = step.unit,\n          factor = step.factor,\n          granularity = step.granularity;\n      var amount = Math.abs(elapsed) / factor; // Apply granularity to the time amount\n      // (and fallback to the previous step\n      //  if the first level of granularity\n      //  isn't met by this amount)\n\n      if (granularity) {\n        // Recalculate the elapsed time amount based on granularity\n        amount = Math.round(amount / granularity) * granularity;\n      } // `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\n\n\n      if (unit === 'now') {\n        return getNowMessage(localeData, -1 * Math.sign(elapsed));\n      }\n\n      switch (flavour) {\n        case 'long':\n        case 'short':\n        case 'narrow':\n          // Format `value` using `Intl.RelativeTimeFormat`.\n          return this.getFormatter(flavour).format(-1 * Math.sign(elapsed) * Math.round(amount), unit);\n\n        default:\n          // Format `value`.\n          // (mimicks `Intl.RelativeTimeFormat` with the addition of extra styles)\n          return this.formatValue(-1 * Math.sign(elapsed) * Math.round(amount), unit, localeData);\n      }\n    }\n    /**\r\n     * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n     * @param  {number} value\r\n     * @param  {string} unit\r\n     * @param  {object} localeData — Relative time messages for the flavor.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value, unit, localeData) {\n      return this.getRule(value, unit, localeData).replace('{0}', this.formatNumber(Math.abs(value)));\n    }\n    /**\r\n     * Returns formatting rule for `value` in `units` (either in past or in future).\r\n     * @param {number} value - Time interval value.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @param  {object} localeData — Relative time messages for the flavor.\r\n     * @return {string}\r\n     * @example\r\n     * // Returns \"{0} days ago\"\r\n     * getRule(-2, \"day\")\r\n     */\n\n  }, {\n    key: \"getRule\",\n    value: function getRule(value, unit, localeData) {\n      var unitRules = localeData[unit]; // Bundle size optimization technique.\n\n      if (typeof unitRules === 'string') {\n        return unitRules;\n      } // Choose either \"past\" or \"future\" based on time `value` sign.\n      // If \"past\" is same as \"future\" then they're stored as \"other\".\n      // If there's only \"other\" then it's being collapsed.\n\n\n      var quantifierRules = unitRules[value <= 0 ? 'past' : 'future'] || unitRules; // Bundle size optimization technique.\n\n      if (typeof quantifierRules === 'string') {\n        return quantifierRules;\n      } // Quantify `value`.\n\n\n      var quantify = _getLocaleData(this.locale).quantify;\n\n      var quantifier = quantify && quantify(Math.abs(value)); // There seems to be no such locale in CLDR\n      // for which `quantify` is missing\n      // and still `past` and `future` messages\n      // contain something other than \"other\".\n\n      /* istanbul ignore next */\n\n      quantifier = quantifier || 'other'; // \"other\" rule is supposed to always be present.\n      // If only \"other\" rule is present then \"rules\" is not an object and is a string.\n\n      return quantifierRules[quantifier] || quantifierRules.other;\n    }\n    /**\r\n     * Formats a number into a string.\r\n     * Uses `Intl.NumberFormat` when available.\r\n     * @param  {number} number\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatNumber\",\n    value: function formatNumber(number) {\n      return this.numberFormat ? this.numberFormat.format(number) : String(number);\n    }\n    /**\r\n     * Returns an `Intl.RelativeTimeFormat` for a given `flavor`.\r\n     * @param {string} flavor\r\n     * @return {object} `Intl.RelativeTimeFormat` instance\r\n     */\n\n  }, {\n    key: \"getFormatter\",\n    value: function getFormatter(flavor) {\n      // `Intl.RelativeTimeFormat` instance creation is assumed a\n      // lengthy operation so the instances are cached and reused.\n      return this.relativeTimeFormatCache.get(this.locale, flavor) || this.relativeTimeFormatCache.put(this.locale, flavor, new RelativeTimeFormat(this.locale, {\n        style: flavor\n      }));\n    }\n    /**\r\n     * Gets locale messages for this formatting flavour\r\n     *\r\n     * @param {(string|string[])} flavour - Relative date/time formatting flavour.\r\n     *                                      If it's an array then all flavours are tried in order.\r\n     *\r\n     * @returns {Object} Returns an object of shape { flavour, localeData }\r\n     */\n\n  }, {\n    key: \"getLocaleData\",\n    value: function getLocaleData() {\n      var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      // Get relative time formatting rules for this locale\n      var localeData = _getLocaleData(this.locale); // Convert `flavour` to an array.\n\n\n      if (typeof flavour === 'string') {\n        flavour = [flavour];\n      } // \"long\" flavour is the default one.\n      // (it's always present)\n\n\n      flavour = flavour.concat('long'); // Find a suitable flavour.\n\n      for (var _iterator = flavour, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _ = _ref;\n\n        if (localeData[_]) {\n          return {\n            flavour: _,\n            localeData: localeData[_]\n          };\n        }\n      } // Can't happen - \"long\" flavour is always present.\n      // throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale \"${this.locale}\".`)\n\n    }\n  }]);\n\n  return JavascriptTimeAgo;\n}();\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\n\n\nexport { JavascriptTimeAgo as default };\nJavascriptTimeAgo.getDefaultLocale = RelativeTimeFormat.getDefaultLocale;\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\n\nJavascriptTimeAgo.setDefaultLocale = RelativeTimeFormat.setDefaultLocale;\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\n\nJavascriptTimeAgo.addLocale = function (localeData) {\n  addLocaleData(localeData);\n  RelativeTimeFormat.addLocale(localeData);\n};\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\n\n\nJavascriptTimeAgo.locale = JavascriptTimeAgo.addLocale; // Normalizes `.format()` `time` argument.\n\nfunction getDateAndTimeBeingFormatted(input) {\n  if (input.constructor === Date || isMockedDate(input)) {\n    return {\n      date: input,\n      time: input.getTime()\n    };\n  }\n\n  if (typeof input === 'number') {\n    return {\n      time: input // `date` is not required for formatting\n      // relative times unless \"twitter\" preset is used.\n      // date : new Date(input)\n\n    };\n  } // For some weird reason istanbul doesn't see this `throw` covered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unsupported relative time formatter input: \".concat(_typeof(input), \", \").concat(input));\n} // During testing via some testing libraries `Date`s aren't actually `Date`s.\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\n\n\nfunction isMockedDate(object) {\n  return _typeof(object) === 'object' && typeof object.getTime === 'function';\n} // Get available time interval measurement units.\n\n\nfunction getTimeIntervalMeasurementUnits(localeData, restrictedSetOfUnits) {\n  // All available time interval measurement units.\n  var units = Object.keys(localeData); // If only a specific set of available\n  // time measurement units can be used.\n\n  if (restrictedSetOfUnits) {\n    // Reduce available time interval measurement units\n    // based on user's preferences.\n    units = restrictedSetOfUnits.filter(function (_) {\n      return units.indexOf(_) >= 0;\n    });\n  } // Stock `Intl.RelativeTimeFormat` locale data doesn't have \"now\" units.\n  // So either \"now\" is present in extended locale data\n  // or it's taken from \".second.current\".\n\n\n  if ((!restrictedSetOfUnits || restrictedSetOfUnits.indexOf('now') >= 0) && units.indexOf('now') < 0) {\n    if (localeData.second.current) {\n      units.unshift('now');\n    }\n  }\n\n  return units;\n}\n\nfunction getNowMessage(localeData, value) {\n  // Specific \"now\" message form extended locale data (if present).\n  if (localeData.now) {\n    // Bundle size optimization technique.\n    if (typeof localeData.now === 'string') {\n      return localeData.now;\n    } // Not handling `value === 0` as `localeData.now.current` here\n    // because it wouldn't make sense: \"now\" is a moment,\n    // so one can't possibly differentiate between a\n    // \"previous\" moment, a \"current\" moment and a \"next moment\".\n    // It can only be differentiated between \"past\" and \"future\".\n\n\n    if (value <= 0) {\n      return localeData.now.past;\n    } else {\n      return localeData.now.future;\n    }\n  } // Use \".second.current\" as \"now\" message.\n\n\n  return localeData.second.current; // If this function was called then\n  // it means that either \"now\" unit messages are\n  // available or \".second.current\" message is present.\n}\n//# sourceMappingURL=JavascriptTimeAgo.js.map"],"sourceRoot":""}