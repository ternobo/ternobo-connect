(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[47],{

/***/ "./node_modules/persian-date/dist/persian-date.js":
/*!********************************************************!*\
  !*** ./node_modules/persian-date/dist/persian-date.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * \n * persian-date -  1.1.0\n * Reza Babakhani <babakhani.reza@gmail.com>\n * http://babakhani.github.io/PersianWebToolkit/docs/persian-date/\n * Under MIT license \n * \n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 8);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar durationUnit = __webpack_require__(4).durationUnit;\n\nvar Helpers = function () {\n    function Helpers() {\n        _classCallCheck(this, Helpers);\n    }\n\n    _createClass(Helpers, [{\n        key: 'toPersianDigit',\n\n\n        /**\n         * @description return converted string to persian digit\n         * @param digit\n         * @returns {string|*}\n         */\n        value: function toPersianDigit(digit) {\n            var latinDigit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n            return digit.toString().replace(/\\d+/g, function (digit) {\n                var enDigitArr = [],\n                    peDigitArr = [],\n                    i = void 0,\n                    j = void 0;\n                for (i = 0; i < digit.length; i += 1) {\n                    enDigitArr.push(digit.charCodeAt(i));\n                }\n                for (j = 0; j < enDigitArr.length; j += 1) {\n                    peDigitArr.push(String.fromCharCode(enDigitArr[j] + (!!latinDigit && latinDigit === true ? 1584 : 1728)));\n                }\n                return peDigitArr.join('');\n            });\n        }\n\n        /**\n         * @param number\n         * @param targetLength\n         * @returns {string}\n         */\n\n    }, {\n        key: 'leftZeroFill',\n        value: function leftZeroFill(number, targetLength) {\n            var output = number + '';\n            while (output.length < targetLength) {\n                output = '0' + output;\n            }\n            return output;\n        }\n\n        /**\n         * @description normalize duration params and return valid param\n         * @return {{unit: *, value: *}}\n         */\n\n    }, {\n        key: 'normalizeDuration',\n        value: function normalizeDuration() {\n            var unit = void 0,\n                value = void 0;\n            if (typeof arguments[0] === 'string') {\n                unit = arguments[0];\n                value = arguments[1];\n            } else {\n                value = arguments[0];\n                unit = arguments[1];\n            }\n            if (durationUnit.year.indexOf(unit) > -1) {\n                unit = 'year';\n            } else if (durationUnit.month.indexOf(unit) > -1) {\n                unit = 'month';\n            } else if (durationUnit.week.indexOf(unit) > -1) {\n                unit = 'week';\n            } else if (durationUnit.day.indexOf(unit) > -1) {\n                unit = 'day';\n            } else if (durationUnit.hour.indexOf(unit) > -1) {\n                unit = 'hour';\n            } else if (durationUnit.minute.indexOf(unit) > -1) {\n                unit = 'minute';\n            } else if (durationUnit.second.indexOf(unit) > -1) {\n                unit = 'second';\n            } else if (durationUnit.millisecond.indexOf(unit) > -1) {\n                unit = 'millisecond';\n            }\n            return {\n                unit: unit,\n                value: value\n            };\n        }\n\n        /**\n         *\n         * @param number\n         * @returns {number}\n         */\n\n    }, {\n        key: 'absRound',\n        value: function absRound(number) {\n            if (number < 0) {\n                return Math.ceil(number);\n            } else {\n                return Math.floor(number);\n            }\n        }\n\n        /**\n         *\n         * @param number\n         * @return {number}\n         */\n\n    }, {\n        key: 'absFloor',\n        value: function absFloor(number) {\n            if (number < 0) {\n                // -0 -> 0\n                return Math.ceil(number) || 0;\n            } else {\n                return Math.floor(number);\n            }\n        }\n    }]);\n\n    return Helpers;\n}();\n\nmodule.exports = Helpers;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TypeChecking = __webpack_require__(10);\nvar Algorithms = __webpack_require__(2);\nvar Helpers = __webpack_require__(0);\nvar Duration = __webpack_require__(5);\nvar Validator = __webpack_require__(11);\nvar toPersianDigit = new Helpers().toPersianDigit;\nvar leftZeroFill = new Helpers().leftZeroFill;\nvar normalizeDuration = new Helpers().normalizeDuration;\nvar fa = __webpack_require__(7);\nvar en = __webpack_require__(6);\n\n/**\n * @description persian date class\n */\n\nvar PersianDateClass = function () {\n\n    /**\n     * @param input\n     * @return {PersianDateClass}\n     */\n    function PersianDateClass(input) {\n        _classCallCheck(this, PersianDateClass);\n\n        this.calendarType = PersianDateClass.calendarType;\n        this.localType = PersianDateClass.localType;\n        this.leapYearMode = PersianDateClass.leapYearMode;\n\n        this.algorithms = new Algorithms(this);\n        this.version = \"1.1.0\";\n        this._utcMode = false;\n        if (this.localType !== 'fa') {\n            this.formatPersian = false;\n        } else {\n            this.formatPersian = '_default';\n        }\n        this.State = this.algorithms.State;\n        this.setup(input);\n        if (this.State.isInvalidDate) {\n            // Return Date like message\n            return new Date([-1, -1]);\n        }\n        return this;\n    }\n\n    /**\n     * @param input\n     */\n\n\n    _createClass(PersianDateClass, [{\n        key: 'setup',\n        value: function setup(input) {\n            // Convert Any thing to Gregorian Date\n            if (TypeChecking.isDate(input)) {\n                this._gDateToCalculators(input);\n            } else if (TypeChecking.isArray(input)) {\n                if (!Validator.validateInputArray(input)) {\n                    this.State.isInvalidDate = true;\n                    return false;\n                }\n                this.algorithmsCalc([input[0], input[1] ? input[1] : 1, input[2] ? input[2] : 1, input[3] ? input[3] : 0, input[4] ? input[4] : 0, input[5] ? input[5] : 0, input[6] ? input[6] : 0]);\n            } else if (TypeChecking.isNumber(input)) {\n                var fromUnix = new Date(input);\n                this._gDateToCalculators(fromUnix);\n            }\n            // instance of pDate\n            else if (input instanceof PersianDateClass) {\n                    this.algorithmsCalc([input.year(), input.month(), input.date(), input.hour(), input.minute(), input.second(), input.millisecond()]);\n                }\n                // ASP.NET JSON Date\n                else if (input && input.substring(0, 6) === '/Date(') {\n                        var fromDotNet = new Date(parseInt(input.substr(6)));\n                        this._gDateToCalculators(fromDotNet);\n                    } else {\n                        var now = new Date();\n                        this._gDateToCalculators(now);\n                    }\n        }\n\n        /**\n         * @param input\n         * @return {*}\n         * @private\n         */\n\n    }, {\n        key: '_getSyncedClass',\n        value: function _getSyncedClass(input) {\n            var syncedCelander = PersianDateClass.toCalendar(this.calendarType).toLocale(this.localType).toLeapYearMode(this.leapYearMode);\n            return new syncedCelander(input);\n        }\n\n        /**\n         * @param inputgDate\n         * @private\n         */\n\n    }, {\n        key: '_gDateToCalculators',\n        value: function _gDateToCalculators(inputgDate) {\n            this.algorithms.calcGregorian([inputgDate.getFullYear(), inputgDate.getMonth(), inputgDate.getDate(), inputgDate.getHours(), inputgDate.getMinutes(), inputgDate.getSeconds(), inputgDate.getMilliseconds()]);\n        }\n\n        /**\n         * @since 1.0.0\n         * @description Helper method that return date range name like week days name, month names, month days names (specially in persian calendar).\n         * @static\n         * @return {*}\n         */\n\n    }, {\n        key: 'rangeName',\n\n\n        /**\n         * @since 1.0.0\n         * @description Helper method that return date range name like week days name, month names, month days names (specially in persian calendar).\n         * @return {*}\n         */\n        value: function rangeName() {\n            var t = this.calendarType;\n            if (this.localType === 'fa') {\n                if (t === 'persian') {\n                    return fa.persian;\n                } else {\n                    return fa.gregorian;\n                }\n            } else {\n                if (t === 'persian') {\n                    return en.persian;\n                } else {\n                    return en.gregorian;\n                }\n            }\n        }\n\n        /**\n         * @since 1.0.0\n         * @param input\n         * @return {PersianDateClass}\n         */\n\n    }, {\n        key: 'toLeapYearMode',\n        value: function toLeapYearMode(input) {\n            this.leapYearMode = input;\n            if (input === 'astronomical' && this.calendarType == 'persian') {\n                this.leapYearMode = 'astronomical';\n            } else if (input === 'algorithmic' && this.calendarType == 'persian') {\n                this.leapYearMode = 'algorithmic';\n            }\n            this.algorithms.updateFromGregorian();\n            return this;\n        }\n\n        /**\n         * @since 1.0.0\n         * @static\n         * @param input\n         * @return {PersianDateClass}\n         */\n\n    }, {\n        key: 'toCalendar',\n\n\n        /**\n         * @since 1.0.0\n         * @param input\n         * @return {PersianDateClass}\n         */\n        value: function toCalendar(input) {\n            this.calendarType = input;\n            this.algorithms.updateFromGregorian();\n            return this;\n        }\n\n        /**\n         * @since 1.0.0\n         * @static\n         * @param input\n         * @return {PersianDateClass}\n         */\n\n    }, {\n        key: 'toLocale',\n\n\n        /**\n         * @since 1.0.0\n         * @param input\n         * @return {PersianDateClass}\n         */\n        value: function toLocale(input) {\n            this.localType = input;\n            if (this.localType !== 'fa') {\n                this.formatPersian = false;\n            } else {\n                this.formatPersian = '_default';\n            }\n            return this;\n        }\n\n        /**\n         * @return {*}\n         * @private\n         */\n\n    }, {\n        key: '_locale',\n        value: function _locale() {\n            var t = this.calendarType;\n            if (this.localType === 'fa') {\n                if (t === 'persian') {\n                    return fa.persian;\n                } else {\n                    return fa.gregorian;\n                }\n            } else {\n                if (t === 'persian') {\n                    return en.persian;\n                } else {\n                    return en.gregorian;\n                }\n            }\n        }\n\n        /**\n         * @param input\n         * @private\n         */\n\n    }, {\n        key: '_weekName',\n        value: function _weekName(input) {\n            return this._locale().weekdays[input - 1];\n        }\n\n        /**\n         * @param input\n         * @private\n         */\n\n    }, {\n        key: '_weekNameShort',\n        value: function _weekNameShort(input) {\n            return this._locale().weekdaysShort[input - 1];\n        }\n\n        /**\n         * @param input\n         * @private\n         */\n\n    }, {\n        key: '_weekNameMin',\n        value: function _weekNameMin(input) {\n            return this._locale().weekdaysMin[input - 1];\n        }\n\n        /**\n         * @param input\n         * @return {*}\n         * @private\n         */\n\n    }, {\n        key: '_dayName',\n        value: function _dayName(input) {\n            return this._locale().persianDaysName[input - 1];\n        }\n\n        /**\n         * @param input\n         * @private\n         */\n\n    }, {\n        key: '_monthName',\n        value: function _monthName(input) {\n            return this._locale().months[input - 1];\n        }\n\n        /**\n         * @param input\n         * @private\n         */\n\n    }, {\n        key: '_monthNameShort',\n        value: function _monthNameShort(input) {\n            return this._locale().monthsShort[input - 1];\n        }\n\n        /**\n         * @param obj\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isPersianDate',\n\n\n        /**\n         * @param obj\n         * @return {boolean}\n         */\n        value: function isPersianDate(obj) {\n            return obj instanceof PersianDateClass;\n        }\n\n        /**\n         * @returns {PersianDate}\n         */\n\n    }, {\n        key: 'clone',\n        value: function clone() {\n            return this._getSyncedClass(this.State.gDate);\n        }\n\n        /**\n         * @since 1.0.0\n         * @param dateArray\n         * @return {*}\n         */\n\n    }, {\n        key: 'algorithmsCalc',\n        value: function algorithmsCalc(dateArray) {\n            if (this.isPersianDate(dateArray)) {\n                dateArray = [dateArray.year(), dateArray.month(), dateArray.date(), dateArray.hour(), dateArray.minute(), dateArray.second(), dateArray.millisecond()];\n            }\n            if (this.calendarType === 'persian' && this.leapYearMode == 'algorithmic') {\n                return this.algorithms.calcPersian(dateArray);\n            } else if (this.calendarType === 'persian' && this.leapYearMode == 'astronomical') {\n                return this.algorithms.calcPersiana(dateArray);\n            } else if (this.calendarType === 'gregorian') {\n                dateArray[1] = dateArray[1] - 1;\n                return this.algorithms.calcGregorian(dateArray);\n            }\n        }\n\n        /**\n         * @since 1.0.0\n         * @return {*}\n         */\n\n    }, {\n        key: 'calendar',\n        value: function calendar() {\n            var key = void 0;\n            if (this.calendarType == 'persian') {\n                if (this.leapYearMode == 'astronomical') {\n                    key = 'persianAstro';\n                } else if (this.leapYearMode == 'algorithmic') {\n                    key = 'persianAlgo';\n                }\n            } else {\n                key = 'gregorian';\n            }\n            return this.State[key];\n        }\n\n        /**\n         * @description return Duration object\n         * @param input\n         * @param key\n         * @returns {Duration}\n         */\n\n    }, {\n        key: 'duration',\n\n\n        /**\n         * @description return Duration object\n         * @param input\n         * @param key\n         * @returns {Duration}\n         */\n        value: function duration(input, key) {\n            return new Duration(input, key);\n        }\n\n        /**\n         * @description check if passed object is duration\n         * @param obj\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isDuration',\n\n\n        /**\n         * @description check if passed object is duration\n         * @param obj\n         * @returns {boolean}\n         */\n        value: function isDuration(obj) {\n            return obj instanceof Duration;\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'years',\n        value: function years(input) {\n            return this.year(input);\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'year',\n        value: function year(input) {\n            if (input || input === 0) {\n                this.algorithmsCalc([input, this.month(), this.date(), this.hour(), this.minute(), this.second(), this.millisecond()]);\n                return this;\n            } else {\n                return this.calendar().year;\n            }\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'month',\n        value: function month(input) {\n            if (input || input === 0) {\n                this.algorithmsCalc([this.year(), input, this.date()]);\n                return this;\n            } else {\n                return this.calendar().month + 1;\n            }\n        }\n\n        /**\n         * Day of week\n         * @returns {Function|Date.toJSON.day|date_json.day|PersianDate.day|day|output.day|*}\n         */\n\n    }, {\n        key: 'days',\n        value: function days() {\n            return this.day();\n        }\n\n        /**\n         * @returns {Function|Date.toJSON.day|date_json.day|PersianDate.day|day|output.day|*}\n         */\n\n    }, {\n        key: 'day',\n        value: function day() {\n            return this.calendar().weekday;\n        }\n\n        /**\n         * Day of Months\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'dates',\n        value: function dates(input) {\n            return this.date(input);\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'date',\n        value: function date(input) {\n            if (input || input === 0) {\n                this.algorithmsCalc([this.year(), this.month(), input]);\n                return this;\n            } else {\n                return this.calendar().day;\n            }\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'hour',\n        value: function hour(input) {\n            return this.hours(input);\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'hours',\n        value: function hours(input) {\n            if (input || input === 0) {\n                if (input === 0) {\n                    input = 24;\n                }\n                this.algorithmsCalc([this.year(), this.month(), this.date(), input]);\n                return this;\n            } else {\n                return this.State.gDate.getHours();\n            }\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'minute',\n        value: function minute(input) {\n            return this.minutes(input);\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'minutes',\n        value: function minutes(input) {\n            if (input || input === 0) {\n                this.algorithmsCalc([this.year(), this.month(), this.date(), this.hour(), input]);\n                return this;\n            } else {\n                return this.State.gDate.getMinutes();\n            }\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'second',\n        value: function second(input) {\n            return this.seconds(input);\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'seconds',\n        value: function seconds(input) {\n            if (input || input === 0) {\n                this.algorithmsCalc([this.year(), this.month(), this.date(), this.hour(), this.minute(), input]);\n                return this;\n            } else {\n                return this.State.gDate.getSeconds();\n            }\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         * Getter Setter\n         */\n\n    }, {\n        key: 'millisecond',\n        value: function millisecond(input) {\n            return this.milliseconds(input);\n        }\n\n        /**\n         * @param input\n         * @returns {*}\n         */\n\n    }, {\n        key: 'milliseconds',\n        value: function milliseconds(input) {\n            if (input || input === 0) {\n                this.algorithmsCalc([this.year(), this.month(), this.date(), this.hour(), this.minute(), this.second(), input]);\n                return this;\n            } else {\n                return this.State.gregorian.millisecond;\n            }\n        }\n\n        /**\n         * Return Milliseconds since the Unix Epoch (1318874398806)\n         * @returns {*}\n         * @private\n         */\n        //    _valueOf () {\n        //        return this.State.gDate.valueOf();\n        //    }\n\n\n    }, {\n        key: 'unix',\n\n\n        /**\n         * Return Unix Timestamp (1318874398)\n         * @param timestamp\n         * @returns {*}\n         */\n        value: function unix(timestamp) {\n            var output = void 0;\n            if (timestamp) {\n                return this._getSyncedClass(timestamp * 1000);\n            } else {\n                var str = this.State.gDate.valueOf().toString();\n                output = str.substring(0, str.length - 3);\n            }\n            return parseInt(output);\n        }\n\n        /**\n         * @returns {*}\n         */\n\n    }, {\n        key: 'valueOf',\n        value: function valueOf() {\n            return this.State.gDate.valueOf();\n        }\n\n        /**\n         * @param year\n         * @param month\n         * @returns {*}\n         * @since 1.0.0\n         */\n\n    }, {\n        key: 'getFirstWeekDayOfMonth',\n\n\n        /**\n         * @param year\n         * @param month\n         * @returns {*}\n         * @since 1.0.0\n         */\n        value: function getFirstWeekDayOfMonth(year, month) {\n            return this._getSyncedClass([year, month, 1]).day();\n        }\n\n        /**\n         * @param input\n         * @param val\n         * @param asFloat\n         * @returns {*}\n         */\n\n    }, {\n        key: 'diff',\n        value: function diff(input, val, asFloat) {\n            var self = this,\n                inputMoment = input,\n                zoneDiff = 0,\n                diff = self.State.gDate - inputMoment.toDate() - zoneDiff,\n                year = self.year() - inputMoment.year(),\n                month = self.month() - inputMoment.month(),\n                date = (self.date() - inputMoment.date()) * -1,\n                output = void 0;\n\n            if (val === 'months' || val === 'month') {\n                output = year * 12 + month + date / 30;\n            } else if (val === 'years' || val === 'year') {\n                output = year + (month + date / 30) / 12;\n            } else {\n                output = val === 'seconds' || val === 'second' ? diff / 1e3 : // 1000\n                val === 'minutes' || val === 'minute' ? diff / 6e4 : // 1000 * 60\n                val === 'hours' || val === 'hour' ? diff / 36e5 : // 1000 * 60 * 60\n                val === 'days' || val === 'day' ? diff / 864e5 : // 1000 * 60 * 60 * 24\n                val === 'weeks' || val === 'week' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7\n                diff;\n            }\n            return asFloat ? output : Math.round(output);\n        }\n\n        /**\n         * @param key\n         * @returns {*}\n         */\n\n    }, {\n        key: 'startOf',\n        value: function startOf(key) {\n            var syncedCelander = PersianDateClass.toCalendar(this.calendarType).toLocale(this.localType);\n            var newArray = new PersianDateClass(this.valueOf() - (this.calendar().weekday - 1) * 86400000).toArray();\n            // Simplify this\\\n            /* jshint ignore:start */\n            switch (key) {\n                case 'years':\n                case 'year':\n                    return new syncedCelander([this.year(), 1, 1]);\n                case 'months':\n                case 'month':\n                    return new syncedCelander([this.year(), this.month(), 1]);\n                case 'days':\n                case 'day':\n                    return new syncedCelander([this.year(), this.month(), this.date(), 0, 0, 0]);\n                case 'hours':\n                case 'hour':\n                    return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), 0, 0]);\n                case 'minutes':\n                case 'minute':\n                    return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), this.minutes(), 0]);\n                case 'seconds':\n                case 'second':\n                    return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), this.minutes(), this.seconds()]);\n                case 'weeks':\n                case 'week':\n                    return new syncedCelander(newArray);\n                default:\n                    return this.clone();\n            }\n            /* jshint ignore:end */\n        }\n\n        /**\n         * @param key\n         * @returns {*}\n         */\n        /* eslint-disable no-case-declarations */\n\n    }, {\n        key: 'endOf',\n        value: function endOf(key) {\n            var syncedCelander = PersianDateClass.toCalendar(this.calendarType).toLocale(this.localType);\n            // Simplify this\n            switch (key) {\n                case 'years':\n                case 'year':\n                    var days = this.isLeapYear() ? 30 : 29;\n                    return new syncedCelander([this.year(), 12, days, 23, 59, 59]);\n                case 'months':\n                case 'month':\n                    var monthDays = this.daysInMonth(this.year(), this.month());\n                    return new syncedCelander([this.year(), this.month(), monthDays, 23, 59, 59]);\n                case 'days':\n                case 'day':\n                    return new syncedCelander([this.year(), this.month(), this.date(), 23, 59, 59]);\n                case 'hours':\n                case 'hour':\n                    return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), 59, 59]);\n                case 'minutes':\n                case 'minute':\n                    return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), this.minutes(), 59]);\n                case 'seconds':\n                case 'second':\n                    return new syncedCelander([this.year(), this.month(), this.date(), this.hours(), this.minutes(), this.seconds()]);\n                case 'weeks':\n                case 'week':\n                    var weekDayNumber = this.calendar().weekday;\n                    return new syncedCelander([this.year(), this.month(), this.date() + (7 - weekDayNumber)]);\n                default:\n                    return this.clone();\n            }\n            /* eslint-enable no-case-declarations */\n        }\n\n        /**\n         * @returns {*}\n         */\n\n    }, {\n        key: 'sod',\n        value: function sod() {\n            return this.startOf('day');\n        }\n\n        /**\n         * @returns {*}\n         */\n\n    }, {\n        key: 'eod',\n        value: function eod() {\n            return this.endOf('day');\n        }\n\n        /** Get the timezone offset in minutes.\n         * @return {*}\n         */\n\n    }, {\n        key: 'zone',\n        value: function zone(input) {\n            if (input || input === 0) {\n                this.State.zone = input;\n                return this;\n            } else {\n                return this.State.zone;\n            }\n        }\n\n        /**\n         * @returns {PersianDate}\n         */\n\n    }, {\n        key: 'local',\n        value: function local() {\n            var utcStamp = void 0;\n            if (this._utcMode) {\n                var ThatDayOffset = new Date(this.toDate()).getTimezoneOffset();\n                var offsetMils = ThatDayOffset * 60 * 1000;\n                if (ThatDayOffset < 0) {\n                    utcStamp = this.valueOf() - offsetMils;\n                } else {\n                    /* istanbul ignore next */\n                    utcStamp = this.valueOf() + offsetMils;\n                }\n                this.toCalendar(PersianDateClass.calendarType);\n                var utcDate = new Date(utcStamp);\n                this._gDateToCalculators(utcDate);\n                this._utcMode = false;\n                this.zone(ThatDayOffset);\n                return this;\n            } else {\n                return this;\n            }\n        }\n\n        /**\n         * @param input\n         * @return {*}\n         */\n\n    }, {\n        key: 'utc',\n\n\n        /**\n         * @description Current date/time in UTC mode\n         * @param input\n         * @returns {*}\n         */\n        value: function utc(input) {\n            var utcStamp = void 0;\n            if (input) {\n                return this._getSyncedClass(input).utc();\n            }\n            if (this._utcMode) {\n                return this;\n            } else {\n                var offsetMils = this.zone() * 60 * 1000;\n                if (this.zone() < 0) {\n                    utcStamp = this.valueOf() + offsetMils;\n                } else {\n                    /* istanbul ignore next */\n                    utcStamp = this.valueOf() - offsetMils;\n                }\n                var utcDate = new Date(utcStamp),\n                    d = this._getSyncedClass(utcDate);\n                this.algorithmsCalc(d);\n                this._utcMode = true;\n                this.zone(0);\n                return this;\n            }\n        }\n\n        /**\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isUtc',\n        value: function isUtc() {\n            return this._utcMode;\n        }\n\n        /**\n         * @returns {boolean}\n         * @link https://fa.wikipedia.org/wiki/%D8%B3%D8%A7%D8%B9%D8%AA_%D8%AA%D8%A7%D8%A8%D8%B3%D8%AA%D8%A7%D9%86%DB%8C\n         */\n\n    }, {\n        key: 'isDST',\n        value: function isDST() {\n            var month = this.month(),\n                day = this.date();\n            if (month == 1 && day > 1 || month == 6 && day < 31 || month < 6 && month >= 2) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'isLeapYear',\n        value: function isLeapYear(year) {\n            if (year === undefined) {\n                year = this.year();\n            }\n            if (this.calendarType == 'persian' && this.leapYearMode === 'algorithmic') {\n                return this.algorithms.leap_persian(year);\n            }\n            if (this.calendarType == 'persian' && this.leapYearMode === 'astronomical') {\n                return this.algorithms.leap_persiana(year);\n            } else if (this.calendarType == 'gregorian') {\n                return this.algorithms.leap_gregorian(year);\n            }\n        }\n\n        /**\n         * @param yearInput\n         * @param monthInput\n         * @returns {number}\n         */\n\n    }, {\n        key: 'daysInMonth',\n        value: function daysInMonth(yearInput, monthInput) {\n            var year = yearInput ? yearInput : this.year(),\n                month = monthInput ? monthInput : this.month();\n            if (this.calendarType === 'persian') {\n                if (month < 1 || month > 12) return 0;\n                if (month < 7) return 31;\n                if (month < 12) return 30;\n                if (this.isLeapYear(year)) {\n                    return 30;\n                }\n                return 29;\n            }\n            if (this.calendarType === 'gregorian') {\n                return new Date(year, month, 0).getDate();\n            }\n        }\n\n        /**\n         * @description Return Native Javascript Date\n         * @returns {*|PersianDate.gDate}\n         */\n\n    }, {\n        key: 'toDate',\n        value: function toDate() {\n            return this.State.gDate;\n        }\n\n        /**\n         * @description Returns Array Of Persian Date\n         * @returns {array}\n         */\n\n    }, {\n        key: 'toArray',\n        value: function toArray() {\n            return [this.year(), this.month(), this.date(), this.hour(), this.minute(), this.second(), this.millisecond()];\n        }\n\n        /**\n         * @returns {*}\n         */\n\n    }, {\n        key: 'formatNumber',\n        value: function formatNumber() {\n            var output = void 0,\n                self = this;\n\n            // if default conf dosent set follow golbal config\n            if (this.formatPersian === '_default') {\n                if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n                    /* istanbul ignore next */\n                    if (self.formatPersian === false) {\n                        output = false;\n                    } else {\n                        // Default Conf\n                        output = true;\n                    }\n                }\n                /* istanbul ignore next */\n                else {\n                        if (window.formatPersian === false) {\n                            output = false;\n                        } else {\n                            // Default Conf\n                            output = true;\n                        }\n                    }\n            } else {\n                if (this.formatPersian === true) {\n                    output = true;\n                } else if (this.formatPersian === false) {\n                    output = false;\n                } else {\n                    Error('Invalid Config \"formatPersian\" !!');\n                }\n            }\n            return output;\n        }\n\n        /**\n         * @param inputString\n         * @returns {*}\n         */\n\n    }, {\n        key: 'format',\n        value: function format(inputString) {\n            if (this.State.isInvalidDate) {\n                return false;\n            }\n            var self = this,\n                formattingTokens = /([[^[]*])|(\\\\)?(Mo|MM?M?M?|Do|DD?D?D?|dddddd?|ddddd?|dddd?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|X|LT|ll?l?l?|LL?L?L?)/g,\n                info = {\n                year: self.year(),\n                month: self.month(),\n                hour: self.hours(),\n                minute: self.minutes(),\n                second: self.seconds(),\n                date: self.date(),\n                timezone: self.zone(),\n                unix: self.unix()\n            },\n                formatToPersian = self.formatNumber();\n\n            var checkPersian = function checkPersian(i) {\n                if (formatToPersian) {\n                    return toPersianDigit(i);\n                } else {\n                    return i;\n                }\n            };\n\n            /* jshint ignore:start */\n            function replaceFunction(input) {\n                switch (input) {\n                    // AM/PM\n                    case 'a':\n                        {\n                            if (formatToPersian) return info.hour >= 12 ? 'ب ظ' : 'ق ظ';else return info.hour >= 12 ? 'PM' : 'AM';\n                        }\n                    // Hours (Int)\n                    case 'H':\n                        {\n                            return checkPersian(info.hour);\n                        }\n                    case 'HH':\n                        {\n                            return checkPersian(leftZeroFill(info.hour, 2));\n                        }\n                    case 'h':\n                        {\n                            return checkPersian(info.hour % 12);\n                        }\n                    case 'hh':\n                        {\n                            return checkPersian(leftZeroFill(info.hour % 12, 2));\n                        }\n                    // Minutes\n                    case 'm':\n                        {\n                            return checkPersian(leftZeroFill(info.minute, 2));\n                        }\n                    // Two Digit Minutes\n                    case 'mm':\n                        {\n                            return checkPersian(leftZeroFill(info.minute, 2));\n                        }\n                    // Second\n                    case 's':\n                        {\n                            return checkPersian(info.second);\n                        }\n                    case 'ss':\n                        {\n                            return checkPersian(leftZeroFill(info.second, 2));\n                        }\n                    // Day (Int)\n                    case 'D':\n                        {\n                            return checkPersian(leftZeroFill(info.date));\n                        }\n                    // Return Two Digit\n                    case 'DD':\n                        {\n                            return checkPersian(leftZeroFill(info.date, 2));\n                        }\n                    // Return day Of Month\n                    case 'DDD':\n                        {\n                            var t = self.startOf('year');\n                            return checkPersian(leftZeroFill(self.diff(t, 'days'), 3));\n                        }\n                    // Return Day of Year\n                    case 'DDDD':\n                        {\n                            var _t = self.startOf('year');\n                            return checkPersian(leftZeroFill(self.diff(_t, 'days'), 3));\n                        }\n                    // Return day Of week\n                    case 'd':\n                        {\n                            return checkPersian(self.calendar().weekday);\n                        }\n                    // Return week day name abbr\n                    case 'ddd':\n                        {\n                            return self._weekNameShort(self.calendar().weekday);\n                        }\n                    case 'dddd':\n                        {\n                            return self._weekName(self.calendar().weekday);\n                        }\n                    // Return Persian Day Name\n                    case 'ddddd':\n                        {\n                            return self._dayName(self.calendar().day);\n                        }\n                    // Return Persian Day Name\n                    case 'dddddd':\n                        {\n                            return self._weekNameMin(self.calendar().weekday);\n                        }\n                    // Return Persian Day Name\n                    case 'w':\n                        {\n                            var _t2 = self.startOf('year'),\n                                day = parseInt(self.diff(_t2, 'days') / 7) + 1;\n                            return checkPersian(day);\n                        }\n                    // Return Persian Day Name\n                    case 'ww':\n                        {\n                            var _t3 = self.startOf('year'),\n                                _day = leftZeroFill(parseInt(self.diff(_t3, 'days') / 7) + 1, 2);\n                            return checkPersian(_day);\n                        }\n                    // Month  (Int)\n                    case 'M':\n                        {\n                            return checkPersian(info.month);\n                        }\n                    // Two Digit Month (Str)\n                    case 'MM':\n                        {\n                            return checkPersian(leftZeroFill(info.month, 2));\n                        }\n                    // Abbr String of Month (Str)\n                    case 'MMM':\n                        {\n                            return self._monthNameShort(info.month);\n                        }\n                    // Full String name of Month (Str)\n                    case 'MMMM':\n                        {\n                            return self._monthName(info.month);\n                        }\n                    // Year\n                    // Two Digit Year (Str)\n                    case 'YY':\n                        {\n                            var yearDigitArray = info.year.toString().split('');\n                            return checkPersian(yearDigitArray[2] + yearDigitArray[3]);\n                        }\n                    // Full Year (Int)\n                    case 'YYYY':\n                        {\n                            return checkPersian(info.year);\n                        }\n                    /* istanbul ignore next */\n                    case 'Z':\n                        {\n                            var flag = '+',\n                                hours = Math.round(info.timezone / 60),\n                                minutes = info.timezone % 60;\n\n                            if (minutes < 0) {\n                                minutes *= -1;\n                            }\n                            if (hours < 0) {\n                                flag = '-';\n                                hours *= -1;\n                            }\n\n                            var z = flag + leftZeroFill(hours, 2) + ':' + leftZeroFill(minutes, 2);\n                            return checkPersian(z);\n                        }\n                    /* istanbul ignore next */\n                    case 'ZZ':\n                        {\n                            var _flag = '+',\n                                _hours = Math.round(info.timezone / 60),\n                                _minutes = info.timezone % 60;\n\n                            if (_minutes < 0) {\n                                _minutes *= -1;\n                            }\n                            if (_hours < 0) {\n                                _flag = '-';\n                                _hours *= -1;\n                            }\n                            var _z = _flag + leftZeroFill(_hours, 2) + '' + leftZeroFill(_minutes, 2);\n                            return checkPersian(_z);\n                        }\n                    /* istanbul ignore next */\n                    case 'X':\n                        {\n                            return self.unix();\n                        }\n                    // 8:30 PM\n                    case 'LT':\n                        {\n                            return self.format('H:m a');\n                        }\n                    // 09/04/1986\n                    case 'L':\n                        {\n                            return self.format('YYYY/MM/DD');\n                        }\n                    // 9/4/1986\n                    case 'l':\n                        {\n                            return self.format('YYYY/M/D');\n                        }\n                    // September 4th 1986\n                    case 'LL':\n                        {\n                            return self.format('MMMM DD YYYY');\n                        }\n                    // Sep 4 1986\n                    case 'll':\n                        {\n                            return self.format('MMM DD YYYY');\n                        }\n                    //September 4th 1986 8:30 PM\n                    case 'LLL':\n                        {\n                            return self.format('MMMM YYYY DD   H:m  a');\n                        }\n                    // Sep 4 1986 8:30 PM\n                    case 'lll':\n                        {\n                            return self.format('MMM YYYY DD   H:m  a');\n                        }\n                    //Thursday, September 4th 1986 8:30 PM\n                    case 'LLLL':\n                        {\n                            return self.format('dddd D MMMM YYYY  H:m  a');\n                        }\n                    // Thu, Sep 4 1986 8:30 PM\n                    case 'llll':\n                        {\n                            return self.format('ddd D MMM YYYY  H:m  a');\n                        }\n                }\n            }\n\n            /* jshint ignore:end */\n\n            if (inputString) {\n                return inputString.replace(formattingTokens, replaceFunction);\n            } else {\n                var _inputString = 'YYYY-MM-DD HH:mm:ss a';\n                return _inputString.replace(formattingTokens, replaceFunction);\n            }\n        }\n\n        /**\n         * @param key\n         * @param value\n         * @returns {PersianDate}\n         */\n\n    }, {\n        key: 'add',\n        value: function add(key, value) {\n            if (value === 0) {\n                return this;\n            }\n            var unit = normalizeDuration(key, value).unit,\n                arr = this.toArray();\n            value = normalizeDuration(key, value).value;\n            if (unit === 'year') {\n                var normalizedDate = arr[2],\n                    monthDays = this.daysInMonth(arr[0] + value, arr[1]);\n                if (arr[2] > monthDays) {\n                    normalizedDate = monthDays;\n                }\n                var tempDate = new PersianDateClass([arr[0] + value, arr[1], normalizedDate, arr[3], arr[4], arr[5], arr[6], arr[7]]);\n                return tempDate;\n            }\n            if (unit === 'month') {\n                var tempYear = Math.floor(value / 12);\n                var remainingMonth = value - tempYear * 12,\n                    calcedMonth = null;\n                if (arr[1] + remainingMonth > 12) {\n                    tempYear += 1;\n                    calcedMonth = arr[1] + remainingMonth - 12;\n                } else {\n                    calcedMonth = arr[1] + remainingMonth;\n                }\n                var normalizaedDate = arr[2],\n                    tempDateArray = new PersianDateClass([arr[0] + tempYear, calcedMonth, 1, arr[3], arr[4], arr[5], arr[6], arr[7]]).toArray(),\n                    _monthDays = this.daysInMonth(arr[0] + tempYear, calcedMonth);\n                if (arr[2] > _monthDays) {\n                    normalizaedDate = _monthDays;\n                }\n                return new PersianDateClass([tempDateArray[0], tempDateArray[1], normalizaedDate, tempDateArray[3], tempDateArray[4], tempDateArray[5], tempDateArray[6], tempDateArray[7]]);\n            }\n            if (unit === 'day') {\n                var calcedDay = new PersianDateClass(this.valueOf()).hour(12),\n                    newMillisecond = calcedDay.valueOf() + value * 86400000,\n                    newDate = new PersianDateClass(newMillisecond);\n                return newDate.hour(arr[3]);\n            }\n            if (unit === 'week') {\n                var _calcedDay = new PersianDateClass(this.valueOf()).hour(12),\n                    _newMillisecond = _calcedDay.valueOf() + 7 * value * 86400000,\n                    _newDate = new PersianDateClass(_newMillisecond);\n                return _newDate.hour(arr[3]);\n            }\n            if (unit === 'hour') {\n                var _newMillisecond2 = this.valueOf() + value * 3600000;\n                return this.unix(_newMillisecond2 / 1000);\n            }\n            if (unit === 'minute') {\n                var _newMillisecond3 = this.valueOf() + value * 60000;\n                return this.unix(_newMillisecond3 / 1000);\n            }\n            if (unit === 'second') {\n                var _newMillisecond4 = this.valueOf() + value * 1000;\n                return this.unix(_newMillisecond4 / 1000);\n            }\n            if (unit === 'millisecond') {\n                var _newMillisecond5 = this.valueOf() + value;\n                return this.unix(_newMillisecond5 / 1000);\n            }\n            return this._getSyncedClass(this.valueOf());\n        }\n\n        /**\n         * @param key\n         * @param value\n         * @returns {PersianDate}\n         */\n\n    }, {\n        key: 'subtract',\n        value: function subtract(key, value) {\n            return this.add(key, value * -1);\n        }\n\n        /**\n         * check if a date is same as b\n         * @param dateA\n         * @param dateB\n         * @since 1.0.0\n         * @return {boolean}\n         * @static\n         */\n\n    }, {\n        key: 'isSameDay',\n\n\n        /**\n         * @param dateB\n         * @since 1.0.0\n         * @return {PersianDateClass|*|boolean}\n         */\n        value: function isSameDay(dateB) {\n            return this && dateB && this.date() == dateB.date() && this.year() == dateB.year() && this.month() == dateB.month();\n        }\n\n        /**\n         * @desc check if a month is same as b\n         * @param {Date} dateA\n         * @param {Date} dateB\n         * @return {boolean}\n         * @since 1.0.0\n         * @static\n         */\n\n    }, {\n        key: 'isSameMonth',\n\n\n        /**\n         * @desc check two for month similarity\n         * @param dateA\n         * @param dateB\n         * @since 1.0.0\n         * @return {*|boolean}\n         */\n        value: function isSameMonth(dateB) {\n            return this && dateB && this.year() == this.year() && this.month() == dateB.month();\n        }\n    }], [{\n        key: 'rangeName',\n        value: function rangeName() {\n            var p = PersianDateClass,\n                t = p.calendarType;\n            if (p.localType === 'fa') {\n                if (t === 'persian') {\n                    return fa.persian;\n                } else {\n                    return fa.gregorian;\n                }\n            } else {\n                if (t === 'persian') {\n                    return en.persian;\n                } else {\n                    return en.gregorian;\n                }\n            }\n        }\n    }, {\n        key: 'toLeapYearMode',\n        value: function toLeapYearMode(input) {\n            var d = PersianDateClass;\n            d.leapYearMode = input;\n            return d;\n        }\n    }, {\n        key: 'toCalendar',\n        value: function toCalendar(input) {\n            var d = PersianDateClass;\n            d.calendarType = input;\n            return d;\n        }\n\n        /**\n         * @since 1.0.0\n         * @static\n         * @param input\n         * @return {PersianDateClass}\n         */\n\n    }, {\n        key: 'toLocale',\n        value: function toLocale(input) {\n            var d = PersianDateClass;\n            d.localType = input;\n            if (d.localType !== 'fa') {\n                d.formatPersian = false;\n            } else {\n                d.formatPersian = '_default';\n            }\n            return d;\n        }\n    }, {\n        key: 'isPersianDate',\n        value: function isPersianDate(obj) {\n            return obj instanceof PersianDateClass;\n        }\n    }, {\n        key: 'duration',\n        value: function duration(input, key) {\n            return new Duration(input, key);\n        }\n    }, {\n        key: 'isDuration',\n        value: function isDuration(obj) {\n            return obj instanceof Duration;\n        }\n    }, {\n        key: 'unix',\n        value: function unix(timestamp) {\n            if (timestamp) {\n                return new PersianDateClass(timestamp * 1000);\n            } else {\n                return new PersianDateClass().unix();\n            }\n        }\n    }, {\n        key: 'getFirstWeekDayOfMonth',\n        value: function getFirstWeekDayOfMonth(year, month) {\n            return new PersianDateClass([year, month, 1]).day();\n        }\n    }, {\n        key: 'utc',\n        value: function utc(input) {\n            if (input) {\n                return new PersianDateClass(input).utc();\n            } else {\n                return new PersianDateClass().utc();\n            }\n        }\n    }, {\n        key: 'isSameDay',\n        value: function isSameDay(dateA, dateB) {\n            return dateA && dateB && dateA.date() == dateB.date() && dateA.year() == dateB.year() && dateA.month() == dateB.month();\n        }\n    }, {\n        key: 'isSameMonth',\n        value: function isSameMonth(dateA, dateB) {\n            return dateA && dateB && dateA.year() == dateB.year() && dateA.month() == dateB.month();\n        }\n    }]);\n\n    return PersianDateClass;\n}();\n\n/**\n * @type {PersianDateClass}\n */\n\n\nmodule.exports = PersianDateClass;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Start algorithm class\nvar ASTRO = __webpack_require__(3);\nvar State = __webpack_require__(9);\n\nvar Algorithms = function () {\n    function Algorithms(parent) {\n        _classCallCheck(this, Algorithms);\n\n        this.parent = parent;\n        this.ASTRO = new ASTRO();\n        this.State = new State();\n        /*  You may notice that a variety of array variables logically local\n         to functions are declared globally here.  In JavaScript, construction\n         of an array variable from source code occurs as the code is\n         interpreted.  Making these variables pseudo-globals permits us\n         to avoid overhead constructing and disposing of them in each\n         call on the function in which whey are used.  */\n        // TODO this block didnt used in main agorithm\n        this.J0000 = 1721424.5; // Julian date of Gregorian epoch: 0000-01-01\n        this.J1970 = 2440587.5; // Julian date at Unix epoch: 1970-01-01\n        this.JMJD = 2400000.5; // Epoch of Modified Julian Date system\n        this.NormLeap = [false /*\"Normal year\"*/, true /*\"Leap year\"*/];\n        // TODO END\n        this.GREGORIAN_EPOCH = 1721425.5;\n        this.PERSIAN_EPOCH = 1948320.5;\n    }\n\n    /**\n     * @desc LEAP_GREGORIAN  --  Is a given year in the Gregorian calendar a leap year ?\n     * @param year\n     * @return {boolean}\n     */\n\n\n    _createClass(Algorithms, [{\n        key: 'leap_gregorian',\n        value: function leap_gregorian(year) {\n            return year % 4 === 0 && !(year % 100 === 0 && year % 400 !== 0);\n        }\n\n        /**\n         * @desc Determine Julian day number from Gregorian calendar date\n         * @param {*} year\n         * @param {*} month\n         * @param {*} day\n         */\n\n    }, {\n        key: 'gregorian_to_jd',\n        value: function gregorian_to_jd(year, month, day) {\n            return this.GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) + -Math.floor((year - 1) / 100) + Math.floor((year - 1) / 400) + Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : this.leap_gregorian(year) ? -1 : -2) + day);\n        }\n\n        /**\n         * @desc Calculate Gregorian calendar date from Julian day\n         * @param {*} jd\n         */\n\n    }, {\n        key: 'jd_to_gregorian',\n        value: function jd_to_gregorian(jd) {\n            var wjd = void 0,\n                depoch = void 0,\n                quadricent = void 0,\n                dqc = void 0,\n                cent = void 0,\n                dcent = void 0,\n                quad = void 0,\n                dquad = void 0,\n                yindex = void 0,\n                year = void 0,\n                yearday = void 0,\n                leapadj = void 0,\n                month = void 0,\n                day = void 0;\n\n            wjd = Math.floor(jd - 0.5) + 0.5;\n            depoch = wjd - this.GREGORIAN_EPOCH;\n            quadricent = Math.floor(depoch / 146097);\n            dqc = this.ASTRO.mod(depoch, 146097);\n            cent = Math.floor(dqc / 36524);\n            dcent = this.ASTRO.mod(dqc, 36524);\n            quad = Math.floor(dcent / 1461);\n            dquad = this.ASTRO.mod(dcent, 1461);\n            yindex = Math.floor(dquad / 365);\n            year = quadricent * 400 + cent * 100 + quad * 4 + yindex;\n            if (!(cent === 4 || yindex === 4)) {\n                year++;\n            }\n            yearday = wjd - this.gregorian_to_jd(year, 1, 1);\n            leapadj = wjd < this.gregorian_to_jd(year, 3, 1) ? 0 : this.leap_gregorian(year) ? 1 : 2;\n            month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\n            day = wjd - this.gregorian_to_jd(year, month, 1) + 1;\n\n            return [year, month, day];\n        }\n\n        /**\n         * @param {*} year\n         */\n        //    leap_julian (year) {\n        //        return this.ASTRO.mod(year, 4) === ((year > 0) ? 0 : 3);\n        //    }\n\n\n        /**\n         * @desc Calculate Julian calendar date from Julian day\n         * @param {*} td\n         */\n        //    jd_to_julian (td) {\n        //        let z, a, b, c, d, e, year, month, day;\n        //\n        //        td += 0.5;\n        //        z = Math.floor(td);\n        //\n        //        a = z;\n        //        b = a + 1524;\n        //        c = Math.floor((b - 122.1) / 365.25);\n        //        d = Math.floor(365.25 * c);\n        //        e = Math.floor((b - d) / 30.6001);\n        //\n        //        month = Math.floor((e < 14) ? (e - 1) : (e - 13));\n        //        year = Math.floor((month > 2) ? (c - 4716) : (c - 4715));\n        //        day = b - d - Math.floor(30.6001 * e);\n        //\n        //        /*  If year is less than 1, subtract one to convert from\n        //         a zero based date system to the common era system in\n        //         which the year -1 (1 B.C.E) is followed by year 1 (1 C.E.).  */\n        //\n        //        if (year < 1) {\n        //            year--;\n        //        }\n        //\n        //        return [year, month, day];\n        //    }\n\n\n        /**\n         * @desc TEHRAN_EQUINOX  --  Determine Julian day and fraction of the\n         March equinox at the Tehran meridian in\n         a given Gregorian year.\n         * @param {*} year\n         */\n\n    }, {\n        key: 'tehran_equinox',\n        value: function tehran_equinox(year) {\n            var equJED = void 0,\n                equJD = void 0,\n                equAPP = void 0,\n                equTehran = void 0,\n                dtTehran = void 0;\n\n            //  March equinox in dynamical time\n            equJED = this.ASTRO.equinox(year, 0);\n\n            //  Correct for delta T to obtain Universal time\n            equJD = equJED - this.ASTRO.deltat(year) / (24 * 60 * 60);\n\n            //  Apply the equation of time to yield the apparent time at Greenwich\n            equAPP = equJD + this.ASTRO.equationOfTime(equJED);\n\n            /*  Finally, we must correct for the constant difference between\n             the Greenwich meridian andthe time zone standard for\n             Iran Standard time, 52°30' to the East.  */\n\n            dtTehran = (52 + 30 / 60.0 + 0 / (60.0 * 60.0)) / 360;\n            equTehran = equAPP + dtTehran;\n\n            return equTehran;\n        }\n\n        /**\n         * @desc TEHRAN_EQUINOX_JD  --  Calculate Julian day during which the\n         March equinox, reckoned from the Tehran\n         meridian, occurred for a given Gregorian\n         year.\n         * @param {*} year\n         */\n\n    }, {\n        key: 'tehran_equinox_jd',\n        value: function tehran_equinox_jd(year) {\n            var ep = void 0,\n                epg = void 0;\n\n            ep = this.tehran_equinox(year);\n            epg = Math.floor(ep);\n\n            return epg;\n        }\n\n        /**\n         * @desc  PERSIANA_YEAR  --  Determine the year in the Persian\n         astronomical calendar in which a\n         given Julian day falls.  Returns an\n         array of two elements:\n          [0]  Persian year\n         [1]  Julian day number containing\n         equinox for this year.\n         * @param {*} jd\n         */\n\n    }, {\n        key: 'persiana_year',\n        value: function persiana_year(jd) {\n            var guess = this.jd_to_gregorian(jd)[0] - 2,\n                lasteq = void 0,\n                nexteq = void 0,\n                adr = void 0;\n\n            lasteq = this.tehran_equinox_jd(guess);\n            while (lasteq > jd) {\n                guess--;\n                lasteq = this.tehran_equinox_jd(guess);\n            }\n            nexteq = lasteq - 1;\n            while (!(lasteq <= jd && jd < nexteq)) {\n                lasteq = nexteq;\n                guess++;\n                nexteq = this.tehran_equinox_jd(guess);\n            }\n            adr = Math.round((lasteq - this.PERSIAN_EPOCH) / this.ASTRO.TropicalYear) + 1;\n\n            return [adr, lasteq];\n        }\n\n        /**\n         * @desc Calculate date in the Persian astronomical\n         calendar from Julian day.\n         * @param {*} jd\n         */\n\n    }, {\n        key: 'jd_to_persiana',\n        value: function jd_to_persiana(jd) {\n            var year = void 0,\n                month = void 0,\n                day = void 0,\n                adr = void 0,\n                equinox = void 0,\n                yday = void 0;\n\n            jd = Math.floor(jd) + 0.5;\n            adr = this.persiana_year(jd);\n            year = adr[0];\n            equinox = adr[1];\n            day = Math.floor((jd - equinox) / 30) + 1;\n\n            yday = Math.floor(jd) - this.persiana_to_jd(year, 1, 1) + 1;\n            month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);\n            day = Math.floor(jd) - this.persiana_to_jd(year, month, 1) + 1;\n\n            return [year, month, day];\n        }\n\n        /**\n         * @desc Obtain Julian day from a given Persian\n         astronomical calendar date.\n         * @param {*} year\n         * @param {*} month\n         * @param {*} day\n         */\n\n    }, {\n        key: 'persiana_to_jd',\n        value: function persiana_to_jd(year, month, day) {\n            var adr = void 0,\n                equinox = void 0,\n                guess = void 0,\n                jd = void 0;\n\n            guess = this.PERSIAN_EPOCH - 1 + this.ASTRO.TropicalYear * (year - 1 - 1);\n            adr = [year - 1, 0];\n\n            while (adr[0] < year) {\n                adr = this.persiana_year(guess);\n                guess = adr[1] + (this.ASTRO.TropicalYear + 2);\n            }\n            equinox = adr[1];\n\n            jd = equinox + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + (day - 1);\n            return jd;\n        }\n\n        /**\n         * @desc Is a given year a leap year in the Persian astronomical calendar ?\n         * @param {*} year\n         */\n\n    }, {\n        key: 'leap_persiana',\n        value: function leap_persiana(year) {\n            return this.persiana_to_jd(year + 1, 1, 1) - this.persiana_to_jd(year, 1, 1) > 365;\n        }\n\n        /**\n         * @desc Is a given year a leap year in the Persian calendar ?\n         * also nasa use this algorithm https://eclipse.gsfc.nasa.gov/SKYCAL/algorithm.js search for 'getLastDayOfPersianMonth' and you can find it\n         * @param {*} year\n         *\n         */\n\n    }, {\n        key: 'leap_persian',\n        value: function leap_persian(year) {\n            return ((year - (year > 0 ? 474 : 473)) % 2820 + 474 + 38) * 682 % 2816 < 682;\n        }\n\n        /**\n         * @desc Determine Julian day from Persian date\n         * @param {*} year\n         * @param {*} month\n         * @param {*} day\n         */\n\n    }, {\n        key: 'persian_to_jd',\n        value: function persian_to_jd(year, month, day) {\n            var epbase = void 0,\n                epyear = void 0;\n\n            epbase = year - (year >= 0 ? 474 : 473);\n            epyear = 474 + this.ASTRO.mod(epbase, 2820);\n\n            return day + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + Math.floor((epyear * 682 - 110) / 2816) + (epyear - 1) * 365 + Math.floor(epbase / 2820) * 1029983 + (this.PERSIAN_EPOCH - 1);\n        }\n\n        /**\n         * @desc Calculate Persian date from Julian day\n         * @param {*} jd\n         */\n\n    }, {\n        key: 'jd_to_persian',\n        value: function jd_to_persian(jd) {\n            var year = void 0,\n                month = void 0,\n                day = void 0,\n                depoch = void 0,\n                cycle = void 0,\n                cyear = void 0,\n                ycycle = void 0,\n                aux1 = void 0,\n                aux2 = void 0,\n                yday = void 0;\n\n            jd = Math.floor(jd) + 0.5;\n\n            depoch = jd - this.persian_to_jd(475, 1, 1);\n            cycle = Math.floor(depoch / 1029983);\n            cyear = this.ASTRO.mod(depoch, 1029983);\n            if (cyear === 1029982) {\n                ycycle = 2820;\n            } else {\n                aux1 = Math.floor(cyear / 366);\n                aux2 = this.ASTRO.mod(cyear, 366);\n                ycycle = Math.floor((2134 * aux1 + 2816 * aux2 + 2815) / 1028522) + aux1 + 1;\n            }\n            year = ycycle + 2820 * cycle + 474;\n            if (year <= 0) {\n                year--;\n            }\n            yday = jd - this.persian_to_jd(year, 1, 1) + 1;\n            month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);\n            day = jd - this.persian_to_jd(year, month, 1) + 1;\n            return [year, month, day];\n        }\n\n        /**\n         *\n         * @param {*} weekday\n         */\n\n    }, {\n        key: 'gWeekDayToPersian',\n        value: function gWeekDayToPersian(weekday) {\n            if (weekday + 2 === 8) {\n                return 1;\n            } else if (weekday + 2 === 7) {\n                return 7;\n            } else {\n                return weekday + 2;\n            }\n        }\n\n        /**\n         * @desc updateFromGregorian  --  Update all calendars from Gregorian.\n         \"Why not Julian date?\" you ask.  Because\n         starting from Gregorian guarantees we're\n         already snapped to an integral second, so\n         we don't get roundoff errors in other\n         calendars.\n         */\n\n    }, {\n        key: 'updateFromGregorian',\n        value: function updateFromGregorian() {\n            var j = void 0,\n                year = void 0,\n                mon = void 0,\n                mday = void 0,\n                hour = void 0,\n                min = void 0,\n                sec = void 0,\n                weekday = void 0,\n                utime = void 0,\n                perscal = void 0;\n\n            year = this.State.gregorian.year;\n            mon = this.State.gregorian.month;\n            mday = this.State.gregorian.day;\n            hour = 0; //this.State.gregorian.hour;\n            min = 0; //this.State.gregorian.minute;\n            sec = 0; //this.State.gregorian.second;\n\n            this.State.gDate = new Date(year, mon, mday, this.State.gregorian.hour, this.State.gregorian.minute, this.State.gregorian.second, this.State.gregorian.millisecond);\n\n            if (this.parent._utcMode === false) {\n                this.State.zone = this.State.gDate.getTimezoneOffset();\n            }\n\n            // Added for this algorithms cant parse 2016,13,32 successfully\n            this.State.gregorian.year = this.State.gDate.getFullYear();\n            this.State.gregorian.month = this.State.gDate.getMonth();\n            this.State.gregorian.day = this.State.gDate.getDate();\n\n            //  Update Julian day\n            // ---------------------------------------------------------------------------\n            j = this.gregorian_to_jd(year, mon + 1, mday) + Math.floor(sec + 60 * (min + 60 * hour) + 0.5) / 86400.0;\n\n            this.State.julianday = j;\n            this.State.modifiedjulianday = j - this.JMJD;\n\n            //  Update day of week in Gregorian box\n            // ---------------------------------------------------------------------------\n            weekday = this.ASTRO.jwday(j);\n            // Move to 1 indexed number\n            this.State.gregorian.weekday = weekday + 1;\n\n            //  Update leap year status in Gregorian box\n            // ---------------------------------------------------------------------------\n            this.State.gregorian.leap = this.NormLeap[this.leap_gregorian(year) ? 1 : 0];\n\n            //  Update Julian Calendar\n            // ---------------------------------------------------------------------------\n            //        julcal = this.jd_to_julian(j);\n            //\n            //        this.State.juliancalendar.year = julcal[0];\n            //        this.State.juliancalendar.month = julcal[1] - 1;\n            //        this.State.juliancalendar.day = julcal[2];\n            //        this.State.juliancalendar.leap = this.NormLeap[this.leap_julian(julcal[0]) ? 1 : 0];\n            weekday = this.ASTRO.jwday(j);\n            //        this.State.juliancalendar.weekday = weekday;\n\n            //  Update Persian Calendar\n            // ---------------------------------------------------------------------------\n            if (this.parent.calendarType == 'persian' && this.parent.leapYearMode == 'algorithmic') {\n                perscal = this.jd_to_persian(j);\n                this.State.persian.year = perscal[0];\n                this.State.persian.month = perscal[1] - 1;\n                this.State.persian.day = perscal[2];\n                this.State.persian.weekday = this.gWeekDayToPersian(weekday);\n                this.State.persian.leap = this.NormLeap[this.leap_persian(perscal[0]) ? 1 : 0];\n            }\n\n            //  Update Persian Astronomical Calendar\n            // ---------------------------------------------------------------------------\n            if (this.parent.calendarType == 'persian' && this.parent.leapYearMode == 'astronomical') {\n                perscal = this.jd_to_persiana(j);\n                this.State.persianAstro.year = perscal[0];\n                this.State.persianAstro.month = perscal[1] - 1;\n                this.State.persianAstro.day = perscal[2];\n                this.State.persianAstro.weekday = this.gWeekDayToPersian(weekday);\n                this.State.persianAstro.leap = this.NormLeap[this.leap_persiana(perscal[0]) ? 1 : 0];\n            }\n            //  Update Gregorian serial number\n            // ---------------------------------------------------------------------------\n            if (this.State.gregserial.day !== null) {\n                this.State.gregserial.day = j - this.J0000;\n            }\n\n            //  Update Unix time()\n            // ---------------------------------------------------------------------------\n            utime = (j - this.J1970) * (60 * 60 * 24 * 1000);\n\n            this.State.unixtime = Math.round(utime / 1000);\n        }\n\n        /**\n         * @desc Perform calculation starting with a Gregorian date\n         * @param {*} dateArray\n         */\n\n    }, {\n        key: 'calcGregorian',\n        value: function calcGregorian(dateArray) {\n            if (dateArray[0] || dateArray[0] === 0) {\n                this.State.gregorian.year = dateArray[0];\n            }\n            if (dateArray[1] || dateArray[1] === 0) {\n                this.State.gregorian.month = dateArray[1];\n            }\n            if (dateArray[2] || dateArray[2] === 0) {\n                this.State.gregorian.day = dateArray[2];\n            }\n            if (dateArray[3] || dateArray[3] === 0) {\n                this.State.gregorian.hour = dateArray[3];\n            }\n            if (dateArray[4] || dateArray[4] === 0) {\n                this.State.gregorian.minute = dateArray[4];\n            }\n            if (dateArray[5] || dateArray[5] === 0) {\n                this.State.gregorian.second = dateArray[5];\n            }\n            if (dateArray[6] || dateArray[6] === 0) {\n                this.State.gregorian.millisecond = dateArray[6];\n            }\n            this.updateFromGregorian();\n        }\n\n        /**\n         * @desc Perform calculation starting with a Julian date\n         */\n\n    }, {\n        key: 'calcJulian',\n        value: function calcJulian() {\n            var j = void 0,\n                date = void 0;\n            j = this.State.julianday;\n            date = this.jd_to_gregorian(j);\n            this.State.gregorian.year = date[0];\n            this.State.gregorian.month = date[1] - 1;\n            this.State.gregorian.day = date[2];\n            //        this.State.gregorian.hour = this.pad(time[0], 2, \" \");\n            //        this.State.gregorian.minute = this.pad(time[1], 2, \"0\");\n            //        this.State.gregorian.second = this.pad(time[2], 2, \"0\");\n            this.updateFromGregorian();\n        }\n\n        /**\n         * @desc Set Julian date and update all calendars\n         * @param {*} j\n         */\n\n    }, {\n        key: 'setJulian',\n        value: function setJulian(j) {\n            this.State.julianday = j;\n            this.calcJulian();\n        }\n\n        /**\n         * @desc  Update from Persian calendar\n         * @param {*} dateArray\n         */\n\n    }, {\n        key: 'calcPersian',\n        value: function calcPersian(dateArray) {\n            if (dateArray[0] || dateArray[0] === 0) {\n                this.State.persian.year = dateArray[0];\n            }\n            if (dateArray[1] || dateArray[1] === 0) {\n                this.State.persian.month = dateArray[1];\n            }\n            if (dateArray[2] || dateArray[2] === 0) {\n                this.State.persian.day = dateArray[2];\n            }\n            if (dateArray[3] || dateArray[3] === 0) {\n                this.State.gregorian.hour = dateArray[3];\n            }\n            if (dateArray[4] || dateArray[4] === 0) {\n                this.State.gregorian.minute = dateArray[4];\n            }\n            if (dateArray[5] || dateArray[5] === 0) {\n                this.State.gregorian.second = dateArray[5];\n            }\n            if (dateArray[6] || dateArray[6] === 0) {\n                this.State.gregorian.millisecond = dateArray[6];\n            }\n\n            this.setJulian(this.persian_to_jd(this.State.persian.year, this.State.persian.month, this.State.persian.day));\n        }\n\n        /**\n         * @desc Update from Persian astronomical calendar\n         * @param {*} dateArray\n         */\n\n    }, {\n        key: 'calcPersiana',\n        value: function calcPersiana(dateArray) {\n            if (dateArray[0] || dateArray[0] === 0) {\n                this.State.persianAstro.year = dateArray[0];\n            }\n            if (dateArray[1] || dateArray[1] === 0) {\n                this.State.persianAstro.month = dateArray[1];\n            }\n            if (dateArray[2] || dateArray[2] === 0) {\n                this.State.persianAstro.day = dateArray[2];\n            }\n\n            if (dateArray[3] || dateArray[3] === 0) {\n                this.State.gregorian.hour = dateArray[3];\n            }\n            if (dateArray[4] || dateArray[4] === 0) {\n                this.State.gregorian.minute = dateArray[4];\n            }\n            if (dateArray[5] || dateArray[5] === 0) {\n                this.State.gregorian.second = dateArray[5];\n            }\n            if (dateArray[6] || dateArray[6] === 0) {\n                this.State.gregorian.millisecond = dateArray[6];\n            }\n            this.setJulian(this.persiana_to_jd(this.State.persianAstro.year, this.State.persianAstro.month, this.State.persianAstro.day + 0.5));\n        }\n    }]);\n\n    return Algorithms;\n}();\n\nmodule.exports = Algorithms;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n JavaScript functions for positional astronomy\n by John Walker  --  September, MIM\n http://www.fourmilab.ch/\n This program is in the public domain.\n */\n\nvar ASTRO = function () {\n    function ASTRO() {\n        _classCallCheck(this, ASTRO);\n\n        //  Frequently-used constants\n        this.J2000 = 2451545.0; // Julian day of J2000 epoch\n        this.JulianCentury = 36525.0; // Days in Julian century\n        this.JulianMillennium = this.JulianCentury * 10; // Days in Julian millennium\n        //        this.AstronomicalUnit = 149597870.0;           // Astronomical unit in kilometres\n        this.TropicalYear = 365.24219878; // Mean solar tropical year\n\n        /*  OBLIQEQ  --  Calculate the obliquity of the ecliptic for a given\n         Julian date.  This uses Laskar's tenth-degree\n         polynomial fit (J. Laskar, Astronomy and\n         Astrophysics, Vol. 157, page 68 [1986]) which is\n         accurate to within 0.01 arc second between AD 1000\n         and AD 3000, and within a few seconds of arc for\n         +/-10000 years around AD 2000.  If we're outside the\n         range in which this fit is valid (deep time) we\n         simply return the J2000 value of the obliquity, which\n         happens to be almost precisely the mean.  */\n        this.oterms = [-4680.93, -1.55, 1999.25, -51.38, -249.67, -39.05, 7.12, 27.87, 5.79, 2.45];\n        /* Periodic terms for nutation in longiude (delta \\Psi) and\n         obliquity (delta \\Epsilon) as given in table 21.A of\n         Meeus, \"Astronomical Algorithms\", first edition. */\n        this.nutArgMult = [0, 0, 0, 0, 1, -2, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, -2, 1, 0, 2, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 2, -2, -1, 0, 2, 2, -2, 0, 1, 0, 0, -2, 0, 0, 2, 1, 0, 0, -1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, -1, 2, 2, 0, 0, -1, 0, 1, 0, 0, 1, 2, 1, -2, 0, 2, 0, 0, 0, 0, -2, 2, 1, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, -2, 0, 1, 2, 2, 0, 0, 0, 2, 0, -2, 0, 0, 2, 0, 0, 0, -1, 2, 1, 0, 2, 0, 0, 0, 2, 0, -1, 0, 1, -2, 2, 0, 2, 2, 0, 1, 0, 0, 1, -2, 0, 1, 0, 1, 0, -1, 0, 0, 1, 0, 0, 2, -2, 0, 2, 0, -1, 2, 1, 2, 0, 1, 2, 2, 0, 1, 0, 2, 2, -2, 1, 1, 0, 0, 0, -1, 0, 2, 2, 2, 0, 0, 2, 1, 2, 0, 1, 0, 0, -2, 0, 2, 2, 2, -2, 0, 1, 2, 1, 2, 0, -2, 0, 1, 2, 0, 0, 0, 1, 0, -1, 1, 0, 0, -2, -1, 0, 2, 1, -2, 0, 0, 0, 1, 0, 0, 2, 2, 1, -2, 0, 2, 0, 1, -2, 1, 0, 2, 1, 0, 0, 1, -2, 0, -1, 0, 1, 0, 0, -2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, -1, -1, 1, 0, 0, 0, 1, 1, 0, 0, 0, -1, 1, 2, 2, 2, -1, -1, 2, 2, 0, 0, -2, 2, 2, 0, 0, 3, 2, 2, 2, -1, 0, 2, 2];\n\n        this.nutArgCoeff = [-171996, -1742, 92095, 89, /*  0,  0,  0,  0,  1 */\n        -13187, -16, 5736, -31, /* -2,  0,  0,  2,  2 */\n        -2274, -2, 977, -5, /*  0,  0,  0,  2,  2 */\n        2062, 2, -895, 5, /*  0,  0,  0,  0,  2 */\n        1426, -34, 54, -1, /*  0,  1,  0,  0,  0 */\n        712, 1, -7, 0, /*  0,  0,  1,  0,  0 */\n        -517, 12, 224, -6, /* -2,  1,  0,  2,  2 */\n        -386, -4, 200, 0, /*  0,  0,  0,  2,  1 */\n        -301, 0, 129, -1, /*  0,  0,  1,  2,  2 */\n        217, -5, -95, 3, /* -2, -1,  0,  2,  2 */\n        -158, 0, 0, 0, /* -2,  0,  1,  0,  0 */\n        129, 1, -70, 0, /* -2,  0,  0,  2,  1 */\n        123, 0, -53, 0, /*  0,  0, -1,  2,  2 */\n        63, 0, 0, 0, /*  2,  0,  0,  0,  0 */\n        63, 1, -33, 0, /*  0,  0,  1,  0,  1 */\n        -59, 0, 26, 0, /*  2,  0, -1,  2,  2 */\n        -58, -1, 32, 0, /*  0,  0, -1,  0,  1 */\n        -51, 0, 27, 0, /*  0,  0,  1,  2,  1 */\n        48, 0, 0, 0, /* -2,  0,  2,  0,  0 */\n        46, 0, -24, 0, /*  0,  0, -2,  2,  1 */\n        -38, 0, 16, 0, /*  2,  0,  0,  2,  2 */\n        -31, 0, 13, 0, /*  0,  0,  2,  2,  2 */\n        29, 0, 0, 0, /*  0,  0,  2,  0,  0 */\n        29, 0, -12, 0, /* -2,  0,  1,  2,  2 */\n        26, 0, 0, 0, /*  0,  0,  0,  2,  0 */\n        -22, 0, 0, 0, /* -2,  0,  0,  2,  0 */\n        21, 0, -10, 0, /*  0,  0, -1,  2,  1 */\n        17, -1, 0, 0, /*  0,  2,  0,  0,  0 */\n        16, 0, -8, 0, /*  2,  0, -1,  0,  1 */\n        -16, 1, 7, 0, /* -2,  2,  0,  2,  2 */\n        -15, 0, 9, 0, /*  0,  1,  0,  0,  1 */\n        -13, 0, 7, 0, /* -2,  0,  1,  0,  1 */\n        -12, 0, 6, 0, /*  0, -1,  0,  0,  1 */\n        11, 0, 0, 0, /*  0,  0,  2, -2,  0 */\n        -10, 0, 5, 0, /*  2,  0, -1,  2,  1 */\n        -8, 0, 3, 0, /*  2,  0,  1,  2,  2 */\n        7, 0, -3, 0, /*  0,  1,  0,  2,  2 */\n        -7, 0, 0, 0, /* -2,  1,  1,  0,  0 */\n        -7, 0, 3, 0, /*  0, -1,  0,  2,  2 */\n        -7, 0, 3, 0, /*  2,  0,  0,  2,  1 */\n        6, 0, 0, 0, /*  2,  0,  1,  0,  0 */\n        6, 0, -3, 0, /* -2,  0,  2,  2,  2 */\n        6, 0, -3, 0, /* -2,  0,  1,  2,  1 */\n        -6, 0, 3, 0, /*  2,  0, -2,  0,  1 */\n        -6, 0, 3, 0, /*  2,  0,  0,  0,  1 */\n        5, 0, 0, 0, /*  0, -1,  1,  0,  0 */\n        -5, 0, 3, 0, /* -2, -1,  0,  2,  1 */\n        -5, 0, 3, 0, /* -2,  0,  0,  0,  1 */\n        -5, 0, 3, 0, /*  0,  0,  2,  2,  1 */\n        4, 0, 0, 0, /* -2,  0,  2,  0,  1 */\n        4, 0, 0, 0, /* -2,  1,  0,  2,  1 */\n        4, 0, 0, 0, /*  0,  0,  1, -2,  0 */\n        -4, 0, 0, 0, /* -1,  0,  1,  0,  0 */\n        -4, 0, 0, 0, /* -2,  1,  0,  0,  0 */\n        -4, 0, 0, 0, /*  1,  0,  0,  0,  0 */\n        3, 0, 0, 0, /*  0,  0,  1,  2,  0 */\n        -3, 0, 0, 0, /* -1, -1,  1,  0,  0 */\n        -3, 0, 0, 0, /*  0,  1,  1,  0,  0 */\n        -3, 0, 0, 0, /*  0, -1,  1,  2,  2 */\n        -3, 0, 0, 0, /*  2, -1, -1,  2,  2 */\n        -3, 0, 0, 0, /*  0,  0, -2,  2,  2 */\n        -3, 0, 0, 0, /*  0,  0,  3,  2,  2 */\n        -3, 0, 0, 0 /*  2, -1,  0,  2,  2 */\n        ];\n\n        /**\n         * @desc Table of observed Delta T values at the beginning of even numbered years from 1620 through 2002.\n         * @type Array\n         */\n        this.deltaTtab = [121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46, 44, 42, 40, 38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12, 11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7, 1.4, -1.2, -2.8, -3.8, -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6, -6.3, -6.5, -6.2, -4.7, -2.8, -0.1, 2.6, 5.3, 7.7, 10.4, 13.3, 16, 18.2, 20.2, 21.1, 22.4, 23.5, 23.8, 24.3, 24, 23.9, 23.9, 23.7, 24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4, 32.2, 33.1, 34, 35, 36.5, 38.3, 40.2, 42.2, 44.5, 46.5, 48.5, 50.5, 52.2, 53.8, 54.9, 55.8, 56.9, 58.3, 60, 61.6, 63, 65, 66.6];\n\n        /*  EQUINOX  --  Determine the Julian Ephemeris Day of an\n         equinox or solstice.  The \"which\" argument\n         selects the item to be computed:\n          0   March equinox\n         1   June solstice\n         2   September equinox\n         3   December solstice\n          */\n        /**\n         * @desc Periodic terms to obtain true time\n         * @type Array\n         */\n        this.EquinoxpTerms = [485, 324.96, 1934.136, 203, 337.23, 32964.467, 199, 342.08, 20.186, 182, 27.85, 445267.112, 156, 73.14, 45036.886, 136, 171.52, 22518.443, 77, 222.54, 65928.934, 74, 296.72, 3034.906, 70, 243.58, 9037.513, 58, 119.81, 33718.147, 52, 297.17, 150.678, 50, 21.02, 2281.226, 45, 247.54, 29929.562, 44, 325.15, 31555.956, 29, 60.93, 4443.417, 18, 155.12, 67555.328, 17, 288.79, 4562.452, 16, 198.04, 62894.029, 14, 199.76, 31436.921, 12, 95.39, 14577.848, 12, 287.11, 31931.756, 12, 320.81, 34777.259, 9, 227.73, 1222.114, 8, 15.45, 16859.074];\n\n        this.JDE0tab1000 = [new Array(1721139.29189, 365242.13740, 0.06134, 0.00111, -0.00071), new Array(1721233.25401, 365241.72562, -0.05323, 0.00907, 0.00025), new Array(1721325.70455, 365242.49558, -0.11677, -0.00297, 0.00074), new Array(1721414.39987, 365242.88257, -0.00769, -0.00933, -0.00006)];\n\n        this.JDE0tab2000 = [new Array(2451623.80984, 365242.37404, 0.05169, -0.00411, -0.00057), new Array(2451716.56767, 365241.62603, 0.00325, 0.00888, -0.00030), new Array(2451810.21715, 365242.01767, -0.11575, 0.00337, 0.00078), new Array(2451900.05952, 365242.74049, -0.06223, -0.00823, 0.00032)];\n    }\n\n    /**\n     *\n     * @param Degrees to radians.\n     * @return {number}\n     */\n\n\n    _createClass(ASTRO, [{\n        key: \"dtr\",\n        value: function dtr(d) {\n            return d * Math.PI / 180.0;\n        }\n\n        /**\n         * @desc Radians to degrees.\n         * @param r\n         * @return {number}\n         */\n\n    }, {\n        key: \"rtd\",\n        value: function rtd(r) {\n            return r * 180.0 / Math.PI;\n        }\n\n        /**\n         * @desc Range reduce angle in degrees.\n         * @param a\n         * @return {number}\n         */\n\n    }, {\n        key: \"fixangle\",\n        value: function fixangle(a) {\n            return a - 360.0 * Math.floor(a / 360.0);\n        }\n\n        /**\n         * @desc Range reduce angle in radians.\n         * @param a\n         * @return {number}\n         */\n\n    }, {\n        key: \"fixangr\",\n        value: function fixangr(a) {\n            return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI));\n        }\n\n        /**\n         * @desc  Sine of an angle in degrees\n         * @param d\n         * @return {number}\n         */\n\n    }, {\n        key: \"dsin\",\n        value: function dsin(d) {\n            return Math.sin(this.dtr(d));\n        }\n\n        /**\n         * @desc Cosine of an angle in degrees\n         * @param d\n         * @return {number}\n         */\n\n    }, {\n        key: \"dcos\",\n        value: function dcos(d) {\n            return Math.cos(this.dtr(d));\n        }\n\n        /**\n         * @desc Modulus function which works for non-integers.\n         * @param a\n         * @param b\n         * @return {number}\n         */\n\n    }, {\n        key: \"mod\",\n        value: function mod(a, b) {\n            return a - b * Math.floor(a / b);\n        }\n\n        /**\n         *\n         * @param j\n         * @return {number}\n         */\n\n    }, {\n        key: \"jwday\",\n        value: function jwday(j) {\n            return this.mod(Math.floor(j + 1.5), 7);\n        }\n\n        /**\n         *\n         * @param jd\n         * @return {number|*}\n         */\n\n    }, {\n        key: \"obliqeq\",\n        value: function obliqeq(jd) {\n            var eps, u, v, i;\n            v = u = (jd - this.J2000) / (this.JulianCentury * 100);\n            eps = 23 + 26 / 60.0 + 21.448 / 3600.0;\n\n            if (Math.abs(u) < 1.0) {\n                for (i = 0; i < 10; i++) {\n                    eps += this.oterms[i] / 3600.0 * v;\n                    v *= u;\n                }\n            }\n            return eps;\n        }\n\n        /**\n         * @desc  Calculate the nutation in longitude, deltaPsi, and\n         obliquity, deltaEpsilon for a given Julian date\n         jd.  Results are returned as a two element Array\n         giving (deltaPsi, deltaEpsilon) in degrees.\n         * @param jd\n         * @return Object\n         */\n\n    }, {\n        key: \"nutation\",\n        value: function nutation(jd) {\n            var deltaPsi,\n                deltaEpsilon,\n                i,\n                j,\n                t = (jd - 2451545.0) / 36525.0,\n                t2,\n                t3,\n                to10,\n                ta = [],\n                dp = 0,\n                de = 0,\n                ang;\n\n            t3 = t * (t2 = t * t);\n\n            /* Calculate angles.  The correspondence between the elements\n             of our array and the terms cited in Meeus are:\n              ta[0] = D  ta[0] = M  ta[2] = M'  ta[3] = F  ta[4] = \\Omega\n              */\n\n            ta[0] = this.dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);\n            ta[1] = this.dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);\n            ta[2] = this.dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);\n            ta[3] = this.dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);\n            ta[4] = this.dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);\n\n            /* Range reduce the angles in case the sine and cosine functions\n             don't do it as accurately or quickly. */\n\n            for (i = 0; i < 5; i++) {\n                ta[i] = this.fixangr(ta[i]);\n            }\n\n            to10 = t / 10.0;\n            for (i = 0; i < 63; i++) {\n                ang = 0;\n                for (j = 0; j < 5; j++) {\n                    if (this.nutArgMult[i * 5 + j] !== 0) {\n                        ang += this.nutArgMult[i * 5 + j] * ta[j];\n                    }\n                }\n                dp += (this.nutArgCoeff[i * 4 + 0] + this.nutArgCoeff[i * 4 + 1] * to10) * Math.sin(ang);\n                de += (this.nutArgCoeff[i * 4 + 2] + this.nutArgCoeff[i * 4 + 3] * to10) * Math.cos(ang);\n            }\n\n            /* Return the result, converting from ten thousandths of arc\n             seconds to radians in the process. */\n\n            deltaPsi = dp / (3600.0 * 10000.0);\n            deltaEpsilon = de / (3600.0 * 10000.0);\n\n            return [deltaPsi, deltaEpsilon];\n        }\n\n        /**\n         * @desc  Determine the difference, in seconds, between\n         Dynamical time and Universal time.\n         * @param year\n         * @return {*}\n         */\n\n    }, {\n        key: \"deltat\",\n        value: function deltat(year) {\n            var dt, f, i, t;\n\n            if (year >= 1620 && year <= 2000) {\n                i = Math.floor((year - 1620) / 2);\n                f = (year - 1620) / 2 - i;\n                /* Fractional part of year */\n                dt = this.deltaTtab[i] + (this.deltaTtab[i + 1] - this.deltaTtab[i]) * f;\n            } else {\n                t = (year - 2000) / 100;\n                if (year < 948) {\n                    dt = 2177 + 497 * t + 44.1 * t * t;\n                } else {\n                    dt = 102 + 102 * t + 25.3 * t * t;\n                    if (year > 2000 && year < 2100) {\n                        dt += 0.37 * (year - 2100);\n                    }\n                }\n            }\n            return dt;\n        }\n\n        /**\n         *\n         * @param year\n         * @param which\n         * @return {*}\n         */\n\n    }, {\n        key: \"equinox\",\n        value: function equinox(year, which) {\n            var deltaL = void 0,\n                i = void 0,\n                j = void 0,\n                JDE0 = void 0,\n                JDE = void 0,\n                JDE0tab = void 0,\n                S = void 0,\n                T = void 0,\n                W = void 0,\n                Y = void 0;\n            /*  Initialise terms for mean equinox and solstices.  We\n             have two sets: one for years prior to 1000 and a second\n             for subsequent years.  */\n\n            if (year < 1000) {\n                JDE0tab = this.JDE0tab1000;\n                Y = year / 1000;\n            } else {\n                JDE0tab = this.JDE0tab2000;\n                Y = (year - 2000) / 1000;\n            }\n\n            JDE0 = JDE0tab[which][0] + JDE0tab[which][1] * Y + JDE0tab[which][2] * Y * Y + JDE0tab[which][3] * Y * Y * Y + JDE0tab[which][4] * Y * Y * Y * Y;\n            T = (JDE0 - 2451545.0) / 36525;\n            W = 35999.373 * T - 2.47;\n            deltaL = 1 + 0.0334 * this.dcos(W) + 0.0007 * this.dcos(2 * W);\n            S = 0;\n            for (i = j = 0; i < 24; i++) {\n                S += this.EquinoxpTerms[j] * this.dcos(this.EquinoxpTerms[j + 1] + this.EquinoxpTerms[j + 2] * T);\n                j += 3;\n            }\n            JDE = JDE0 + S * 0.00001 / deltaL;\n            return JDE;\n        }\n\n        /**\n         * @desc  Position of the Sun.  Please see the comments\n         on the return statement at the end of this function\n         which describe the array it returns.  We return\n         intermediate values because they are useful in a\n         variety of other contexts.\n         * @param jd\n         * @return Object\n         */\n\n    }, {\n        key: \"sunpos\",\n        value: function sunpos(jd) {\n            var T = void 0,\n                T2 = void 0,\n                L0 = void 0,\n                M = void 0,\n                e = void 0,\n                C = void 0,\n                sunLong = void 0,\n                sunAnomaly = void 0,\n                sunR = void 0,\n                Omega = void 0,\n                Lambda = void 0,\n                epsilon = void 0,\n                epsilon0 = void 0,\n                Alpha = void 0,\n                Delta = void 0,\n                AlphaApp = void 0,\n                DeltaApp = void 0;\n\n            T = (jd - this.J2000) / this.JulianCentury;\n            T2 = T * T;\n            L0 = 280.46646 + 36000.76983 * T + 0.0003032 * T2;\n            L0 = this.fixangle(L0);\n            M = 357.52911 + 35999.05029 * T + -0.0001537 * T2;\n            M = this.fixangle(M);\n            e = 0.016708634 + -0.000042037 * T + -0.0000001267 * T2;\n            C = (1.914602 + -0.004817 * T + -0.000014 * T2) * this.dsin(M) + (0.019993 - 0.000101 * T) * this.dsin(2 * M) + 0.000289 * this.dsin(3 * M);\n            sunLong = L0 + C;\n            sunAnomaly = M + C;\n            sunR = 1.000001018 * (1 - e * e) / (1 + e * this.dcos(sunAnomaly));\n            Omega = 125.04 - 1934.136 * T;\n            Lambda = sunLong + -0.00569 + -0.00478 * this.dsin(Omega);\n            epsilon0 = this.obliqeq(jd);\n            epsilon = epsilon0 + 0.00256 * this.dcos(Omega);\n            Alpha = this.rtd(Math.atan2(this.dcos(epsilon0) * this.dsin(sunLong), this.dcos(sunLong)));\n            Alpha = this.fixangle(Alpha);\n            Delta = this.rtd(Math.asin(this.dsin(epsilon0) * this.dsin(sunLong)));\n            AlphaApp = this.rtd(Math.atan2(this.dcos(epsilon) * this.dsin(Lambda), this.dcos(Lambda)));\n            AlphaApp = this.fixangle(AlphaApp);\n            DeltaApp = this.rtd(Math.asin(this.dsin(epsilon) * this.dsin(Lambda)));\n\n            return [//  Angular quantities are expressed in decimal degrees\n            L0, //  [0] Geometric mean longitude of the Sun\n            M, //  [1] Mean anomaly of the Sun\n            e, //  [2] Eccentricity of the Earth's orbit\n            C, //  [3] Sun's equation of the Centre\n            sunLong, //  [4] Sun's true longitude\n            sunAnomaly, //  [5] Sun's true anomaly\n            sunR, //  [6] Sun's radius vector in AU\n            Lambda, //  [7] Sun's apparent longitude at true equinox of the date\n            Alpha, //  [8] Sun's true right ascension\n            Delta, //  [9] Sun's true declination\n            AlphaApp, // [10] Sun's apparent right ascension\n            DeltaApp // [11] Sun's apparent declination\n            ];\n        }\n\n        /**\n         * @desc Compute equation of time for a given moment. Returns the equation of time as a fraction of a day.\n         * @param jd\n         * @return {number|*}\n         */\n\n    }, {\n        key: \"equationOfTime\",\n        value: function equationOfTime(jd) {\n            var alpha = void 0,\n                deltaPsi = void 0,\n                E = void 0,\n                epsilon = void 0,\n                L0 = void 0,\n                tau = void 0;\n            tau = (jd - this.J2000) / this.JulianMillennium;\n            L0 = 280.4664567 + 360007.6982779 * tau + 0.03032028 * tau * tau + tau * tau * tau / 49931 + -(tau * tau * tau * tau / 15300) + -(tau * tau * tau * tau * tau / 2000000);\n            L0 = this.fixangle(L0);\n            alpha = this.sunpos(jd)[10];\n            deltaPsi = this.nutation(jd)[0];\n            epsilon = this.obliqeq(jd) + this.nutation(jd)[1];\n            E = L0 + -0.0057183 + -alpha + deltaPsi * this.dcos(epsilon);\n            E = E - 20.0 * Math.floor(E / 20.0);\n            E = E / (24 * 60);\n            return E;\n        }\n    }]);\n\n    return ASTRO;\n}();\n\nmodule.exports = ASTRO;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Constants\n * @module constants\n */\n\nmodule.exports = {\n    durationUnit: {\n        year: ['y', 'years', 'year'],\n        month: ['M', 'months', 'month'],\n        day: ['d', 'days', 'day'],\n        hour: ['h', 'hours', 'hour'],\n        minute: ['m', 'minutes', 'minute'],\n        second: ['s', 'second', 'seconds'],\n        millisecond: ['ms', 'milliseconds', 'millisecond'],\n        week: ['W', 'w', 'weeks', 'week']\n    }\n};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Helpers = __webpack_require__(0);\nvar normalizeDuration = new Helpers().normalizeDuration;\nvar absRound = new Helpers().absRound;\nvar absFloor = new Helpers().absFloor;\n/**\n * Duration object constructor\n * @param duration\n * @class Duration\n * @constructor\n */\n\nvar Duration = function () {\n    function Duration(key, value) {\n        _classCallCheck(this, Duration);\n\n        var duration = {},\n            data = this._data = {},\n            milliseconds = 0,\n            normalizedUnit = normalizeDuration(key, value),\n            unit = normalizedUnit.unit;\n        duration[unit] = normalizedUnit.value;\n        milliseconds = duration.milliseconds || duration.millisecond || duration.ms || 0;\n\n        var years = duration.years || duration.year || duration.y || 0,\n            months = duration.months || duration.month || duration.M || 0,\n            weeks = duration.weeks || duration.w || duration.week || 0,\n            days = duration.days || duration.d || duration.day || 0,\n            hours = duration.hours || duration.hour || duration.h || 0,\n            minutes = duration.minutes || duration.minute || duration.m || 0,\n            seconds = duration.seconds || duration.second || duration.s || 0;\n        // representation for dateAddRemove\n        this._milliseconds = milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 36e5;\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = days + weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = months + years * 12;\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n        seconds += absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n        minutes += absRound(seconds / 60);\n        data.minutes = minutes % 60;\n        hours += absRound(minutes / 60);\n        data.hours = hours % 24;\n        days += absRound(hours / 24);\n        days += weeks * 7;\n        data.days = days % 30;\n        months += absRound(days / 30);\n        data.months = months % 12;\n        years += absRound(months / 12);\n        data.years = years;\n        return this;\n    }\n\n    _createClass(Duration, [{\n        key: 'valueOf',\n        value: function valueOf() {\n            return this._milliseconds + this._days * 864e5 + this._months * 2592e6;\n        }\n    }]);\n\n    return Duration;\n}();\n\nmodule.exports = Duration;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Constants\n * @module constants\n */\n\nmodule.exports = {\n    gregorian: {\n        months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        weekdaysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n    },\n    persian: {\n        months: ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Dey', 'Bahman', 'Esfand'],\n        monthsShort: ['Far', 'Ord', 'Kho', 'Tir', 'Mor', 'Sha', 'Meh', 'Aba', 'Aza', 'Dey', 'Bah', 'Esf'],\n        weekdays: ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n        weekdaysShort: ['Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n        weekdaysMin: ['Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr'],\n        persianDaysName: ['Urmazd', 'Bahman', 'Ordibehesht', 'Shahrivar', 'Sepandarmaz', 'Khurdad', 'Amordad', 'Dey-be-azar', 'Azar', 'Aban', 'Khorshid', 'Mah', 'Tir', 'Gush', 'Dey-be-mehr', 'Mehr', 'Sorush', 'Rashn', 'Farvardin', 'Bahram', 'Ram', 'Bad', 'Dey-be-din', 'Din', 'Ord', 'Ashtad', 'Asman', 'Zamyad', 'Mantre-sepand', 'Anaram', 'Ziadi']\n    }\n};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Constants\n * @module constants\n */\n\nmodule.exports = {\n    gregorian: {\n        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),\n        monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),\n        weekdays: '\\u06CC\\u06A9\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062F\\u0648\\u0634\\u0646\\u0628\\u0647_\\u0633\\u0647\\u200C\\u0634\\u0646\\u0628\\u0647_\\u0686\\u0647\\u0627\\u0631\\u0634\\u0646\\u0628\\u0647_\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062C\\u0645\\u0639\\u0647_\\u0634\\u0646\\u0628\\u0647'.split('_'),\n        weekdaysShort: '\\u06CC\\u06A9\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062F\\u0648\\u0634\\u0646\\u0628\\u0647_\\u0633\\u0647\\u200C\\u0634\\u0646\\u0628\\u0647_\\u0686\\u0647\\u0627\\u0631\\u0634\\u0646\\u0628\\u0647_\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062C\\u0645\\u0639\\u0647_\\u0634\\u0646\\u0628\\u0647'.split('_'),\n        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_')\n    },\n    persian: {\n        months: ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'],\n        monthsShort: ['فرو', 'ارد', 'خرد', 'تیر', 'مرد', 'شهر', 'مهر', 'آبا', 'آذر', 'دی', 'بهم', 'اسف'],\n        weekdays: ['شنبه', 'یکشنبه', 'دوشنبه', 'سه شنبه', 'چهار شنبه', '\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647', 'جمعه'],\n        weekdaysShort: ['ش', 'ی', 'د', 'س', 'چ', 'پ', 'ج'],\n        weekdaysMin: ['ش', 'ی', 'د', 'س', 'چ', 'پ', 'ج'],\n        persianDaysName: ['اورمزد', 'بهمن', 'اوردیبهشت', 'شهریور', 'سپندارمذ', 'خورداد', 'امرداد', 'دی به آذز', 'آذز', 'آبان', 'خورشید', 'ماه', 'تیر', 'گوش', 'دی به مهر', 'مهر', 'سروش', 'رشن', 'فروردین', 'بهرام', 'رام', 'باد', 'دی به دین', 'دین', 'ارد', 'اشتاد', 'آسمان', 'زامیاد', 'مانتره سپند', 'انارام', 'زیادی']\n    }\n};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar PersianDateClass = __webpack_require__(1);\nPersianDateClass.calendarType = 'persian';\nPersianDateClass.leapYearMode = 'astronomical';\nPersianDateClass.localType = 'fa';\nmodule.exports = PersianDateClass;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Container = function Container() {\n    _classCallCheck(this, Container);\n\n    this.isInvalidDate = null;\n\n    this.gDate = null;\n    /**\n     *\n     * @type {number}\n     */\n    this.modifiedjulianday = 0;\n\n    /**\n     *\n     * @type {number}\n     */\n    this.julianday = 0;\n\n    /**\n     *\n     * @type {{day: number}}\n     */\n    this.gregserial = {\n        day: 0\n    };\n\n    this.zone = 0;\n\n    /**\n     *\n     * @type {{year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number, weekday: number, unix: number, leap: number}}\n     */\n    this.gregorian = {\n        year: 0,\n        month: 0,\n        day: 0,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0,\n        weekday: 0,\n        unix: 0,\n        leap: 0\n    };\n\n    /**\n     *\n     * @type {{year: number, month: number, day: number, leap: number, weekday: number}}\n     */\n    this.juliancalendar = {\n        year: 0,\n        month: 0,\n        day: 0,\n        leap: 0,\n        weekday: 0\n    };\n\n    /**\n     *\n     * @type {{year: number, month: number, day: number, leap: number, weekday: number}}\n     */\n    this.islamic = {\n        year: 0,\n        month: 0,\n        day: 0,\n        leap: 0,\n        weekday: 0\n    };\n\n    /**\n     *\n     * @type {{year: number, month: number, day: number, leap: number, weekday: number}}\n     */\n    this.persianAlgo = this.persian = {\n        year: 0,\n        month: 0,\n        day: 0,\n        leap: 0,\n        weekday: 0\n    };\n\n    /**\n     *\n     * @type {{year: number, month: number, day: number, leap: number, weekday: number}}\n     */\n    this.persianAstro = {\n        year: 0,\n        month: 0,\n        day: 0,\n        leap: 0,\n        weekday: 0\n    };\n\n    /**\n     *\n     * @type {{year: number, week: number, day: number}}\n     */\n    this.isoweek = {\n        year: 0,\n        week: 0,\n        day: 0\n    };\n\n    /**\n     *\n     * @type {{year: number, day: number}}\n     */\n    this.isoday = {\n        year: 0,\n        day: 0\n    };\n};\n\nmodule.exports = Container;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = {\n    /**\n     * @param input\n     * @returns {boolean}\n     */\n    isArray: function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    },\n\n\n    /**\n     *\n     * @param input\n     * @returns {boolean}\n     */\n    isNumber: function isNumber(input) {\n        return typeof input === 'number';\n    },\n\n\n    /**\n     *\n     * @param input\n     * @returns {boolean}\n     */\n    isDate: function isDate(input) {\n        return input instanceof Date;\n    }\n};\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = {\n  /**\n   * @param input\n   * @returns {boolean}\n   */\n  validateInputArray: function validateInputArray(input) {\n    var out = true;\n    // Check month\n    if (input[1] < 1 || input[1] > 12) {\n      out = false;\n    }\n    // Check date\n    if (input[2] < 1 || input[1] > 31) {\n      out = false;\n    }\n    // Check hour \n    if (input[3] < 0 || input[3] > 24) {\n      out = false;\n    }\n    // Check minute \n    if (input[4] < 0 || input[4] > 60) {\n      out = false;\n    }\n    // Check second \n    if (input[5] < 0 || input[5] > 60) {\n      out = false;\n    }\n    return out;\n  }\n};\n\n/***/ })\n/******/ ]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/persian-date/dist/persian-date.js\n");

/***/ })

}]);