(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~bootstrap-vue-dialog"],{

/***/ "./node_modules/bootstrap-vue-dialog/dist/bootstrap-vue-dialog.js":
/*!************************************************************************!*\
  !*** ./node_modules/bootstrap-vue-dialog/dist/bootstrap-vue-dialog.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, factory) {\n\t true ? module.exports = factory(__webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.common.js\")) :\n\tundefined;\n}(this, (function (vue) { 'use strict';\n\n\tvue = vue && vue.hasOwnProperty('default') ? vue['default'] : vue;\n\n\tvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar vuedl = createCommonjsModule(function (module, exports) {\n\t(function (global, factory) {\n\t  module.exports = factory(vue);\n\t}(commonjsGlobal, (function (Vue) {\n\t  Vue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;\n\n\t  var Recordable = {\n\t    computed: {\n\t      $parameters: function $parameters() {\n\t        return this.$options.propsData;\n\t      },\n\n\t      isNewRecord: function () {\n\t        return !this.$options.primaryKey || !this.$options.propsData || !this.$options.propsData[this.$options.primaryKey];\n\t      }\n\t    }\n\t  };\n\n\t  var Activable = {\n\t    name: 'Activable',\n\n\t    data: function data() {\n\t      return {\n\t        isActive: false\n\t      };\n\t    },\n\n\t    watch: {\n\t      isActive: function isActive(val) {\n\t        // debugger\n\t        // if (this.isLayout) {\n\t        // this.$children.forEach(vm => {\n\t        //   if (vm.isActive !== undefined) {\n\t        //     vm.isActive = val\n\t        //   }\n\t        // })\n\t        if (this._dialogInstance) {\n\t          if (this._dialogInstance.isActive !== undefined) {\n\t            this._dialogInstance.isActive = val;\n\t          }\n\t        } else {\n\t          if (this.$parent && this.$parent.isActive !== undefined) {\n\t            this.$parent.isActive = val;\n\t          }\n\t        }\n\t      }\n\n\t    },\n\t    methods: {\n\t      close: function close() {\n\t        this.isActive = false;\n\t      }\n\n\t    }\n\t  };\n\n\t  var Layoutable = {\n\t    name: 'Layoutable',\n\t    mixins: [Activable],\n\t    props: {\n\t      width: {\n\t        type: Number,\n\t        default: function () { return 450; }\n\t      },\n\t      persistent: Boolean\n\t    },\n\n\t    data: function data() {\n\t      return {\n\t        loading: false\n\t      };\n\t    },\n\n\t    compouted: {\n\t      isLayout: function isLayout() {\n\t        return true;\n\t      }\n\n\t    },\n\t    watch: {\n\t      isActive: function isActive(val) {\n\t        if (!val) {\n\t          // window.removeEventListener('popstate', this.close)\n\t          this._destroy();\n\t        }\n\t      }\n\n\t    },\n\n\t    mounted: function mounted() {\n\t      // this.$nextTick(() => {\n\t      // window.addEventListener('popstate', this.close)\n\t      // })\n\t      this.isActive = true;\n\t    },\n\n\t    methods: {\n\t      _destroy: function _destroy() {\n\t        this.$destroy();\n\t      },\n\n\t      dismiss: function dismiss() {\n\t        if (!this.persistent && !this.loading) {\n\t          this.isActive = false;\n\t        }\n\t      },\n\n\t      close: function close() {\n\t        this.isActive = false;\n\t      }\n\n\t    },\n\n\t    beforeDestroy: function beforeDestroy() {\n\t      if (typeof this.$el.remove !== 'undefined') {\n\t        this.$el.remove();\n\t      } else {\n\t        this.$el.parentNode.removeChild(this.$el);\n\t      }\n\t    }\n\n\t  };\n\n\t  /**\n\t   * Removes all key-value entries from the list cache.\n\t   *\n\t   * @private\n\t   * @name clear\n\t   * @memberOf ListCache\n\t   */\n\t  function listCacheClear() {\n\t    this.__data__ = [];\n\t    this.size = 0;\n\t  }\n\n\t  var _listCacheClear = listCacheClear;\n\n\t  /**\n\t   * Performs a\n\t   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t   * comparison between two values to determine if they are equivalent.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to compare.\n\t   * @param {*} other The other value to compare.\n\t   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t   * @example\n\t   *\n\t   * var object = { 'a': 1 };\n\t   * var other = { 'a': 1 };\n\t   *\n\t   * _.eq(object, object);\n\t   * // => true\n\t   *\n\t   * _.eq(object, other);\n\t   * // => false\n\t   *\n\t   * _.eq('a', 'a');\n\t   * // => true\n\t   *\n\t   * _.eq('a', Object('a'));\n\t   * // => false\n\t   *\n\t   * _.eq(NaN, NaN);\n\t   * // => true\n\t   */\n\t  function eq(value, other) {\n\t    return value === other || (value !== value && other !== other);\n\t  }\n\n\t  var eq_1 = eq;\n\n\t  /**\n\t   * Gets the index at which the `key` is found in `array` of key-value pairs.\n\t   *\n\t   * @private\n\t   * @param {Array} array The array to inspect.\n\t   * @param {*} key The key to search for.\n\t   * @returns {number} Returns the index of the matched value, else `-1`.\n\t   */\n\t  function assocIndexOf(array, key) {\n\t    var length = array.length;\n\t    while (length--) {\n\t      if (eq_1(array[length][0], key)) {\n\t        return length;\n\t      }\n\t    }\n\t    return -1;\n\t  }\n\n\t  var _assocIndexOf = assocIndexOf;\n\n\t  /** Used for built-in method references. */\n\t  var arrayProto = Array.prototype;\n\n\t  /** Built-in value references. */\n\t  var splice = arrayProto.splice;\n\n\t  /**\n\t   * Removes `key` and its value from the list cache.\n\t   *\n\t   * @private\n\t   * @name delete\n\t   * @memberOf ListCache\n\t   * @param {string} key The key of the value to remove.\n\t   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t   */\n\t  function listCacheDelete(key) {\n\t    var data = this.__data__,\n\t        index = _assocIndexOf(data, key);\n\n\t    if (index < 0) {\n\t      return false;\n\t    }\n\t    var lastIndex = data.length - 1;\n\t    if (index == lastIndex) {\n\t      data.pop();\n\t    } else {\n\t      splice.call(data, index, 1);\n\t    }\n\t    --this.size;\n\t    return true;\n\t  }\n\n\t  var _listCacheDelete = listCacheDelete;\n\n\t  /**\n\t   * Gets the list cache value for `key`.\n\t   *\n\t   * @private\n\t   * @name get\n\t   * @memberOf ListCache\n\t   * @param {string} key The key of the value to get.\n\t   * @returns {*} Returns the entry value.\n\t   */\n\t  function listCacheGet(key) {\n\t    var data = this.__data__,\n\t        index = _assocIndexOf(data, key);\n\n\t    return index < 0 ? undefined : data[index][1];\n\t  }\n\n\t  var _listCacheGet = listCacheGet;\n\n\t  /**\n\t   * Checks if a list cache value for `key` exists.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf ListCache\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function listCacheHas(key) {\n\t    return _assocIndexOf(this.__data__, key) > -1;\n\t  }\n\n\t  var _listCacheHas = listCacheHas;\n\n\t  /**\n\t   * Sets the list cache `key` to `value`.\n\t   *\n\t   * @private\n\t   * @name set\n\t   * @memberOf ListCache\n\t   * @param {string} key The key of the value to set.\n\t   * @param {*} value The value to set.\n\t   * @returns {Object} Returns the list cache instance.\n\t   */\n\t  function listCacheSet(key, value) {\n\t    var data = this.__data__,\n\t        index = _assocIndexOf(data, key);\n\n\t    if (index < 0) {\n\t      ++this.size;\n\t      data.push([key, value]);\n\t    } else {\n\t      data[index][1] = value;\n\t    }\n\t    return this;\n\t  }\n\n\t  var _listCacheSet = listCacheSet;\n\n\t  /**\n\t   * Creates an list cache object.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [entries] The key-value pairs to cache.\n\t   */\n\t  function ListCache(entries) {\n\t    var index = -1,\n\t        length = entries == null ? 0 : entries.length;\n\n\t    this.clear();\n\t    while (++index < length) {\n\t      var entry = entries[index];\n\t      this.set(entry[0], entry[1]);\n\t    }\n\t  }\n\n\t  // Add methods to `ListCache`.\n\t  ListCache.prototype.clear = _listCacheClear;\n\t  ListCache.prototype['delete'] = _listCacheDelete;\n\t  ListCache.prototype.get = _listCacheGet;\n\t  ListCache.prototype.has = _listCacheHas;\n\t  ListCache.prototype.set = _listCacheSet;\n\n\t  var _ListCache = ListCache;\n\n\t  /**\n\t   * Removes all key-value entries from the stack.\n\t   *\n\t   * @private\n\t   * @name clear\n\t   * @memberOf Stack\n\t   */\n\t  function stackClear() {\n\t    this.__data__ = new _ListCache;\n\t    this.size = 0;\n\t  }\n\n\t  var _stackClear = stackClear;\n\n\t  /**\n\t   * Removes `key` and its value from the stack.\n\t   *\n\t   * @private\n\t   * @name delete\n\t   * @memberOf Stack\n\t   * @param {string} key The key of the value to remove.\n\t   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t   */\n\t  function stackDelete(key) {\n\t    var data = this.__data__,\n\t        result = data['delete'](key);\n\n\t    this.size = data.size;\n\t    return result;\n\t  }\n\n\t  var _stackDelete = stackDelete;\n\n\t  /**\n\t   * Gets the stack value for `key`.\n\t   *\n\t   * @private\n\t   * @name get\n\t   * @memberOf Stack\n\t   * @param {string} key The key of the value to get.\n\t   * @returns {*} Returns the entry value.\n\t   */\n\t  function stackGet(key) {\n\t    return this.__data__.get(key);\n\t  }\n\n\t  var _stackGet = stackGet;\n\n\t  /**\n\t   * Checks if a stack value for `key` exists.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf Stack\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function stackHas(key) {\n\t    return this.__data__.has(key);\n\t  }\n\n\t  var _stackHas = stackHas;\n\n\t  var commonjsGlobal$$1 = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};\n\n\t  function createCommonjsModule$$1(fn, module) {\n\t  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t  }\n\n\t  /** Detect free variable `global` from Node.js. */\n\t  var freeGlobal = typeof commonjsGlobal$$1 == 'object' && commonjsGlobal$$1 && commonjsGlobal$$1.Object === Object && commonjsGlobal$$1;\n\n\t  var _freeGlobal = freeGlobal;\n\n\t  /** Detect free variable `self`. */\n\t  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n\t  /** Used as a reference to the global object. */\n\t  var root = _freeGlobal || freeSelf || Function('return this')();\n\n\t  var _root = root;\n\n\t  /** Built-in value references. */\n\t  var Symbol = _root.Symbol;\n\n\t  var _Symbol = Symbol;\n\n\t  /** Used for built-in method references. */\n\t  var objectProto = Object.prototype;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty = objectProto.hasOwnProperty;\n\n\t  /**\n\t   * Used to resolve the\n\t   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t   * of values.\n\t   */\n\t  var nativeObjectToString = objectProto.toString;\n\n\t  /** Built-in value references. */\n\t  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n\t  /**\n\t   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to query.\n\t   * @returns {string} Returns the raw `toStringTag`.\n\t   */\n\t  function getRawTag(value) {\n\t    var isOwn = hasOwnProperty.call(value, symToStringTag),\n\t        tag = value[symToStringTag];\n\n\t    try {\n\t      value[symToStringTag] = undefined;\n\t      var unmasked = true;\n\t    } catch (e) {}\n\n\t    var result = nativeObjectToString.call(value);\n\t    if (unmasked) {\n\t      if (isOwn) {\n\t        value[symToStringTag] = tag;\n\t      } else {\n\t        delete value[symToStringTag];\n\t      }\n\t    }\n\t    return result;\n\t  }\n\n\t  var _getRawTag = getRawTag;\n\n\t  /** Used for built-in method references. */\n\t  var objectProto$1 = Object.prototype;\n\n\t  /**\n\t   * Used to resolve the\n\t   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t   * of values.\n\t   */\n\t  var nativeObjectToString$1 = objectProto$1.toString;\n\n\t  /**\n\t   * Converts `value` to a string using `Object.prototype.toString`.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to convert.\n\t   * @returns {string} Returns the converted string.\n\t   */\n\t  function objectToString(value) {\n\t    return nativeObjectToString$1.call(value);\n\t  }\n\n\t  var _objectToString = objectToString;\n\n\t  /** `Object#toString` result references. */\n\t  var nullTag = '[object Null]',\n\t      undefinedTag = '[object Undefined]';\n\n\t  /** Built-in value references. */\n\t  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;\n\n\t  /**\n\t   * The base implementation of `getTag` without fallbacks for buggy environments.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to query.\n\t   * @returns {string} Returns the `toStringTag`.\n\t   */\n\t  function baseGetTag(value) {\n\t    if (value == null) {\n\t      return value === undefined ? undefinedTag : nullTag;\n\t    }\n\t    return (symToStringTag$1 && symToStringTag$1 in Object(value))\n\t      ? _getRawTag(value)\n\t      : _objectToString(value);\n\t  }\n\n\t  var _baseGetTag = baseGetTag;\n\n\t  /**\n\t   * Checks if `value` is the\n\t   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t   * @example\n\t   *\n\t   * _.isObject({});\n\t   * // => true\n\t   *\n\t   * _.isObject([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isObject(_.noop);\n\t   * // => true\n\t   *\n\t   * _.isObject(null);\n\t   * // => false\n\t   */\n\t  function isObject(value) {\n\t    var type = typeof value;\n\t    return value != null && (type == 'object' || type == 'function');\n\t  }\n\n\t  var isObject_1 = isObject;\n\n\t  /** `Object#toString` result references. */\n\t  var asyncTag = '[object AsyncFunction]',\n\t      funcTag = '[object Function]',\n\t      genTag = '[object GeneratorFunction]',\n\t      proxyTag = '[object Proxy]';\n\n\t  /**\n\t   * Checks if `value` is classified as a `Function` object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t   * @example\n\t   *\n\t   * _.isFunction(_);\n\t   * // => true\n\t   *\n\t   * _.isFunction(/abc/);\n\t   * // => false\n\t   */\n\t  function isFunction(value) {\n\t    if (!isObject_1(value)) {\n\t      return false;\n\t    }\n\t    // The use of `Object#toString` avoids issues with the `typeof` operator\n\t    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\t    var tag = _baseGetTag(value);\n\t    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n\t  }\n\n\t  var isFunction_1 = isFunction;\n\n\t  /** Used to detect overreaching core-js shims. */\n\t  var coreJsData = _root['__core-js_shared__'];\n\n\t  var _coreJsData = coreJsData;\n\n\t  /** Used to detect methods masquerading as native. */\n\t  var maskSrcKey = (function() {\n\t    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');\n\t    return uid ? ('Symbol(src)_1.' + uid) : '';\n\t  }());\n\n\t  /**\n\t   * Checks if `func` has its source masked.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to check.\n\t   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n\t   */\n\t  function isMasked(func) {\n\t    return !!maskSrcKey && (maskSrcKey in func);\n\t  }\n\n\t  var _isMasked = isMasked;\n\n\t  /** Used for built-in method references. */\n\t  var funcProto = Function.prototype;\n\n\t  /** Used to resolve the decompiled source of functions. */\n\t  var funcToString = funcProto.toString;\n\n\t  /**\n\t   * Converts `func` to its source code.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to convert.\n\t   * @returns {string} Returns the source code.\n\t   */\n\t  function toSource(func) {\n\t    if (func != null) {\n\t      try {\n\t        return funcToString.call(func);\n\t      } catch (e) {}\n\t      try {\n\t        return (func + '');\n\t      } catch (e) {}\n\t    }\n\t    return '';\n\t  }\n\n\t  var _toSource = toSource;\n\n\t  /**\n\t   * Used to match `RegExp`\n\t   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n\t   */\n\t  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n\t  /** Used to detect host constructors (Safari). */\n\t  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n\t  /** Used for built-in method references. */\n\t  var funcProto$1 = Function.prototype,\n\t      objectProto$2 = Object.prototype;\n\n\t  /** Used to resolve the decompiled source of functions. */\n\t  var funcToString$1 = funcProto$1.toString;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n\n\t  /** Used to detect if a method is native. */\n\t  var reIsNative = RegExp('^' +\n\t    funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\\\$&')\n\t    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n\t  );\n\n\t  /**\n\t   * The base implementation of `_.isNative` without bad shim checks.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a native function,\n\t   *  else `false`.\n\t   */\n\t  function baseIsNative(value) {\n\t    if (!isObject_1(value) || _isMasked(value)) {\n\t      return false;\n\t    }\n\t    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;\n\t    return pattern.test(_toSource(value));\n\t  }\n\n\t  var _baseIsNative = baseIsNative;\n\n\t  /**\n\t   * Gets the value at `key` of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} [object] The object to query.\n\t   * @param {string} key The key of the property to get.\n\t   * @returns {*} Returns the property value.\n\t   */\n\t  function getValue(object, key) {\n\t    return object == null ? undefined : object[key];\n\t  }\n\n\t  var _getValue = getValue;\n\n\t  /**\n\t   * Gets the native function at `key` of `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @param {string} key The key of the method to get.\n\t   * @returns {*} Returns the function if it's native, else `undefined`.\n\t   */\n\t  function getNative(object, key) {\n\t    var value = _getValue(object, key);\n\t    return _baseIsNative(value) ? value : undefined;\n\t  }\n\n\t  var _getNative = getNative;\n\n\t  /* Built-in method references that are verified to be native. */\n\t  var Map = _getNative(_root, 'Map');\n\n\t  var _Map = Map;\n\n\t  /* Built-in method references that are verified to be native. */\n\t  var nativeCreate = _getNative(Object, 'create');\n\n\t  var _nativeCreate = nativeCreate;\n\n\t  /**\n\t   * Removes all key-value entries from the hash.\n\t   *\n\t   * @private\n\t   * @name clear\n\t   * @memberOf Hash\n\t   */\n\t  function hashClear() {\n\t    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};\n\t    this.size = 0;\n\t  }\n\n\t  var _hashClear = hashClear;\n\n\t  /**\n\t   * Removes `key` and its value from the hash.\n\t   *\n\t   * @private\n\t   * @name delete\n\t   * @memberOf Hash\n\t   * @param {Object} hash The hash to modify.\n\t   * @param {string} key The key of the value to remove.\n\t   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t   */\n\t  function hashDelete(key) {\n\t    var result = this.has(key) && delete this.__data__[key];\n\t    this.size -= result ? 1 : 0;\n\t    return result;\n\t  }\n\n\t  var _hashDelete = hashDelete;\n\n\t  /** Used to stand-in for `undefined` hash values. */\n\t  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n\t  /** Used for built-in method references. */\n\t  var objectProto$3 = Object.prototype;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n\n\t  /**\n\t   * Gets the hash value for `key`.\n\t   *\n\t   * @private\n\t   * @name get\n\t   * @memberOf Hash\n\t   * @param {string} key The key of the value to get.\n\t   * @returns {*} Returns the entry value.\n\t   */\n\t  function hashGet(key) {\n\t    var data = this.__data__;\n\t    if (_nativeCreate) {\n\t      var result = data[key];\n\t      return result === HASH_UNDEFINED ? undefined : result;\n\t    }\n\t    return hasOwnProperty$2.call(data, key) ? data[key] : undefined;\n\t  }\n\n\t  var _hashGet = hashGet;\n\n\t  /** Used for built-in method references. */\n\t  var objectProto$4 = Object.prototype;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n\n\t  /**\n\t   * Checks if a hash value for `key` exists.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf Hash\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function hashHas(key) {\n\t    var data = this.__data__;\n\t    return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$3.call(data, key);\n\t  }\n\n\t  var _hashHas = hashHas;\n\n\t  /** Used to stand-in for `undefined` hash values. */\n\t  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n\n\t  /**\n\t   * Sets the hash `key` to `value`.\n\t   *\n\t   * @private\n\t   * @name set\n\t   * @memberOf Hash\n\t   * @param {string} key The key of the value to set.\n\t   * @param {*} value The value to set.\n\t   * @returns {Object} Returns the hash instance.\n\t   */\n\t  function hashSet(key, value) {\n\t    var data = this.__data__;\n\t    this.size += this.has(key) ? 0 : 1;\n\t    data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;\n\t    return this;\n\t  }\n\n\t  var _hashSet = hashSet;\n\n\t  /**\n\t   * Creates a hash object.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [entries] The key-value pairs to cache.\n\t   */\n\t  function Hash(entries) {\n\t    var index = -1,\n\t        length = entries == null ? 0 : entries.length;\n\n\t    this.clear();\n\t    while (++index < length) {\n\t      var entry = entries[index];\n\t      this.set(entry[0], entry[1]);\n\t    }\n\t  }\n\n\t  // Add methods to `Hash`.\n\t  Hash.prototype.clear = _hashClear;\n\t  Hash.prototype['delete'] = _hashDelete;\n\t  Hash.prototype.get = _hashGet;\n\t  Hash.prototype.has = _hashHas;\n\t  Hash.prototype.set = _hashSet;\n\n\t  var _Hash = Hash;\n\n\t  /**\n\t   * Removes all key-value entries from the map.\n\t   *\n\t   * @private\n\t   * @name clear\n\t   * @memberOf MapCache\n\t   */\n\t  function mapCacheClear() {\n\t    this.size = 0;\n\t    this.__data__ = {\n\t      'hash': new _Hash,\n\t      'map': new (_Map || _ListCache),\n\t      'string': new _Hash\n\t    };\n\t  }\n\n\t  var _mapCacheClear = mapCacheClear;\n\n\t  /**\n\t   * Checks if `value` is suitable for use as unique object key.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n\t   */\n\t  function isKeyable(value) {\n\t    var type = typeof value;\n\t    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n\t      ? (value !== '__proto__')\n\t      : (value === null);\n\t  }\n\n\t  var _isKeyable = isKeyable;\n\n\t  /**\n\t   * Gets the data for `map`.\n\t   *\n\t   * @private\n\t   * @param {Object} map The map to query.\n\t   * @param {string} key The reference key.\n\t   * @returns {*} Returns the map data.\n\t   */\n\t  function getMapData(map, key) {\n\t    var data = map.__data__;\n\t    return _isKeyable(key)\n\t      ? data[typeof key == 'string' ? 'string' : 'hash']\n\t      : data.map;\n\t  }\n\n\t  var _getMapData = getMapData;\n\n\t  /**\n\t   * Removes `key` and its value from the map.\n\t   *\n\t   * @private\n\t   * @name delete\n\t   * @memberOf MapCache\n\t   * @param {string} key The key of the value to remove.\n\t   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n\t   */\n\t  function mapCacheDelete(key) {\n\t    var result = _getMapData(this, key)['delete'](key);\n\t    this.size -= result ? 1 : 0;\n\t    return result;\n\t  }\n\n\t  var _mapCacheDelete = mapCacheDelete;\n\n\t  /**\n\t   * Gets the map value for `key`.\n\t   *\n\t   * @private\n\t   * @name get\n\t   * @memberOf MapCache\n\t   * @param {string} key The key of the value to get.\n\t   * @returns {*} Returns the entry value.\n\t   */\n\t  function mapCacheGet(key) {\n\t    return _getMapData(this, key).get(key);\n\t  }\n\n\t  var _mapCacheGet = mapCacheGet;\n\n\t  /**\n\t   * Checks if a map value for `key` exists.\n\t   *\n\t   * @private\n\t   * @name has\n\t   * @memberOf MapCache\n\t   * @param {string} key The key of the entry to check.\n\t   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n\t   */\n\t  function mapCacheHas(key) {\n\t    return _getMapData(this, key).has(key);\n\t  }\n\n\t  var _mapCacheHas = mapCacheHas;\n\n\t  /**\n\t   * Sets the map `key` to `value`.\n\t   *\n\t   * @private\n\t   * @name set\n\t   * @memberOf MapCache\n\t   * @param {string} key The key of the value to set.\n\t   * @param {*} value The value to set.\n\t   * @returns {Object} Returns the map cache instance.\n\t   */\n\t  function mapCacheSet(key, value) {\n\t    var data = _getMapData(this, key),\n\t        size = data.size;\n\n\t    data.set(key, value);\n\t    this.size += data.size == size ? 0 : 1;\n\t    return this;\n\t  }\n\n\t  var _mapCacheSet = mapCacheSet;\n\n\t  /**\n\t   * Creates a map cache object to store key-value pairs.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [entries] The key-value pairs to cache.\n\t   */\n\t  function MapCache(entries) {\n\t    var index = -1,\n\t        length = entries == null ? 0 : entries.length;\n\n\t    this.clear();\n\t    while (++index < length) {\n\t      var entry = entries[index];\n\t      this.set(entry[0], entry[1]);\n\t    }\n\t  }\n\n\t  // Add methods to `MapCache`.\n\t  MapCache.prototype.clear = _mapCacheClear;\n\t  MapCache.prototype['delete'] = _mapCacheDelete;\n\t  MapCache.prototype.get = _mapCacheGet;\n\t  MapCache.prototype.has = _mapCacheHas;\n\t  MapCache.prototype.set = _mapCacheSet;\n\n\t  var _MapCache = MapCache;\n\n\t  /** Used as the size to enable large array optimizations. */\n\t  var LARGE_ARRAY_SIZE = 200;\n\n\t  /**\n\t   * Sets the stack `key` to `value`.\n\t   *\n\t   * @private\n\t   * @name set\n\t   * @memberOf Stack\n\t   * @param {string} key The key of the value to set.\n\t   * @param {*} value The value to set.\n\t   * @returns {Object} Returns the stack cache instance.\n\t   */\n\t  function stackSet(key, value) {\n\t    var data = this.__data__;\n\t    if (data instanceof _ListCache) {\n\t      var pairs = data.__data__;\n\t      if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n\t        pairs.push([key, value]);\n\t        this.size = ++data.size;\n\t        return this;\n\t      }\n\t      data = this.__data__ = new _MapCache(pairs);\n\t    }\n\t    data.set(key, value);\n\t    this.size = data.size;\n\t    return this;\n\t  }\n\n\t  var _stackSet = stackSet;\n\n\t  /**\n\t   * Creates a stack cache object to store key-value pairs.\n\t   *\n\t   * @private\n\t   * @constructor\n\t   * @param {Array} [entries] The key-value pairs to cache.\n\t   */\n\t  function Stack(entries) {\n\t    var data = this.__data__ = new _ListCache(entries);\n\t    this.size = data.size;\n\t  }\n\n\t  // Add methods to `Stack`.\n\t  Stack.prototype.clear = _stackClear;\n\t  Stack.prototype['delete'] = _stackDelete;\n\t  Stack.prototype.get = _stackGet;\n\t  Stack.prototype.has = _stackHas;\n\t  Stack.prototype.set = _stackSet;\n\n\t  var _Stack = Stack;\n\n\t  var defineProperty = (function() {\n\t    try {\n\t      var func = _getNative(Object, 'defineProperty');\n\t      func({}, '', {});\n\t      return func;\n\t    } catch (e) {}\n\t  }());\n\n\t  var _defineProperty = defineProperty;\n\n\t  /**\n\t   * The base implementation of `assignValue` and `assignMergeValue` without\n\t   * value checks.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to modify.\n\t   * @param {string} key The key of the property to assign.\n\t   * @param {*} value The value to assign.\n\t   */\n\t  function baseAssignValue(object, key, value) {\n\t    if (key == '__proto__' && _defineProperty) {\n\t      _defineProperty(object, key, {\n\t        'configurable': true,\n\t        'enumerable': true,\n\t        'value': value,\n\t        'writable': true\n\t      });\n\t    } else {\n\t      object[key] = value;\n\t    }\n\t  }\n\n\t  var _baseAssignValue = baseAssignValue;\n\n\t  /**\n\t   * This function is like `assignValue` except that it doesn't assign\n\t   * `undefined` values.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to modify.\n\t   * @param {string} key The key of the property to assign.\n\t   * @param {*} value The value to assign.\n\t   */\n\t  function assignMergeValue(object, key, value) {\n\t    if ((value !== undefined && !eq_1(object[key], value)) ||\n\t        (value === undefined && !(key in object))) {\n\t      _baseAssignValue(object, key, value);\n\t    }\n\t  }\n\n\t  var _assignMergeValue = assignMergeValue;\n\n\t  /**\n\t   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n\t   *\n\t   * @private\n\t   * @param {boolean} [fromRight] Specify iterating from right to left.\n\t   * @returns {Function} Returns the new base function.\n\t   */\n\t  function createBaseFor(fromRight) {\n\t    return function(object, iteratee, keysFunc) {\n\t      var index = -1,\n\t          iterable = Object(object),\n\t          props = keysFunc(object),\n\t          length = props.length;\n\n\t      while (length--) {\n\t        var key = props[fromRight ? length : ++index];\n\t        if (iteratee(iterable[key], key, iterable) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return object;\n\t    };\n\t  }\n\n\t  var _createBaseFor = createBaseFor;\n\n\t  /**\n\t   * The base implementation of `baseForOwn` which iterates over `object`\n\t   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n\t   * Iteratee functions may exit iteration early by explicitly returning `false`.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to iterate over.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @param {Function} keysFunc The function to get the keys of `object`.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  var baseFor = _createBaseFor();\n\n\t  var _baseFor = baseFor;\n\n\t  var _cloneBuffer = createCommonjsModule$$1(function (module, exports) {\n\t  /** Detect free variable `exports`. */\n\t  var freeExports =  true && exports && !exports.nodeType && exports;\n\n\t  /** Detect free variable `module`. */\n\t  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n\t  /** Detect the popular CommonJS extension `module.exports`. */\n\t  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n\t  /** Built-in value references. */\n\t  var Buffer = moduleExports ? _root.Buffer : undefined,\n\t      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n\t  /**\n\t   * Creates a clone of  `buffer`.\n\t   *\n\t   * @private\n\t   * @param {Buffer} buffer The buffer to clone.\n\t   * @param {boolean} [isDeep] Specify a deep clone.\n\t   * @returns {Buffer} Returns the cloned buffer.\n\t   */\n\t  function cloneBuffer(buffer, isDeep) {\n\t    if (isDeep) {\n\t      return buffer.slice();\n\t    }\n\t    var length = buffer.length,\n\t        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n\t    buffer.copy(result);\n\t    return result;\n\t  }\n\n\t  module.exports = cloneBuffer;\n\t  });\n\n\t  /** Built-in value references. */\n\t  var Uint8Array = _root.Uint8Array;\n\n\t  var _Uint8Array = Uint8Array;\n\n\t  /**\n\t   * Creates a clone of `arrayBuffer`.\n\t   *\n\t   * @private\n\t   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n\t   * @returns {ArrayBuffer} Returns the cloned array buffer.\n\t   */\n\t  function cloneArrayBuffer(arrayBuffer) {\n\t    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n\t    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));\n\t    return result;\n\t  }\n\n\t  var _cloneArrayBuffer = cloneArrayBuffer;\n\n\t  /**\n\t   * Creates a clone of `typedArray`.\n\t   *\n\t   * @private\n\t   * @param {Object} typedArray The typed array to clone.\n\t   * @param {boolean} [isDeep] Specify a deep clone.\n\t   * @returns {Object} Returns the cloned typed array.\n\t   */\n\t  function cloneTypedArray(typedArray, isDeep) {\n\t    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n\t    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n\t  }\n\n\t  var _cloneTypedArray = cloneTypedArray;\n\n\t  /**\n\t   * Copies the values of `source` to `array`.\n\t   *\n\t   * @private\n\t   * @param {Array} source The array to copy values from.\n\t   * @param {Array} [array=[]] The array to copy values to.\n\t   * @returns {Array} Returns `array`.\n\t   */\n\t  function copyArray(source, array) {\n\t    var index = -1,\n\t        length = source.length;\n\n\t    array || (array = Array(length));\n\t    while (++index < length) {\n\t      array[index] = source[index];\n\t    }\n\t    return array;\n\t  }\n\n\t  var _copyArray = copyArray;\n\n\t  /** Built-in value references. */\n\t  var objectCreate = Object.create;\n\n\t  /**\n\t   * The base implementation of `_.create` without support for assigning\n\t   * properties to the created object.\n\t   *\n\t   * @private\n\t   * @param {Object} proto The object to inherit from.\n\t   * @returns {Object} Returns the new object.\n\t   */\n\t  var baseCreate = (function() {\n\t    function object() {}\n\t    return function(proto) {\n\t      if (!isObject_1(proto)) {\n\t        return {};\n\t      }\n\t      if (objectCreate) {\n\t        return objectCreate(proto);\n\t      }\n\t      object.prototype = proto;\n\t      var result = new object;\n\t      object.prototype = undefined;\n\t      return result;\n\t    };\n\t  }());\n\n\t  var _baseCreate = baseCreate;\n\n\t  /**\n\t   * Creates a unary function that invokes `func` with its argument transformed.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to wrap.\n\t   * @param {Function} transform The argument transform.\n\t   * @returns {Function} Returns the new function.\n\t   */\n\t  function overArg(func, transform) {\n\t    return function(arg) {\n\t      return func(transform(arg));\n\t    };\n\t  }\n\n\t  var _overArg = overArg;\n\n\t  /** Built-in value references. */\n\t  var getPrototype = _overArg(Object.getPrototypeOf, Object);\n\n\t  var _getPrototype = getPrototype;\n\n\t  /** Used for built-in method references. */\n\t  var objectProto$5 = Object.prototype;\n\n\t  /**\n\t   * Checks if `value` is likely a prototype object.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n\t   */\n\t  function isPrototype(value) {\n\t    var Ctor = value && value.constructor,\n\t        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\n\n\t    return value === proto;\n\t  }\n\n\t  var _isPrototype = isPrototype;\n\n\t  /**\n\t   * Initializes an object clone.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to clone.\n\t   * @returns {Object} Returns the initialized clone.\n\t   */\n\t  function initCloneObject(object) {\n\t    return (typeof object.constructor == 'function' && !_isPrototype(object))\n\t      ? _baseCreate(_getPrototype(object))\n\t      : {};\n\t  }\n\n\t  var _initCloneObject = initCloneObject;\n\n\t  /**\n\t   * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t   * and has a `typeof` result of \"object\".\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t   * @example\n\t   *\n\t   * _.isObjectLike({});\n\t   * // => true\n\t   *\n\t   * _.isObjectLike([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isObjectLike(_.noop);\n\t   * // => false\n\t   *\n\t   * _.isObjectLike(null);\n\t   * // => false\n\t   */\n\t  function isObjectLike(value) {\n\t    return value != null && typeof value == 'object';\n\t  }\n\n\t  var isObjectLike_1 = isObjectLike;\n\n\t  /** `Object#toString` result references. */\n\t  var argsTag = '[object Arguments]';\n\n\t  /**\n\t   * The base implementation of `_.isArguments`.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t   */\n\t  function baseIsArguments(value) {\n\t    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;\n\t  }\n\n\t  var _baseIsArguments = baseIsArguments;\n\n\t  /** Used for built-in method references. */\n\t  var objectProto$6 = Object.prototype;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty$4 = objectProto$6.hasOwnProperty;\n\n\t  /** Built-in value references. */\n\t  var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;\n\n\t  /**\n\t   * Checks if `value` is likely an `arguments` object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t   *  else `false`.\n\t   * @example\n\t   *\n\t   * _.isArguments(function() { return arguments; }());\n\t   * // => true\n\t   *\n\t   * _.isArguments([1, 2, 3]);\n\t   * // => false\n\t   */\n\t  var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {\n\t    return isObjectLike_1(value) && hasOwnProperty$4.call(value, 'callee') &&\n\t      !propertyIsEnumerable.call(value, 'callee');\n\t  };\n\n\t  var isArguments_1 = isArguments;\n\n\t  /**\n\t   * Checks if `value` is classified as an `Array` object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.1.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n\t   * @example\n\t   *\n\t   * _.isArray([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isArray(document.body.children);\n\t   * // => false\n\t   *\n\t   * _.isArray('abc');\n\t   * // => false\n\t   *\n\t   * _.isArray(_.noop);\n\t   * // => false\n\t   */\n\t  var isArray = Array.isArray;\n\n\t  var isArray_1 = isArray;\n\n\t  /** Used as references for various `Number` constants. */\n\t  var MAX_SAFE_INTEGER = 9007199254740991;\n\n\t  /**\n\t   * Checks if `value` is a valid array-like length.\n\t   *\n\t   * **Note:** This method is loosely based on\n\t   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t   * @example\n\t   *\n\t   * _.isLength(3);\n\t   * // => true\n\t   *\n\t   * _.isLength(Number.MIN_VALUE);\n\t   * // => false\n\t   *\n\t   * _.isLength(Infinity);\n\t   * // => false\n\t   *\n\t   * _.isLength('3');\n\t   * // => false\n\t   */\n\t  function isLength(value) {\n\t    return typeof value == 'number' &&\n\t      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t  }\n\n\t  var isLength_1 = isLength;\n\n\t  /**\n\t   * Checks if `value` is array-like. A value is considered array-like if it's\n\t   * not a function and has a `value.length` that's an integer greater than or\n\t   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t   * @example\n\t   *\n\t   * _.isArrayLike([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isArrayLike(document.body.children);\n\t   * // => true\n\t   *\n\t   * _.isArrayLike('abc');\n\t   * // => true\n\t   *\n\t   * _.isArrayLike(_.noop);\n\t   * // => false\n\t   */\n\t  function isArrayLike(value) {\n\t    return value != null && isLength_1(value.length) && !isFunction_1(value);\n\t  }\n\n\t  var isArrayLike_1 = isArrayLike;\n\n\t  /**\n\t   * This method is like `_.isArrayLike` except that it also checks if `value`\n\t   * is an object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is an array-like object,\n\t   *  else `false`.\n\t   * @example\n\t   *\n\t   * _.isArrayLikeObject([1, 2, 3]);\n\t   * // => true\n\t   *\n\t   * _.isArrayLikeObject(document.body.children);\n\t   * // => true\n\t   *\n\t   * _.isArrayLikeObject('abc');\n\t   * // => false\n\t   *\n\t   * _.isArrayLikeObject(_.noop);\n\t   * // => false\n\t   */\n\t  function isArrayLikeObject(value) {\n\t    return isObjectLike_1(value) && isArrayLike_1(value);\n\t  }\n\n\t  var isArrayLikeObject_1 = isArrayLikeObject;\n\n\t  /**\n\t   * This method returns `false`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.13.0\n\t   * @category Util\n\t   * @returns {boolean} Returns `false`.\n\t   * @example\n\t   *\n\t   * _.times(2, _.stubFalse);\n\t   * // => [false, false]\n\t   */\n\t  function stubFalse() {\n\t    return false;\n\t  }\n\n\t  var stubFalse_1 = stubFalse;\n\n\t  var isBuffer_1 = createCommonjsModule$$1(function (module, exports) {\n\t  /** Detect free variable `exports`. */\n\t  var freeExports =  true && exports && !exports.nodeType && exports;\n\n\t  /** Detect free variable `module`. */\n\t  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n\t  /** Detect the popular CommonJS extension `module.exports`. */\n\t  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n\t  /** Built-in value references. */\n\t  var Buffer = moduleExports ? _root.Buffer : undefined;\n\n\t  /* Built-in method references for those with the same name as other `lodash` methods. */\n\t  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n\t  /**\n\t   * Checks if `value` is a buffer.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 4.3.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n\t   * @example\n\t   *\n\t   * _.isBuffer(new Buffer(2));\n\t   * // => true\n\t   *\n\t   * _.isBuffer(new Uint8Array(2));\n\t   * // => false\n\t   */\n\t  var isBuffer = nativeIsBuffer || stubFalse_1;\n\n\t  module.exports = isBuffer;\n\t  });\n\n\t  /** `Object#toString` result references. */\n\t  var objectTag = '[object Object]';\n\n\t  /** Used for built-in method references. */\n\t  var funcProto$2 = Function.prototype,\n\t      objectProto$7 = Object.prototype;\n\n\t  /** Used to resolve the decompiled source of functions. */\n\t  var funcToString$2 = funcProto$2.toString;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty$5 = objectProto$7.hasOwnProperty;\n\n\t  /** Used to infer the `Object` constructor. */\n\t  var objectCtorString = funcToString$2.call(Object);\n\n\t  /**\n\t   * Checks if `value` is a plain object, that is, an object created by the\n\t   * `Object` constructor or one with a `[[Prototype]]` of `null`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.8.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n\t   * @example\n\t   *\n\t   * function Foo() {\n\t   *   this.a = 1;\n\t   * }\n\t   *\n\t   * _.isPlainObject(new Foo);\n\t   * // => false\n\t   *\n\t   * _.isPlainObject([1, 2, 3]);\n\t   * // => false\n\t   *\n\t   * _.isPlainObject({ 'x': 0, 'y': 0 });\n\t   * // => true\n\t   *\n\t   * _.isPlainObject(Object.create(null));\n\t   * // => true\n\t   */\n\t  function isPlainObject(value) {\n\t    if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag) {\n\t      return false;\n\t    }\n\t    var proto = _getPrototype(value);\n\t    if (proto === null) {\n\t      return true;\n\t    }\n\t    var Ctor = hasOwnProperty$5.call(proto, 'constructor') && proto.constructor;\n\t    return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n\t      funcToString$2.call(Ctor) == objectCtorString;\n\t  }\n\n\t  var isPlainObject_1 = isPlainObject;\n\n\t  /** `Object#toString` result references. */\n\t  var argsTag$1 = '[object Arguments]',\n\t      arrayTag = '[object Array]',\n\t      boolTag = '[object Boolean]',\n\t      dateTag = '[object Date]',\n\t      errorTag = '[object Error]',\n\t      funcTag$1 = '[object Function]',\n\t      mapTag = '[object Map]',\n\t      numberTag = '[object Number]',\n\t      objectTag$1 = '[object Object]',\n\t      regexpTag = '[object RegExp]',\n\t      setTag = '[object Set]',\n\t      stringTag = '[object String]',\n\t      weakMapTag = '[object WeakMap]';\n\n\t  var arrayBufferTag = '[object ArrayBuffer]',\n\t      dataViewTag = '[object DataView]',\n\t      float32Tag = '[object Float32Array]',\n\t      float64Tag = '[object Float64Array]',\n\t      int8Tag = '[object Int8Array]',\n\t      int16Tag = '[object Int16Array]',\n\t      int32Tag = '[object Int32Array]',\n\t      uint8Tag = '[object Uint8Array]',\n\t      uint8ClampedTag = '[object Uint8ClampedArray]',\n\t      uint16Tag = '[object Uint16Array]',\n\t      uint32Tag = '[object Uint32Array]';\n\n\t  /** Used to identify `toStringTag` values of typed arrays. */\n\t  var typedArrayTags = {};\n\t  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n\t  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n\t  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n\t  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n\t  typedArrayTags[uint32Tag] = true;\n\t  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\n\t  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n\t  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n\t  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\n\t  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n\t  typedArrayTags[objectTag$1] = typedArrayTags[regexpTag] =\n\t  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n\t  typedArrayTags[weakMapTag] = false;\n\n\t  /**\n\t   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n\t   */\n\t  function baseIsTypedArray(value) {\n\t    return isObjectLike_1(value) &&\n\t      isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];\n\t  }\n\n\t  var _baseIsTypedArray = baseIsTypedArray;\n\n\t  /**\n\t   * The base implementation of `_.unary` without support for storing metadata.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to cap arguments for.\n\t   * @returns {Function} Returns the new capped function.\n\t   */\n\t  function baseUnary(func) {\n\t    return function(value) {\n\t      return func(value);\n\t    };\n\t  }\n\n\t  var _baseUnary = baseUnary;\n\n\t  var _nodeUtil = createCommonjsModule$$1(function (module, exports) {\n\t  /** Detect free variable `exports`. */\n\t  var freeExports =  true && exports && !exports.nodeType && exports;\n\n\t  /** Detect free variable `module`. */\n\t  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n\t  /** Detect the popular CommonJS extension `module.exports`. */\n\t  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n\t  /** Detect free variable `process` from Node.js. */\n\t  var freeProcess = moduleExports && _freeGlobal.process;\n\n\t  /** Used to access faster Node.js helpers. */\n\t  var nodeUtil = (function() {\n\t    try {\n\t      // Use `util.types` for Node.js 10+.\n\t      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n\t      if (types) {\n\t        return types;\n\t      }\n\n\t      // Legacy `process.binding('util')` for Node.js < 10.\n\t      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n\t    } catch (e) {}\n\t  }());\n\n\t  module.exports = nodeUtil;\n\t  });\n\n\t  /* Node.js helper references. */\n\t  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;\n\n\t  /**\n\t   * Checks if `value` is classified as a typed array.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 3.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to check.\n\t   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n\t   * @example\n\t   *\n\t   * _.isTypedArray(new Uint8Array);\n\t   * // => true\n\t   *\n\t   * _.isTypedArray([]);\n\t   * // => false\n\t   */\n\t  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;\n\n\t  var isTypedArray_1 = isTypedArray;\n\n\t  /**\n\t   * Gets the value at `key`, unless `key` is \"__proto__\".\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @param {string} key The key of the property to get.\n\t   * @returns {*} Returns the property value.\n\t   */\n\t  function safeGet(object, key) {\n\t    return key == '__proto__'\n\t      ? undefined\n\t      : object[key];\n\t  }\n\n\t  var _safeGet = safeGet;\n\n\t  /** Used for built-in method references. */\n\t  var objectProto$8 = Object.prototype;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty$6 = objectProto$8.hasOwnProperty;\n\n\t  /**\n\t   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n\t   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t   * for equality comparisons.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to modify.\n\t   * @param {string} key The key of the property to assign.\n\t   * @param {*} value The value to assign.\n\t   */\n\t  function assignValue(object, key, value) {\n\t    var objValue = object[key];\n\t    if (!(hasOwnProperty$6.call(object, key) && eq_1(objValue, value)) ||\n\t        (value === undefined && !(key in object))) {\n\t      _baseAssignValue(object, key, value);\n\t    }\n\t  }\n\n\t  var _assignValue = assignValue;\n\n\t  /**\n\t   * Copies properties of `source` to `object`.\n\t   *\n\t   * @private\n\t   * @param {Object} source The object to copy properties from.\n\t   * @param {Array} props The property identifiers to copy.\n\t   * @param {Object} [object={}] The object to copy properties to.\n\t   * @param {Function} [customizer] The function to customize copied values.\n\t   * @returns {Object} Returns `object`.\n\t   */\n\t  function copyObject(source, props, object, customizer) {\n\t    var isNew = !object;\n\t    object || (object = {});\n\n\t    var index = -1,\n\t        length = props.length;\n\n\t    while (++index < length) {\n\t      var key = props[index];\n\n\t      var newValue = customizer\n\t        ? customizer(object[key], source[key], key, object, source)\n\t        : undefined;\n\n\t      if (newValue === undefined) {\n\t        newValue = source[key];\n\t      }\n\t      if (isNew) {\n\t        _baseAssignValue(object, key, newValue);\n\t      } else {\n\t        _assignValue(object, key, newValue);\n\t      }\n\t    }\n\t    return object;\n\t  }\n\n\t  var _copyObject = copyObject;\n\n\t  /**\n\t   * The base implementation of `_.times` without support for iteratee shorthands\n\t   * or max array length checks.\n\t   *\n\t   * @private\n\t   * @param {number} n The number of times to invoke `iteratee`.\n\t   * @param {Function} iteratee The function invoked per iteration.\n\t   * @returns {Array} Returns the array of results.\n\t   */\n\t  function baseTimes(n, iteratee) {\n\t    var index = -1,\n\t        result = Array(n);\n\n\t    while (++index < n) {\n\t      result[index] = iteratee(index);\n\t    }\n\t    return result;\n\t  }\n\n\t  var _baseTimes = baseTimes;\n\n\t  /** Used as references for various `Number` constants. */\n\t  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n\t  /** Used to detect unsigned integer values. */\n\t  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n\t  /**\n\t   * Checks if `value` is a valid array-like index.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to check.\n\t   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t   */\n\t  function isIndex(value, length) {\n\t    var type = typeof value;\n\t    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n\n\t    return !!length &&\n\t      (type == 'number' ||\n\t        (type != 'symbol' && reIsUint.test(value))) &&\n\t          (value > -1 && value % 1 == 0 && value < length);\n\t  }\n\n\t  var _isIndex = isIndex;\n\n\t  /** Used for built-in method references. */\n\t  var objectProto$9 = Object.prototype;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty$7 = objectProto$9.hasOwnProperty;\n\n\t  /**\n\t   * Creates an array of the enumerable property names of the array-like `value`.\n\t   *\n\t   * @private\n\t   * @param {*} value The value to query.\n\t   * @param {boolean} inherited Specify returning inherited property names.\n\t   * @returns {Array} Returns the array of property names.\n\t   */\n\t  function arrayLikeKeys(value, inherited) {\n\t    var isArr = isArray_1(value),\n\t        isArg = !isArr && isArguments_1(value),\n\t        isBuff = !isArr && !isArg && isBuffer_1(value),\n\t        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),\n\t        skipIndexes = isArr || isArg || isBuff || isType,\n\t        result = skipIndexes ? _baseTimes(value.length, String) : [],\n\t        length = result.length;\n\n\t    for (var key in value) {\n\t      if ((inherited || hasOwnProperty$7.call(value, key)) &&\n\t          !(skipIndexes && (\n\t             // Safari 9 has enumerable `arguments.length` in strict mode.\n\t             key == 'length' ||\n\t             // Node.js 0.10 has enumerable non-index properties on buffers.\n\t             (isBuff && (key == 'offset' || key == 'parent')) ||\n\t             // PhantomJS 2 has enumerable non-index properties on typed arrays.\n\t             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n\t             // Skip index properties.\n\t             _isIndex(key, length)\n\t          ))) {\n\t        result.push(key);\n\t      }\n\t    }\n\t    return result;\n\t  }\n\n\t  var _arrayLikeKeys = arrayLikeKeys;\n\n\t  /**\n\t   * This function is like\n\t   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n\t   * except that it includes inherited enumerable properties.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names.\n\t   */\n\t  function nativeKeysIn(object) {\n\t    var result = [];\n\t    if (object != null) {\n\t      for (var key in Object(object)) {\n\t        result.push(key);\n\t      }\n\t    }\n\t    return result;\n\t  }\n\n\t  var _nativeKeysIn = nativeKeysIn;\n\n\t  /** Used for built-in method references. */\n\t  var objectProto$10 = Object.prototype;\n\n\t  /** Used to check objects for own properties. */\n\t  var hasOwnProperty$8 = objectProto$10.hasOwnProperty;\n\n\t  /**\n\t   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n\t   *\n\t   * @private\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names.\n\t   */\n\t  function baseKeysIn(object) {\n\t    if (!isObject_1(object)) {\n\t      return _nativeKeysIn(object);\n\t    }\n\t    var isProto = _isPrototype(object),\n\t        result = [];\n\n\t    for (var key in object) {\n\t      if (!(key == 'constructor' && (isProto || !hasOwnProperty$8.call(object, key)))) {\n\t        result.push(key);\n\t      }\n\t    }\n\t    return result;\n\t  }\n\n\t  var _baseKeysIn = baseKeysIn;\n\n\t  /**\n\t   * Creates an array of the own and inherited enumerable property names of `object`.\n\t   *\n\t   * **Note:** Non-object values are coerced to objects.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 3.0.0\n\t   * @category Object\n\t   * @param {Object} object The object to query.\n\t   * @returns {Array} Returns the array of property names.\n\t   * @example\n\t   *\n\t   * function Foo() {\n\t   *   this.a = 1;\n\t   *   this.b = 2;\n\t   * }\n\t   *\n\t   * Foo.prototype.c = 3;\n\t   *\n\t   * _.keysIn(new Foo);\n\t   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n\t   */\n\t  function keysIn(object) {\n\t    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);\n\t  }\n\n\t  var keysIn_1 = keysIn;\n\n\t  /**\n\t   * Converts `value` to a plain object flattening inherited enumerable string\n\t   * keyed properties of `value` to own properties of the plain object.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 3.0.0\n\t   * @category Lang\n\t   * @param {*} value The value to convert.\n\t   * @returns {Object} Returns the converted plain object.\n\t   * @example\n\t   *\n\t   * function Foo() {\n\t   *   this.b = 2;\n\t   * }\n\t   *\n\t   * Foo.prototype.c = 3;\n\t   *\n\t   * _.assign({ 'a': 1 }, new Foo);\n\t   * // => { 'a': 1, 'b': 2 }\n\t   *\n\t   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n\t   * // => { 'a': 1, 'b': 2, 'c': 3 }\n\t   */\n\t  function toPlainObject(value) {\n\t    return _copyObject(value, keysIn_1(value));\n\t  }\n\n\t  var toPlainObject_1 = toPlainObject;\n\n\t  /**\n\t   * A specialized version of `baseMerge` for arrays and objects which performs\n\t   * deep merges and tracks traversed objects enabling objects with circular\n\t   * references to be merged.\n\t   *\n\t   * @private\n\t   * @param {Object} object The destination object.\n\t   * @param {Object} source The source object.\n\t   * @param {string} key The key of the value to merge.\n\t   * @param {number} srcIndex The index of `source`.\n\t   * @param {Function} mergeFunc The function to merge values.\n\t   * @param {Function} [customizer] The function to customize assigned values.\n\t   * @param {Object} [stack] Tracks traversed source values and their merged\n\t   *  counterparts.\n\t   */\n\t  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n\t    var objValue = _safeGet(object, key),\n\t        srcValue = _safeGet(source, key),\n\t        stacked = stack.get(srcValue);\n\n\t    if (stacked) {\n\t      _assignMergeValue(object, key, stacked);\n\t      return;\n\t    }\n\t    var newValue = customizer\n\t      ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n\t      : undefined;\n\n\t    var isCommon = newValue === undefined;\n\n\t    if (isCommon) {\n\t      var isArr = isArray_1(srcValue),\n\t          isBuff = !isArr && isBuffer_1(srcValue),\n\t          isTyped = !isArr && !isBuff && isTypedArray_1(srcValue);\n\n\t      newValue = srcValue;\n\t      if (isArr || isBuff || isTyped) {\n\t        if (isArray_1(objValue)) {\n\t          newValue = objValue;\n\t        }\n\t        else if (isArrayLikeObject_1(objValue)) {\n\t          newValue = _copyArray(objValue);\n\t        }\n\t        else if (isBuff) {\n\t          isCommon = false;\n\t          newValue = _cloneBuffer(srcValue, true);\n\t        }\n\t        else if (isTyped) {\n\t          isCommon = false;\n\t          newValue = _cloneTypedArray(srcValue, true);\n\t        }\n\t        else {\n\t          newValue = [];\n\t        }\n\t      }\n\t      else if (isPlainObject_1(srcValue) || isArguments_1(srcValue)) {\n\t        newValue = objValue;\n\t        if (isArguments_1(objValue)) {\n\t          newValue = toPlainObject_1(objValue);\n\t        }\n\t        else if (!isObject_1(objValue) || (srcIndex && isFunction_1(objValue))) {\n\t          newValue = _initCloneObject(srcValue);\n\t        }\n\t      }\n\t      else {\n\t        isCommon = false;\n\t      }\n\t    }\n\t    if (isCommon) {\n\t      // Recursively merge objects and arrays (susceptible to call stack limits).\n\t      stack.set(srcValue, newValue);\n\t      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n\t      stack['delete'](srcValue);\n\t    }\n\t    _assignMergeValue(object, key, newValue);\n\t  }\n\n\t  var _baseMergeDeep = baseMergeDeep;\n\n\t  /**\n\t   * The base implementation of `_.merge` without support for multiple sources.\n\t   *\n\t   * @private\n\t   * @param {Object} object The destination object.\n\t   * @param {Object} source The source object.\n\t   * @param {number} srcIndex The index of `source`.\n\t   * @param {Function} [customizer] The function to customize merged values.\n\t   * @param {Object} [stack] Tracks traversed source values and their merged\n\t   *  counterparts.\n\t   */\n\t  function baseMerge(object, source, srcIndex, customizer, stack) {\n\t    if (object === source) {\n\t      return;\n\t    }\n\t    _baseFor(source, function(srcValue, key) {\n\t      if (isObject_1(srcValue)) {\n\t        stack || (stack = new _Stack);\n\t        _baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n\t      }\n\t      else {\n\t        var newValue = customizer\n\t          ? customizer(_safeGet(object, key), srcValue, (key + ''), object, source, stack)\n\t          : undefined;\n\n\t        if (newValue === undefined) {\n\t          newValue = srcValue;\n\t        }\n\t        _assignMergeValue(object, key, newValue);\n\t      }\n\t    }, keysIn_1);\n\t  }\n\n\t  var _baseMerge = baseMerge;\n\n\t  /**\n\t   * This method returns the first argument it receives.\n\t   *\n\t   * @static\n\t   * @since 0.1.0\n\t   * @memberOf _\n\t   * @category Util\n\t   * @param {*} value Any value.\n\t   * @returns {*} Returns `value`.\n\t   * @example\n\t   *\n\t   * var object = { 'a': 1 };\n\t   *\n\t   * console.log(_.identity(object) === object);\n\t   * // => true\n\t   */\n\t  function identity(value) {\n\t    return value;\n\t  }\n\n\t  var identity_1 = identity;\n\n\t  /**\n\t   * A faster alternative to `Function#apply`, this function invokes `func`\n\t   * with the `this` binding of `thisArg` and the arguments of `args`.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to invoke.\n\t   * @param {*} thisArg The `this` binding of `func`.\n\t   * @param {Array} args The arguments to invoke `func` with.\n\t   * @returns {*} Returns the result of `func`.\n\t   */\n\t  function apply(func, thisArg, args) {\n\t    switch (args.length) {\n\t      case 0: return func.call(thisArg);\n\t      case 1: return func.call(thisArg, args[0]);\n\t      case 2: return func.call(thisArg, args[0], args[1]);\n\t      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n\t    }\n\t    return func.apply(thisArg, args);\n\t  }\n\n\t  var _apply = apply;\n\n\t  /* Built-in method references for those with the same name as other `lodash` methods. */\n\t  var nativeMax = Math.max;\n\n\t  /**\n\t   * A specialized version of `baseRest` which transforms the rest array.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to apply a rest parameter to.\n\t   * @param {number} [start=func.length-1] The start position of the rest parameter.\n\t   * @param {Function} transform The rest array transform.\n\t   * @returns {Function} Returns the new function.\n\t   */\n\t  function overRest(func, start, transform) {\n\t    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n\t    return function() {\n\t      var args = arguments,\n\t          index = -1,\n\t          length = nativeMax(args.length - start, 0),\n\t          array = Array(length);\n\n\t      while (++index < length) {\n\t        array[index] = args[start + index];\n\t      }\n\t      index = -1;\n\t      var otherArgs = Array(start + 1);\n\t      while (++index < start) {\n\t        otherArgs[index] = args[index];\n\t      }\n\t      otherArgs[start] = transform(array);\n\t      return _apply(func, this, otherArgs);\n\t    };\n\t  }\n\n\t  var _overRest = overRest;\n\n\t  /**\n\t   * Creates a function that returns `value`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 2.4.0\n\t   * @category Util\n\t   * @param {*} value The value to return from the new function.\n\t   * @returns {Function} Returns the new constant function.\n\t   * @example\n\t   *\n\t   * var objects = _.times(2, _.constant({ 'a': 1 }));\n\t   *\n\t   * console.log(objects);\n\t   * // => [{ 'a': 1 }, { 'a': 1 }]\n\t   *\n\t   * console.log(objects[0] === objects[1]);\n\t   * // => true\n\t   */\n\t  function constant(value) {\n\t    return function() {\n\t      return value;\n\t    };\n\t  }\n\n\t  var constant_1 = constant;\n\n\t  /**\n\t   * The base implementation of `setToString` without support for hot loop shorting.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to modify.\n\t   * @param {Function} string The `toString` result.\n\t   * @returns {Function} Returns `func`.\n\t   */\n\t  var baseSetToString = !_defineProperty ? identity_1 : function(func, string) {\n\t    return _defineProperty(func, 'toString', {\n\t      'configurable': true,\n\t      'enumerable': false,\n\t      'value': constant_1(string),\n\t      'writable': true\n\t    });\n\t  };\n\n\t  var _baseSetToString = baseSetToString;\n\n\t  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n\t  var HOT_COUNT = 800,\n\t      HOT_SPAN = 16;\n\n\t  /* Built-in method references for those with the same name as other `lodash` methods. */\n\t  var nativeNow = Date.now;\n\n\t  /**\n\t   * Creates a function that'll short out and invoke `identity` instead\n\t   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n\t   * milliseconds.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to restrict.\n\t   * @returns {Function} Returns the new shortable function.\n\t   */\n\t  function shortOut(func) {\n\t    var count = 0,\n\t        lastCalled = 0;\n\n\t    return function() {\n\t      var stamp = nativeNow(),\n\t          remaining = HOT_SPAN - (stamp - lastCalled);\n\n\t      lastCalled = stamp;\n\t      if (remaining > 0) {\n\t        if (++count >= HOT_COUNT) {\n\t          return arguments[0];\n\t        }\n\t      } else {\n\t        count = 0;\n\t      }\n\t      return func.apply(undefined, arguments);\n\t    };\n\t  }\n\n\t  var _shortOut = shortOut;\n\n\t  /**\n\t   * Sets the `toString` method of `func` to return `string`.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to modify.\n\t   * @param {Function} string The `toString` result.\n\t   * @returns {Function} Returns `func`.\n\t   */\n\t  var setToString = _shortOut(_baseSetToString);\n\n\t  var _setToString = setToString;\n\n\t  /**\n\t   * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n\t   *\n\t   * @private\n\t   * @param {Function} func The function to apply a rest parameter to.\n\t   * @param {number} [start=func.length-1] The start position of the rest parameter.\n\t   * @returns {Function} Returns the new function.\n\t   */\n\t  function baseRest(func, start) {\n\t    return _setToString(_overRest(func, start, identity_1), func + '');\n\t  }\n\n\t  var _baseRest = baseRest;\n\n\t  /**\n\t   * Checks if the given arguments are from an iteratee call.\n\t   *\n\t   * @private\n\t   * @param {*} value The potential iteratee value argument.\n\t   * @param {*} index The potential iteratee index or key argument.\n\t   * @param {*} object The potential iteratee object argument.\n\t   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n\t   *  else `false`.\n\t   */\n\t  function isIterateeCall(value, index, object) {\n\t    if (!isObject_1(object)) {\n\t      return false;\n\t    }\n\t    var type = typeof index;\n\t    if (type == 'number'\n\t          ? (isArrayLike_1(object) && _isIndex(index, object.length))\n\t          : (type == 'string' && index in object)\n\t        ) {\n\t      return eq_1(object[index], value);\n\t    }\n\t    return false;\n\t  }\n\n\t  var _isIterateeCall = isIterateeCall;\n\n\t  /**\n\t   * Creates a function like `_.assign`.\n\t   *\n\t   * @private\n\t   * @param {Function} assigner The function to assign values.\n\t   * @returns {Function} Returns the new assigner function.\n\t   */\n\t  function createAssigner(assigner) {\n\t    return _baseRest(function(object, sources) {\n\t      var index = -1,\n\t          length = sources.length,\n\t          customizer = length > 1 ? sources[length - 1] : undefined,\n\t          guard = length > 2 ? sources[2] : undefined;\n\n\t      customizer = (assigner.length > 3 && typeof customizer == 'function')\n\t        ? (length--, customizer)\n\t        : undefined;\n\n\t      if (guard && _isIterateeCall(sources[0], sources[1], guard)) {\n\t        customizer = length < 3 ? undefined : customizer;\n\t        length = 1;\n\t      }\n\t      object = Object(object);\n\t      while (++index < length) {\n\t        var source = sources[index];\n\t        if (source) {\n\t          assigner(object, source, index, customizer);\n\t        }\n\t      }\n\t      return object;\n\t    });\n\t  }\n\n\t  var _createAssigner = createAssigner;\n\n\t  /**\n\t   * This method is like `_.assign` except that it recursively merges own and\n\t   * inherited enumerable string keyed properties of source objects into the\n\t   * destination object. Source properties that resolve to `undefined` are\n\t   * skipped if a destination value exists. Array and plain object properties\n\t   * are merged recursively. Other objects and value types are overridden by\n\t   * assignment. Source objects are applied from left to right. Subsequent\n\t   * sources overwrite property assignments of previous sources.\n\t   *\n\t   * **Note:** This method mutates `object`.\n\t   *\n\t   * @static\n\t   * @memberOf _\n\t   * @since 0.5.0\n\t   * @category Object\n\t   * @param {Object} object The destination object.\n\t   * @param {...Object} [sources] The source objects.\n\t   * @returns {Object} Returns `object`.\n\t   * @example\n\t   *\n\t   * var object = {\n\t   *   'a': [{ 'b': 2 }, { 'd': 4 }]\n\t   * };\n\t   *\n\t   * var other = {\n\t   *   'a': [{ 'c': 3 }, { 'e': 5 }]\n\t   * };\n\t   *\n\t   * _.merge(object, other);\n\t   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n\t   */\n\t  var merge = _createAssigner(function(object, source, srcIndex) {\n\t    _baseMerge(object, source, srcIndex);\n\t  });\n\n\t  var merge_1 = merge;\n\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  var script = {};\n\n\t  /* script */\n\t              var __vue_script__ = script;\n\t              \n\t  /* template */\n\t  var __vue_render__ = function() {\n\t    var _vm = this;\n\t    var _h = _vm.$createElement;\n\t    var _c = _vm._self._c || _h;\n\t    return _c(\"div\", { staticClass: \"dialog-layout\" }, [_vm._t(\"default\")], 2)\n\t  };\n\t  var __vue_staticRenderFns__ = [];\n\t  __vue_render__._withStripped = true;\n\n\t    /* style */\n\t    var __vue_inject_styles__ = undefined;\n\t    /* scoped */\n\t    var __vue_scope_id__ = undefined;\n\t    /* module identifier */\n\t    var __vue_module_identifier__ = undefined;\n\t    /* functional template */\n\t    var __vue_is_functional_template__ = false;\n\t    /* component normalizer */\n\t    function __vue_normalize__(\n\t      template, style, script$$1,\n\t      scope, functional, moduleIdentifier,\n\t      createInjector, createInjectorSSR\n\t    ) {\n\t      var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};\n\n\t      // For security concerns, we use only base name in production mode.\n\t      component.__file = \"/Users/yarik/Projects/clones/vuedl/src/components/DefaultLayout.vue\";\n\n\t      if (!component.render) {\n\t        component.render = template.render;\n\t        component.staticRenderFns = template.staticRenderFns;\n\t        component._compiled = true;\n\n\t        if (functional) { component.functional = true; }\n\t      }\n\n\t      component._scopeId = scope;\n\n\t      \n\n\t      return component\n\t    }\n\t    /* style inject */\n\t    function __vue_create_injector__() {\n\t      var head = document.head || document.getElementsByTagName('head')[0];\n\t      var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});\n\t      var isOldIE =\n\t        typeof navigator !== 'undefined' &&\n\t        /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t      return function addStyle(id, css) {\n\t        if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t        var group = isOldIE ? css.media || 'default' : id;\n\t        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t        if (!style.ids.includes(id)) {\n\t          var code = css.source;\n\t          var index = style.ids.length;\n\n\t          style.ids.push(id);\n\n\t          if (isOldIE) {\n\t            style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t          }\n\n\t          if (!style.element) {\n\t            var el = style.element = document.createElement('style');\n\t            el.type = 'text/css';\n\n\t            if (css.media) { el.setAttribute('media', css.media); }\n\t            if (isOldIE) {\n\t              el.setAttribute('data-group', group);\n\t              el.setAttribute('data-next-index', '0');\n\t            }\n\n\t            head.appendChild(el);\n\t          }\n\n\t          if (isOldIE) {\n\t            index = parseInt(style.element.getAttribute('data-next-index'));\n\t            style.element.setAttribute('data-next-index', index + 1);\n\t          }\n\n\t          if (style.element.styleSheet) {\n\t            style.parts.push(code);\n\t            style.element.styleSheet.cssText = style.parts\n\t              .filter(Boolean)\n\t              .join('\\n');\n\t          } else {\n\t            var textNode = document.createTextNode(code);\n\t            var nodes = style.element.childNodes;\n\t            if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t            else { style.element.appendChild(textNode); }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /* style inject SSR */\n\t    \n\n\t    \n\t    var DefaultLayout = __vue_normalize__(\n\t      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },\n\t      __vue_inject_styles__,\n\t      __vue_script__,\n\t      __vue_scope_id__,\n\t      __vue_is_functional_template__,\n\t      __vue_module_identifier__,\n\t      __vue_create_injector__,\n\t      undefined\n\t    );\n\n\t  /*\n\t   * vuedl\n\t   *\n\t   * (c) Savaryn Yaroslav <yariksav@gmail.com>\n\t   *\n\t   * Some functions was imported from nuxt.js/lib/app/utils.js\n\t   * For the full copyright and license information, please view the LICENSE\n\t   * file that was distributed with this source code.\n\t  */\n\n\t  var noopData = function () { return ({}); };\n\n\t  function promisify(fn, context) {\n\t    var promise;\n\n\t    if (fn.length === 2) {\n\t      // fn(context, callback)\n\t      promise = new Promise(function (resolve) {\n\t        fn(context, function (err, data) {\n\t          if (err) {\n\t            context.error(err);\n\t          }\n\n\t          data = data || {};\n\t          resolve(data);\n\t        });\n\t      });\n\t    } else {\n\t      promise = fn(context);\n\t    }\n\n\t    if (!promise || !(promise instanceof Promise) && typeof promise.then !== 'function') {\n\t      promise = Promise.resolve(promise);\n\t    }\n\n\t    return promise;\n\t  }\n\t  function destroyVueElement(vm) {\n\t    if (vm && !vm._isDestroyed && typeof vm.$destroy === 'function') {\n\t      vm.$destroy();\n\t    }\n\t  }\n\t  function findContainer(container) {\n\t    var found;\n\n\t    if (typeof container === 'string') {\n\t      found = document.querySelector(container);\n\t    } else {\n\t      found = container;\n\t    }\n\n\t    if (!found) {\n\t      found = document.body;\n\t    }\n\n\t    return found;\n\t  }\n\t  function applyAsyncData(Component, asyncData) {\n\t    var ComponentData = Component.options.data || noopData; // Prevent calling this method for each request on SSR context\n\n\t    if (!asyncData && Component.options.hasAsyncData) {\n\t      return;\n\t    }\n\n\t    Component.options.hasAsyncData = true;\n\n\t    Component.options.data = function () {\n\t      var data = ComponentData.call(this);\n\n\t      if (this.$ssrContext) {\n\t        asyncData = this.$ssrContext.asyncData[Component.cid];\n\t      }\n\n\t      return Object.assign({}, data, asyncData);\n\t    };\n\n\t    if (Component._Ctor && Component._Ctor.options) {\n\t      Component._Ctor.options.data = Component.options.data;\n\t    }\n\t  }\n\t  function ensureAsyncDatas(components, context) {\n\t    return new Promise(function ($return, $error) {\n\t      if (!Array.isArray(components)) {\n\t        if (!components) {\n\t          return $return(null);\n\t        } else {\n\t          components = [components];\n\t        }\n\t      }\n\n\t      return $return(Promise.all(components.map(function (Component) {\n\t        var promises = []; // Call asyncData(context)\n\n\t        if (Component.options.asyncData && typeof Component.options.asyncData === 'function') {\n\t          var promise = promisify(Component.options.asyncData, context);\n\t          promise.then(function (asyncDataResult) {\n\t            // ssrContext.asyncData[Component.cid] = asyncDataResult\n\t            applyAsyncData(Component, asyncDataResult);\n\t            return asyncDataResult;\n\t          });\n\t          promises.push(promise);\n\t        } else {\n\t          promises.push(null);\n\t        } // Call fetch(context)\n\n\n\t        if (Component.options.fetch) {\n\t          promises.push(Component.options.fetch(context));\n\t        } else {\n\t          promises.push(null);\n\t        }\n\n\t        return Promise.all(promises);\n\t      })));\n\t    });\n\t  }\n\n\t  /**\n\t   * Helpers.\n\t   */\n\n\t  var s = 1000;\n\t  var m = s * 60;\n\t  var h = m * 60;\n\t  var d = h * 24;\n\t  var y = d * 365.25;\n\n\t  /**\n\t   * Parse or format the given `val`.\n\t   *\n\t   * Options:\n\t   *\n\t   *  - `long` verbose formatting [false]\n\t   *\n\t   * @param {String|Number} val\n\t   * @param {Object} [options]\n\t   * @throws {Error} throw an error if val is not a non-empty string or a number\n\t   * @return {String|Number}\n\t   * @api public\n\t   */\n\n\t  var ms = function(val, options) {\n\t    options = options || {};\n\t    var type = typeof val;\n\t    if (type === 'string' && val.length > 0) {\n\t      return parse(val);\n\t    } else if (type === 'number' && isNaN(val) === false) {\n\t      return options.long ? fmtLong(val) : fmtShort(val);\n\t    }\n\t    throw new Error(\n\t      'val is not a non-empty string or a valid number. val=' +\n\t        JSON.stringify(val)\n\t    );\n\t  };\n\n\t  /**\n\t   * Parse the given `str` and return milliseconds.\n\t   *\n\t   * @param {String} str\n\t   * @return {Number}\n\t   * @api private\n\t   */\n\n\t  function parse(str) {\n\t    str = String(str);\n\t    if (str.length > 100) {\n\t      return;\n\t    }\n\t    var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n\t      str\n\t    );\n\t    if (!match) {\n\t      return;\n\t    }\n\t    var n = parseFloat(match[1]);\n\t    var type = (match[2] || 'ms').toLowerCase();\n\t    switch (type) {\n\t      case 'years':\n\t      case 'year':\n\t      case 'yrs':\n\t      case 'yr':\n\t      case 'y':\n\t        return n * y;\n\t      case 'days':\n\t      case 'day':\n\t      case 'd':\n\t        return n * d;\n\t      case 'hours':\n\t      case 'hour':\n\t      case 'hrs':\n\t      case 'hr':\n\t      case 'h':\n\t        return n * h;\n\t      case 'minutes':\n\t      case 'minute':\n\t      case 'mins':\n\t      case 'min':\n\t      case 'm':\n\t        return n * m;\n\t      case 'seconds':\n\t      case 'second':\n\t      case 'secs':\n\t      case 'sec':\n\t      case 's':\n\t        return n * s;\n\t      case 'milliseconds':\n\t      case 'millisecond':\n\t      case 'msecs':\n\t      case 'msec':\n\t      case 'ms':\n\t        return n;\n\t      default:\n\t        return undefined;\n\t    }\n\t  }\n\n\t  /**\n\t   * Short format for `ms`.\n\t   *\n\t   * @param {Number} ms\n\t   * @return {String}\n\t   * @api private\n\t   */\n\n\t  function fmtShort(ms) {\n\t    if (ms >= d) {\n\t      return Math.round(ms / d) + 'd';\n\t    }\n\t    if (ms >= h) {\n\t      return Math.round(ms / h) + 'h';\n\t    }\n\t    if (ms >= m) {\n\t      return Math.round(ms / m) + 'm';\n\t    }\n\t    if (ms >= s) {\n\t      return Math.round(ms / s) + 's';\n\t    }\n\t    return ms + 'ms';\n\t  }\n\n\t  /**\n\t   * Long format for `ms`.\n\t   *\n\t   * @param {Number} ms\n\t   * @return {String}\n\t   * @api private\n\t   */\n\n\t  function fmtLong(ms) {\n\t    return plural(ms, d, 'day') ||\n\t      plural(ms, h, 'hour') ||\n\t      plural(ms, m, 'minute') ||\n\t      plural(ms, s, 'second') ||\n\t      ms + ' ms';\n\t  }\n\n\t  /**\n\t   * Pluralization helper.\n\t   */\n\n\t  function plural(ms, n, name) {\n\t    if (ms < n) {\n\t      return;\n\t    }\n\t    if (ms < n * 1.5) {\n\t      return Math.floor(ms / n) + ' ' + name;\n\t    }\n\t    return Math.ceil(ms / n) + ' ' + name + 's';\n\t  }\n\n\t  var debug = createCommonjsModule$$1(function (module, exports) {\n\t  /**\n\t   * This is the common logic for both the Node.js and web browser\n\t   * implementations of `debug()`.\n\t   *\n\t   * Expose `debug()` as the module.\n\t   */\n\n\t  exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\n\t  exports.coerce = coerce;\n\t  exports.disable = disable;\n\t  exports.enable = enable;\n\t  exports.enabled = enabled;\n\t  exports.humanize = ms;\n\n\t  /**\n\t   * Active `debug` instances.\n\t   */\n\t  exports.instances = [];\n\n\t  /**\n\t   * The currently active debug mode names, and names to skip.\n\t   */\n\n\t  exports.names = [];\n\t  exports.skips = [];\n\n\t  /**\n\t   * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t   *\n\t   * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t   */\n\n\t  exports.formatters = {};\n\n\t  /**\n\t   * Select a color.\n\t   * @param {String} namespace\n\t   * @return {Number}\n\t   * @api private\n\t   */\n\n\t  function selectColor(namespace) {\n\t    var hash = 0, i;\n\n\t    for (i in namespace) {\n\t      hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t      hash |= 0; // Convert to 32bit integer\n\t    }\n\n\t    return exports.colors[Math.abs(hash) % exports.colors.length];\n\t  }\n\n\t  /**\n\t   * Create a debugger with the given `namespace`.\n\t   *\n\t   * @param {String} namespace\n\t   * @return {Function}\n\t   * @api public\n\t   */\n\n\t  function createDebug(namespace) {\n\n\t    var prevTime;\n\n\t    function debug() {\n\t      // disabled?\n\t      if (!debug.enabled) return;\n\n\t      var self = debug;\n\n\t      // set `diff` timestamp\n\t      var curr = +new Date();\n\t      var ms$$1 = curr - (prevTime || curr);\n\t      self.diff = ms$$1;\n\t      self.prev = prevTime;\n\t      self.curr = curr;\n\t      prevTime = curr;\n\n\t      // turn the `arguments` into a proper Array\n\t      var args = new Array(arguments.length);\n\t      for (var i = 0; i < args.length; i++) {\n\t        args[i] = arguments[i];\n\t      }\n\n\t      args[0] = exports.coerce(args[0]);\n\n\t      if ('string' !== typeof args[0]) {\n\t        // anything else let's inspect with %O\n\t        args.unshift('%O');\n\t      }\n\n\t      // apply any `formatters` transformations\n\t      var index = 0;\n\t      args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n\t        // if we encounter an escaped % then don't increase the array index\n\t        if (match === '%%') return match;\n\t        index++;\n\t        var formatter = exports.formatters[format];\n\t        if ('function' === typeof formatter) {\n\t          var val = args[index];\n\t          match = formatter.call(self, val);\n\n\t          // now we need to remove `args[index]` since it's inlined in the `format`\n\t          args.splice(index, 1);\n\t          index--;\n\t        }\n\t        return match;\n\t      });\n\n\t      // apply env-specific formatting (colors, etc.)\n\t      exports.formatArgs.call(self, args);\n\n\t      var logFn = debug.log || exports.log || console.log.bind(console);\n\t      logFn.apply(self, args);\n\t    }\n\n\t    debug.namespace = namespace;\n\t    debug.enabled = exports.enabled(namespace);\n\t    debug.useColors = exports.useColors();\n\t    debug.color = selectColor(namespace);\n\t    debug.destroy = destroy;\n\n\t    // env-specific initialization logic for debug instances\n\t    if ('function' === typeof exports.init) {\n\t      exports.init(debug);\n\t    }\n\n\t    exports.instances.push(debug);\n\n\t    return debug;\n\t  }\n\n\t  function destroy () {\n\t    var index = exports.instances.indexOf(this);\n\t    if (index !== -1) {\n\t      exports.instances.splice(index, 1);\n\t      return true;\n\t    } else {\n\t      return false;\n\t    }\n\t  }\n\n\t  /**\n\t   * Enables a debug mode by namespaces. This can include modes\n\t   * separated by a colon and wildcards.\n\t   *\n\t   * @param {String} namespaces\n\t   * @api public\n\t   */\n\n\t  function enable(namespaces) {\n\t    exports.save(namespaces);\n\n\t    exports.names = [];\n\t    exports.skips = [];\n\n\t    var i;\n\t    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t    var len = split.length;\n\n\t    for (i = 0; i < len; i++) {\n\t      if (!split[i]) continue; // ignore empty strings\n\t      namespaces = split[i].replace(/\\*/g, '.*?');\n\t      if (namespaces[0] === '-') {\n\t        exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t      } else {\n\t        exports.names.push(new RegExp('^' + namespaces + '$'));\n\t      }\n\t    }\n\n\t    for (i = 0; i < exports.instances.length; i++) {\n\t      var instance = exports.instances[i];\n\t      instance.enabled = exports.enabled(instance.namespace);\n\t    }\n\t  }\n\n\t  /**\n\t   * Disable debug output.\n\t   *\n\t   * @api public\n\t   */\n\n\t  function disable() {\n\t    exports.enable('');\n\t  }\n\n\t  /**\n\t   * Returns true if the given mode name is enabled, false otherwise.\n\t   *\n\t   * @param {String} name\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\n\t  function enabled(name) {\n\t    if (name[name.length - 1] === '*') {\n\t      return true;\n\t    }\n\t    var i, len;\n\t    for (i = 0, len = exports.skips.length; i < len; i++) {\n\t      if (exports.skips[i].test(name)) {\n\t        return false;\n\t      }\n\t    }\n\t    for (i = 0, len = exports.names.length; i < len; i++) {\n\t      if (exports.names[i].test(name)) {\n\t        return true;\n\t      }\n\t    }\n\t    return false;\n\t  }\n\n\t  /**\n\t   * Coerce `val`.\n\t   *\n\t   * @param {Mixed} val\n\t   * @return {Mixed}\n\t   * @api private\n\t   */\n\n\t  function coerce(val) {\n\t    if (val instanceof Error) return val.stack || val.message;\n\t    return val;\n\t  }\n\t  });\n\t  var debug_1 = debug.coerce;\n\t  var debug_2 = debug.disable;\n\t  var debug_3 = debug.enable;\n\t  var debug_4 = debug.enabled;\n\t  var debug_5 = debug.humanize;\n\t  var debug_6 = debug.instances;\n\t  var debug_7 = debug.names;\n\t  var debug_8 = debug.skips;\n\t  var debug_9 = debug.formatters;\n\n\t  var browser = createCommonjsModule$$1(function (module, exports) {\n\t  /**\n\t   * This is the web browser implementation of `debug()`.\n\t   *\n\t   * Expose `debug()` as the module.\n\t   */\n\n\t  exports = module.exports = debug;\n\t  exports.log = log;\n\t  exports.formatArgs = formatArgs;\n\t  exports.save = save;\n\t  exports.load = load;\n\t  exports.useColors = useColors;\n\t  exports.storage = 'undefined' != typeof chrome\n\t                 && 'undefined' != typeof chrome.storage\n\t                    ? chrome.storage.local\n\t                    : localstorage();\n\n\t  /**\n\t   * Colors.\n\t   */\n\n\t  exports.colors = [\n\t    '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',\n\t    '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',\n\t    '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',\n\t    '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',\n\t    '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',\n\t    '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',\n\t    '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',\n\t    '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',\n\t    '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',\n\t    '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',\n\t    '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'\n\t  ];\n\n\t  /**\n\t   * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n\t   * and the Firebug extension (any Firefox version) are known\n\t   * to support \"%c\" CSS customizations.\n\t   *\n\t   * TODO: add a `localStorage` variable to explicitly enable/disable colors\n\t   */\n\n\t  function useColors() {\n\t    // NB: In an Electron preload script, document will be defined but not fully\n\t    // initialized. Since we know we're in Chrome, we'll just detect this case\n\t    // explicitly\n\t    if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n\t      return true;\n\t    }\n\n\t    // Internet Explorer and Edge do not support colors.\n\t    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t      return false;\n\t    }\n\n\t    // is webkit? http://stackoverflow.com/a/16459606/376773\n\t    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\t    return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t      // is firebug? http://stackoverflow.com/a/398120/376773\n\t      (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t      // is firefox >= v31?\n\t      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t      // double check webkit in userAgent just in case we are in a worker\n\t      (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n\t  }\n\n\t  /**\n\t   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n\t   */\n\n\t  exports.formatters.j = function(v) {\n\t    try {\n\t      return JSON.stringify(v);\n\t    } catch (err) {\n\t      return '[UnexpectedJSONParseError]: ' + err.message;\n\t    }\n\t  };\n\n\n\t  /**\n\t   * Colorize log arguments if enabled.\n\t   *\n\t   * @api public\n\t   */\n\n\t  function formatArgs(args) {\n\t    var useColors = this.useColors;\n\n\t    args[0] = (useColors ? '%c' : '')\n\t      + this.namespace\n\t      + (useColors ? ' %c' : ' ')\n\t      + args[0]\n\t      + (useColors ? '%c ' : ' ')\n\t      + '+' + exports.humanize(this.diff);\n\n\t    if (!useColors) return;\n\n\t    var c = 'color: ' + this.color;\n\t    args.splice(1, 0, c, 'color: inherit');\n\n\t    // the final \"%c\" is somewhat tricky, because there could be other\n\t    // arguments passed either before or after the %c, so we need to\n\t    // figure out the correct index to insert the CSS into\n\t    var index = 0;\n\t    var lastC = 0;\n\t    args[0].replace(/%[a-zA-Z%]/g, function(match) {\n\t      if ('%%' === match) return;\n\t      index++;\n\t      if ('%c' === match) {\n\t        // we only are interested in the *last* %c\n\t        // (the user may have provided their own)\n\t        lastC = index;\n\t      }\n\t    });\n\n\t    args.splice(lastC, 0, c);\n\t  }\n\n\t  /**\n\t   * Invokes `console.log()` when available.\n\t   * No-op when `console.log` is not a \"function\".\n\t   *\n\t   * @api public\n\t   */\n\n\t  function log() {\n\t    // this hackery is required for IE8/9, where\n\t    // the `console.log` function doesn't have 'apply'\n\t    return 'object' === typeof console\n\t      && console.log\n\t      && Function.prototype.apply.call(console.log, console, arguments);\n\t  }\n\n\t  /**\n\t   * Save `namespaces`.\n\t   *\n\t   * @param {String} namespaces\n\t   * @api private\n\t   */\n\n\t  function save(namespaces) {\n\t    try {\n\t      if (null == namespaces) {\n\t        exports.storage.removeItem('debug');\n\t      } else {\n\t        exports.storage.debug = namespaces;\n\t      }\n\t    } catch(e) {}\n\t  }\n\n\t  /**\n\t   * Load `namespaces`.\n\t   *\n\t   * @return {String} returns the previously persisted debug modes\n\t   * @api private\n\t   */\n\n\t  function load() {\n\t    var r;\n\t    try {\n\t      r = exports.storage.debug;\n\t    } catch(e) {}\n\n\t    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\t    if (!r && typeof process !== 'undefined' && 'env' in process) {\n\t      r = process.env.DEBUG;\n\t    }\n\n\t    return r;\n\t  }\n\n\t  /**\n\t   * Enable namespaces listed in `localStorage.debug` initially.\n\t   */\n\n\t  exports.enable(load());\n\n\t  /**\n\t   * Localstorage attempts to return the localstorage.\n\t   *\n\t   * This is necessary because safari throws\n\t   * when a user disables cookies/localstorage\n\t   * and you attempt to access it.\n\t   *\n\t   * @return {LocalStorage}\n\t   * @api private\n\t   */\n\n\t  function localstorage() {\n\t    try {\n\t      return window.localStorage;\n\t    } catch (e) {}\n\t  }\n\t  });\n\t  var browser_1 = browser.log;\n\t  var browser_2 = browser.formatArgs;\n\t  var browser_3 = browser.save;\n\t  var browser_4 = browser.load;\n\t  var browser_5 = browser.useColors;\n\t  var browser_6 = browser.storage;\n\t  var browser_7 = browser.colors;\n\n\t  /*\n\t   * vuedl\n\t   *\n\t   * (c) Savaryn Yaroslav <yariksav@gmail.com>\n\t   *\n\t   * For the full copyright and license information, please view the LICENSE\n\t   * file that was distributed with this source code.\n\t  */\n\t  var debug$1 = browser('vuedl:dialog');\n\t  var seed = 1;\n\t  var Dialog = function Dialog(component, ref) {\n\t    if ( ref === void 0 ) ref = {};\n\t    var layout = ref.layout;\n\t    var container = ref.container;\n\n\t    if (!component) {\n\t      throw Error('Component was not setted');\n\t    }\n\n\t    this._layout = layout || {\n\t      component: DefaultLayout,\n\t      options: {}\n\t    };\n\t    this._component = component;\n\t    this._vm = null;\n\t    this._vmDialog = null;\n\t    this._options = {};\n\t    this.id = ++seed;\n\t    this._resolvers = [];\n\t    this.container = findContainer(container);\n\t    debug$1('created');\n\t  };\n\n\t  var prototypeAccessors = { showed: { configurable: true },element: { configurable: true },hasAsyncPreload: { configurable: true },vm: { configurable: true },vmd: { configurable: true } };\n\n\t  Dialog.prototype.show = function show (params, options) {\n\t      if ( params === void 0 ) params = {};\n\t      if ( options === void 0 ) options = {};\n\n\t    return new Promise(function ($return, $error) {\n\t      var LayoutCtor, layout, DialogCtor, dialog;\n\t      if (Vue.prototype.$isServer) { return $return(); }\n\t      debug$1('before show', {\n\t        params: params,\n\t        options: options\n\t      }); // create layout\n\n\t      LayoutCtor = Vue.extend(this._layout.component);\n\t      LayoutCtor = LayoutCtor.extend({\n\t        mixins: [Layoutable],\n\t        destroyed: this._onDestroyed.bind(this)\n\t      });\n\t      layout = new LayoutCtor(merge_1({\n\t        propsData: Object.assign({}, this._layout.options, params)\n\t      }, this.context, options));\n\t      DialogCtor = Vue.extend(Object.assign({}, this._component, {\n\t        parent: layout\n\t      }));\n\n\t      if (this._component.primaryKey) {\n\t        DialogCtor = DialogCtor.extend({\n\t          mixins: [Recordable]\n\t        });\n\t      }\n\n\t      if (this.hasAsyncPreload) {\n\t        var res;\n\t        return Promise.resolve(ensureAsyncDatas(DialogCtor, Object.assign({}, this.context, {\n\t          params: params\n\t        }))).then(function ($await_2) {\n\t          try {\n\t            res = $await_2;\n\t            debug$1('async datas', res);\n\t            return $If_1.call(this);\n\t          } catch ($boundEx) {\n\t            return $error($boundEx);\n\t          }\n\t        }.bind(this), $error);\n\t      }\n\n\t      function $If_1() {\n\t        dialog = new DialogCtor(merge_1({\n\t          propsData: params\n\t        }, this.context, options));\n\t        // mounting\n\t        dialog.$mount();\n\t        layout.$slots.default = dialog._vnode;\n\t        layout.$mount();\n\t        layout.$on('submit', this.onReturn.bind(this));\n\t        dialog.$on('submit', this.onReturn.bind(this));\n\t        this._vm = layout;\n\t        this._vm._dialogInstance = dialog;\n\t        this._vmDialog = dialog;\n\t        this.container = options.container ? findContainer(options.container) : this.container;\n\t        this.container.appendChild(this.element);\n\t        return $return(this);\n\t      }\n\n\t      return $If_1.call(this);\n\t    }.bind(this));\n\t  };\n\n\t  Dialog.prototype.wait = function wait () {\n\t      var this$1 = this;\n\n\t    // if (!this.showed) {\n\t    // return Promise.reject(new Error('Dialog was closed or not showed'))\n\t    // }\n\t    return new Promise(function (resolve) {\n\t      this$1._resolvers.push(resolve);\n\t    });\n\t  };\n\n\t  Dialog.prototype._onDestroyed = function _onDestroyed () {\n\t    this.remove();\n\t  };\n\n\t  Dialog.prototype.remove = function remove () {\n\t    debug$1('remove');\n\t    this.onDestroyed && this.onDestroyed(this); // this.element.parentNode.removeChild(this.element)\n\n\t    this._processResultPromises();\n\n\t    destroyVueElement(this._vm);\n\t    destroyVueElement(this._vmDialog);\n\t    this._vm = null;\n\t    this._vmDialog = null;\n\t  };\n\n\t  Dialog.prototype._processResultPromises = function _processResultPromises (result) {\n\t    if (!this._resolvers.length) {\n\t      return;\n\t    }\n\n\t    debug$1('processResultPromises', result);\n\n\t    this._resolvers.forEach(function (resolver) { return resolver(result); });\n\n\t    this._resolvers = [];\n\t  };\n\n\t  Dialog.prototype.onReturn = function onReturn (result) {\n\t    debug$1('onReturn', result);\n\n\t    this._processResultPromises(result);\n\n\t    this.close();\n\t  };\n\n\t  prototypeAccessors.showed.get = function () {\n\t    return !!this._vm && !this._vm._isDestroyed;\n\t  };\n\n\t  prototypeAccessors.element.get = function () {\n\t    return this._vm && this._vm.$el;\n\t  };\n\n\t  prototypeAccessors.hasAsyncPreload.get = function () {\n\t    return this._component && (this._component.asyncData || this._component.fetch);\n\t  };\n\n\t  prototypeAccessors.vm.get = function () {\n\t    return this._vm;\n\t  };\n\n\t  prototypeAccessors.vmd.get = function () {\n\t    return this._vmDialog;\n\t  };\n\n\t  Dialog.prototype.close = function close () {\n\t    this._vm.close();\n\t  };\n\n\t  Object.defineProperties( Dialog.prototype, prototypeAccessors );\n\n\t  /*\n\t   * vuedl\n\t   *\n\t   * (c) Savaryn Yaroslav <yariksav@gmail.com>\n\t   *\n\t   * For the full copyright and license information, please view the LICENSE\n\t   * file that was distributed with this source code.\n\t  */\n\t  var Overlay = function Overlay(component) {\n\t    this._component = component;\n\t    this._vm = null;\n\t  };\n\n\t  Overlay.prototype.show = function show () {\n\t    if (!this._vm) {\n\t      var Ctor = Vue.extend(this._component);\n\t      this._vm = new Ctor(); // {propsData: { visible: true }}\n\n\t      this._vm.$mount();\n\n\t      document.body.appendChild(this._vm.$el);\n\t    }\n\n\t    this._vm.visible = true;\n\t  };\n\n\t  Overlay.prototype.hide = function hide () {\n\t    this._vm.visible = false;\n\t  };\n\n\t  /*\n\t   * vuedl\n\t   *\n\t   * (c) Savaryn Yaroslav <yariksav@gmail.com>\n\t   *\n\t   * For the full copyright and license information, please view the LICENSE\n\t   * file that was distributed with this source code.\n\t  */\n\n\t  var proxyHandler = {\n\t    get: function get(target, name) {\n\t      /**\n\t       * if node is inspecting then stick to target properties\n\t       */\n\t      if (typeof name === 'symbol' || name === 'inspect') {\n\t        return target[name];\n\t      }\n\n\t      if (target[name]) {\n\t        return target[name];\n\t      }\n\n\t      if (target._components[name]) {\n\t        return target.createFunctionWrapper(name);\n\t      }\n\n\t      return target[name];\n\t    }\n\n\t  };\n\t  var DialogManager = function DialogManager(ref) {\n\t    if ( ref === void 0 ) ref = {};\n\t    var context = ref.context;\n\t    var container = ref.container;\n\n\t    this._context = context || {};\n\t    Dialog.prototype.context = context || {};\n\t    this._components = {};\n\t    this._layouts = {};\n\t    this._overlays = {};\n\t    this._container = container;\n\t    this._emitter = new Vue({});\n\t    this._instances = []; // this.initEmitter()\n\n\t    return new Proxy(this, proxyHandler);\n\t  };\n\n\t  var prototypeAccessors$1 = { context: { configurable: true } }; // initEmitter () {\n\t  // this._emitter.$on('shown', ({ dialog }) => {\n\t  //   const position = dialog.vm.position\n\t  //   let verticalOffset = notificationGap\n\t  //   this._instances.filter(item => item.vm.position === position).forEach(item => {\n\t  //     verticalOffset += item.element.offsetHeight + notificationGap\n\t  //   })\n\t  //   this._instances.push(dialog)\n\t  //   dialog.vm.verticalOffset = verticalOffset\n\t  // })\n\t  // this._emitter.$on('destroyed', ({ dialog }) => {\n\t  //   let index = this._instances.findIndex(instance => instance.id === dialog.id)\n\t  //   if (index < 0) {\n\t  //     return\n\t  //   }\n\t  //   this._instances.splice(index, 1)\n\t  //   // console.log('instances', this._instances)\n\t  //   const len = this._instances.length\n\t  //   const position = dialog.vm.position\n\t  //   if (!len) return\n\t  //   let verticalOffset = notificationGap\n\t  //   this._instances.filter(item => item.vm.position === position).forEach(item => {\n\t  //     item.vm.verticalOffset = verticalOffset\n\t  //     verticalOffset += item.element.offsetHeight + notificationGap\n\t  //   })\n\t  // })\n\t  // }\n\n\n\t  prototypeAccessors$1.context.get = function () {\n\t    return this._context;\n\t  };\n\n\t  DialogManager.prototype.layout = function layout (name, component, options) {\n\t      if ( options === void 0 ) options = {};\n\n\t    this._layouts[name] = {\n\t      component: component,\n\t      options: options\n\t    };\n\t  };\n\n\t  DialogManager.prototype.getLayout = function getLayout (layout) {\n\t    if (typeof layout === 'function') {\n\t      var options = layout.call(this);\n\t      layout = this._layouts[options.name || 'default'];\n\t      return Object.assign({}, layout, {\n\t        options: options\n\t      });\n\t    }\n\n\t    if (typeof layout === 'object' && typeof layout.render === 'function') {\n\t      return {\n\t        component: layout\n\t      };\n\t    }\n\n\t    if (Array.isArray(layout)) {\n\t      var nameTmp = layout[0];\n\t      var optionsTmp = layout[1] || {};\n\t      var instance = typeof nameTmp === 'object' && typeof nameTmp.render === 'function' ? {\n\t        component: nameTmp\n\t      } : this._layouts[nameTmp];\n\t      return instance && {\n\t        component: instance.component,\n\t        options: Object.assign({}, instance.options, optionsTmp)\n\t      };\n\t    }\n\n\t    return this._layouts[layout];\n\t  };\n\n\t  DialogManager.prototype.overlay = function overlay (name, component) {\n\t    if (component === undefined) {\n\t      if (this._overlays[name]) {\n\t        return this._overlays[name];\n\t      } else {\n\t        throw new Error((\"Overlay \\\"\" + name + \" not found\\n          Please register it by calling dialog.overlay('\" + name + \"', component)\"));\n\t      }\n\t    }\n\n\t    this._overlays[name] = new Overlay(component);\n\t  };\n\n\t  DialogManager.prototype.getComponent = function getComponent (name) {\n\t    if (!this._components[name]) {\n\t      throw new Error((\"Component \\\"\" + name + \"\\\" was not found.\\n        Please register it by calling dialog.register('\" + name + \"', component)\"));\n\t    }\n\n\t    return this._components[name];\n\t  };\n\n\t  DialogManager.prototype.component = function component (name, component$1, options) {\n\t      if ( options === void 0 ) options = {};\n\n\t    if (component$1 === undefined) {\n\t      return this._components[name];\n\t    }\n\n\t    this._components[name] = {\n\t      component: component$1,\n\t      options: options\n\t    };\n\t  };\n\n\t  DialogManager.prototype.create = function create (component) {\n\t    if (!component) {\n\t      throw new Error('Component is incorrect');\n\t    }\n\n\t    var layout = this.getLayout(component.layout || 'default');\n\t    var dlg = new Dialog(component, {\n\t      layout: layout,\n\t      context: this._context,\n\t      container: this._container\n\t    });\n\n\t    this._emitter.$emit('created', {\n\t      dialog: dlg\n\t    });\n\n\t    return dlg;\n\t  };\n\n\t  DialogManager.prototype.show = function show (component, options) {\n\t      if ( options === void 0 ) options = {};\n\n\t    return new Promise(function ($return, $error) {\n\t      var dlg, overlayName, overlay;\n\t      dlg = this.create(component);\n\t      overlayName = dlg.hasAsyncPreload ? component.overlay || 'default' : false;\n\t      overlay = overlayName && this._overlays[overlayName] && this.overlay(overlayName);\n\t      overlay && overlay.show();\n\n\t      var $Try_1_Catch = function (e) {\n\t        try {\n\t          this._emitter.$emit('error', {\n\t            error: e,\n\t            dialog: dlg\n\t          });\n\n\t          overlay && overlay.hide();\n\t          throw e;\n\t        } catch ($boundEx) {\n\t          return $error($boundEx);\n\t        }\n\t      }.bind(this);\n\n\t      try {\n\t        return Promise.resolve(dlg.show(options)).then(function ($await_2) {\n\t          try {\n\t            this._emitter.$emit('shown', {\n\t              dialog: dlg\n\t            });\n\n\t            overlay && overlay.hide();\n\t            dlg.onDestroyed = this.onDialogDestroyed.bind(this);\n\t            return $return(options.waitForResult ? dlg.wait() : dlg);\n\t          } catch ($boundEx) {\n\t            return $Try_1_Catch($boundEx);\n\t          }\n\t        }.bind(this), $Try_1_Catch);\n\t      } catch (e) {\n\t        $Try_1_Catch(e);\n\t      }\n\t    }.bind(this));\n\t  };\n\n\t  DialogManager.prototype.createFunctionWrapper = function createFunctionWrapper (name) {\n\t      var this$1 = this;\n\n\t    var cmp = this.getComponent(name);\n\t    return function (options) { return this$1.show(cmp.component, Object.assign({}, cmp.options, options)); };\n\t  };\n\n\t  DialogManager.prototype.showAndWait = function showAndWait (component, props) {\n\t    return new Promise(function ($return, $error) {\n\t      var dlg;\n\t      return Promise.resolve(this.show(component, props)).then(function ($await_3) {\n\t        try {\n\t          dlg = $await_3;\n\t          return $return(dlg.wait());\n\t        } catch ($boundEx) {\n\t          return $error($boundEx);\n\t        }\n\t      }, $error);\n\t    }.bind(this));\n\t  };\n\n\t  DialogManager.prototype.on = function on (event, callback) {\n\t    this._emitter.$on(event, callback);\n\t  };\n\n\t  DialogManager.prototype.off = function off (event, callback) {\n\t    this._emitter.$off(event, callback);\n\t  };\n\n\t  DialogManager.prototype.once = function once (event, callback) {\n\t    this._emitter.$once(event, callback);\n\t  };\n\n\t  DialogManager.prototype.onDialogDestroyed = function onDialogDestroyed (dialog) {\n\t    this._emitter.$emit('destroyed', {\n\t      dialog: dialog\n\t    });\n\t  };\n\n\t  Object.defineProperties( DialogManager.prototype, prototypeAccessors$1 );\n\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  var script$1 = {\n\t    props: {\n\t      width: Number,\n\t      persistent: Boolean\n\t    }\n\t  };\n\n\t  /* script */\n\t              var __vue_script__$1 = script$1;\n\t              \n\t  /* template */\n\t  var __vue_render__$1 = function() {\n\t    var _vm = this;\n\t    var _h = _vm.$createElement;\n\t    var _c = _vm._self._c || _h;\n\t    return _c(\"transition\", { attrs: { name: \"vdialog-modal\" } }, [\n\t      _c(\n\t        \"div\",\n\t        {\n\t          staticClass: \"vdialog-modal-mask\",\n\t          on: {\n\t            click: function($event) {\n\t              if ($event.target !== $event.currentTarget) {\n\t                return null\n\t              }\n\t              $event.preventDefault();\n\t              $event.stopPropagation();\n\t              return _vm.dismiss($event)\n\t            }\n\t          }\n\t        },\n\t        [\n\t          _c(\n\t            \"div\",\n\t            {\n\t              staticClass: \"vdialog-modal-container\",\n\t              style: { \"max-width\": (_vm.width || 500) + \"px\" }\n\t            },\n\t            [\n\t              _c(\n\t                \"dialog-child\",\n\t                _vm._b({}, \"dialog-child\", _vm.$options.propsData, false)\n\t              )\n\t            ],\n\t            1\n\t          )\n\t        ]\n\t      )\n\t    ])\n\t  };\n\t  var __vue_staticRenderFns__$1 = [];\n\t  __vue_render__$1._withStripped = true;\n\n\t    /* style */\n\t    var __vue_inject_styles__$1 = function (inject) {\n\t      if (!inject) { return }\n\t      inject(\"data-v-5c224c04_0\", { source: \"\\n.vdialog-modal-mask {\\n  align-items: center;\\n  display: flex;\\n  height: 100%;\\n  justify-content: center;\\n  left: 0;\\n  position: fixed;\\n  top: 0;\\n  transition: 0.2s cubic-bezier(0.25, 0.8, 0.25, 1);\\n  width: 100%;\\n  z-index: 6;\\n  outline: none;\\n  background-color: rgba(0, 0, 0, .5);\\n}\\n.vdialog-modal-container {\\n  overflow-y: auto;\\n  max-height: 95%;\\n  background-color: #fff;\\n  box-shadow: 0px 11px 15px -7px rgba(0,0,0,0.2), 0px 24px 38px 3px rgba(0,0,0,0.14), 0px 9px 46px 8px rgba(0,0,0,0.12);\\n  border-radius: 2px;\\n  margin: 12px;\\n  overflow-y: auto;\\n  pointer-events: auto;\\n  transition: 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\\n  width: 100%;\\n  z-index: inherit;\\n}\\n\\n/*\\n* The following styles are auto-applied to elements with\\n* transition=\\\"modal\\\" when their visibility is toggled\\n* by Vue.js.\\n*\\n* You can easily play with the modal transition by editing\\n* these styles.\\n*/\\n.vdialog-modal-enter {\\n  opacity: 0;\\n}\\n.vdialog-modal-leave-active {\\n  opacity: 0;\\n}\\n.vdialog-modal-enter .modal-container,\\n.vdialog-modal-leave-active .modal-container {\\n  -webkit-transform: scale(1.1);\\n  transform: scale(1.1);\\n}\\n\", map: {\"version\":3,\"sources\":[\"/Users/yarik/Projects/clones/vuedl/src/components/DialogLayout.vue\"],\"names\":[],\"mappings\":\";AAqBA;EACA,oBAAA;EACA,cAAA;EACA,aAAA;EACA,wBAAA;EACA,QAAA;EACA,gBAAA;EACA,OAAA;EACA,kDAAA;EACA,YAAA;EACA,WAAA;EACA,cAAA;EACA,oCAAA;CACA;AAEA;EACA,iBAAA;EACA,gBAAA;EACA,uBAAA;EACA,sHAAA;EACA,mBAAA;EACA,aAAA;EACA,iBAAA;EACA,qBAAA;EACA,kDAAA;EACA,YAAA;EACA,iBAAA;CACA;;AAEA;;;;;;;EAOA;AAEA;EACA,WAAA;CACA;AAEA;EACA,WAAA;CACA;AAEA;;EAEA,8BAAA;EACA,sBAAA;CACA\",\"file\":\"DialogLayout.vue\",\"sourcesContent\":[\"<template>\\n  <transition name=\\\"vdialog-modal\\\">\\n    <div class=\\\"vdialog-modal-mask\\\" @click.self.prevent.stop=\\\"dismiss\\\">\\n        <div class=\\\"vdialog-modal-container\\\" :style=\\\"{ 'max-width': (width || 500) +'px' }\\\">\\n          <dialog-child v-bind=\\\"$options.propsData\\\"/>\\n        </div>\\n    </div>\\n  </transition>\\n</template>\\n\\n<script>\\n\\nexport default {\\n  props: {\\n    width: Number,\\n    persistent: Boolean\\n  }\\n}\\n</script>\\n\\n<style>\\n  .vdialog-modal-mask {\\n    align-items: center;\\n    display: flex;\\n    height: 100%;\\n    justify-content: center;\\n    left: 0;\\n    position: fixed;\\n    top: 0;\\n    transition: 0.2s cubic-bezier(0.25, 0.8, 0.25, 1);\\n    width: 100%;\\n    z-index: 6;\\n    outline: none;\\n    background-color: rgba(0, 0, 0, .5);\\n  }\\n\\n  .vdialog-modal-container {\\n    overflow-y: auto;\\n    max-height: 95%;\\n    background-color: #fff;\\n    box-shadow: 0px 11px 15px -7px rgba(0,0,0,0.2), 0px 24px 38px 3px rgba(0,0,0,0.14), 0px 9px 46px 8px rgba(0,0,0,0.12);\\n    border-radius: 2px;\\n    margin: 12px;\\n    overflow-y: auto;\\n    pointer-events: auto;\\n    transition: 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\\n    width: 100%;\\n    z-index: inherit;\\n  }\\n\\n  /*\\n  * The following styles are auto-applied to elements with\\n  * transition=\\\"modal\\\" when their visibility is toggled\\n  * by Vue.js.\\n  *\\n  * You can easily play with the modal transition by editing\\n  * these styles.\\n  */\\n\\n  .vdialog-modal-enter {\\n    opacity: 0;\\n  }\\n\\n  .vdialog-modal-leave-active {\\n    opacity: 0;\\n  }\\n\\n  .vdialog-modal-enter .modal-container,\\n  .vdialog-modal-leave-active .modal-container {\\n    -webkit-transform: scale(1.1);\\n    transform: scale(1.1);\\n  }\\n</style>\\n\"]}, media: undefined });\n\n\t    };\n\t    /* scoped */\n\t    var __vue_scope_id__$1 = undefined;\n\t    /* module identifier */\n\t    var __vue_module_identifier__$1 = undefined;\n\t    /* functional template */\n\t    var __vue_is_functional_template__$1 = false;\n\t    /* component normalizer */\n\t    function __vue_normalize__$1(\n\t      template, style, script,\n\t      scope, functional, moduleIdentifier,\n\t      createInjector, createInjectorSSR\n\t    ) {\n\t      var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t      // For security concerns, we use only base name in production mode.\n\t      component.__file = \"/Users/yarik/Projects/clones/vuedl/src/components/DialogLayout.vue\";\n\n\t      if (!component.render) {\n\t        component.render = template.render;\n\t        component.staticRenderFns = template.staticRenderFns;\n\t        component._compiled = true;\n\n\t        if (functional) { component.functional = true; }\n\t      }\n\n\t      component._scopeId = scope;\n\n\t      {\n\t        var hook;\n\t        if (style) {\n\t          hook = function(context) {\n\t            style.call(this, createInjector(context));\n\t          };\n\t        }\n\n\t        if (hook !== undefined) {\n\t          if (component.functional) {\n\t            // register for functional component in vue file\n\t            var originalRender = component.render;\n\t            component.render = function renderWithStyleInjection(h, context) {\n\t              hook.call(context);\n\t              return originalRender(h, context)\n\t            };\n\t          } else {\n\t            // inject component registration as beforeCreate hook\n\t            var existing = component.beforeCreate;\n\t            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n\t          }\n\t        }\n\t      }\n\n\t      return component\n\t    }\n\t    /* style inject */\n\t    function __vue_create_injector__$1() {\n\t      var head = document.head || document.getElementsByTagName('head')[0];\n\t      var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});\n\t      var isOldIE =\n\t        typeof navigator !== 'undefined' &&\n\t        /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t      return function addStyle(id, css) {\n\t        if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t        var group = isOldIE ? css.media || 'default' : id;\n\t        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t        if (!style.ids.includes(id)) {\n\t          var code = css.source;\n\t          var index = style.ids.length;\n\n\t          style.ids.push(id);\n\n\t          if (isOldIE) {\n\t            style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t          }\n\n\t          if (!style.element) {\n\t            var el = style.element = document.createElement('style');\n\t            el.type = 'text/css';\n\n\t            if (css.media) { el.setAttribute('media', css.media); }\n\t            if (isOldIE) {\n\t              el.setAttribute('data-group', group);\n\t              el.setAttribute('data-next-index', '0');\n\t            }\n\n\t            head.appendChild(el);\n\t          }\n\n\t          if (isOldIE) {\n\t            index = parseInt(style.element.getAttribute('data-next-index'));\n\t            style.element.setAttribute('data-next-index', index + 1);\n\t          }\n\n\t          if (style.element.styleSheet) {\n\t            style.parts.push(code);\n\t            style.element.styleSheet.cssText = style.parts\n\t              .filter(Boolean)\n\t              .join('\\n');\n\t          } else {\n\t            var textNode = document.createTextNode(code);\n\t            var nodes = style.element.childNodes;\n\t            if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t            else { style.element.appendChild(textNode); }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /* style inject SSR */\n\t    \n\n\t    \n\t    var DialogLayout = __vue_normalize__$1(\n\t      { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },\n\t      __vue_inject_styles__$1,\n\t      __vue_script__$1,\n\t      __vue_scope_id__$1,\n\t      __vue_is_functional_template__$1,\n\t      __vue_module_identifier__$1,\n\t      __vue_create_injector__$1,\n\t      undefined\n\t    );\n\n\t  var notifications = [];\n\t  var gap = 10;\n\n\t  var insertNotification = function (vm) {\n\t    var position = vm.position;\n\t    var verticalOffset = gap;\n\t    notifications.filter(function (item) { return item.position === position; }).forEach(function (item) {\n\t      verticalOffset += item.$el.offsetHeight + gap;\n\t    });\n\t    notifications.push(vm);\n\t    vm.verticalOffset = verticalOffset;\n\t  };\n\n\t  var deleteNotification = function (vm) {\n\t    var index = notifications.findIndex(function (instance) { return instance === vm; });\n\n\t    if (index < 0) {\n\t      return;\n\t    }\n\n\t    notifications.splice(index, 1);\n\t    var len = notifications.length;\n\t    var position = vm.position;\n\t    if (!len) { return; }\n\t    var verticalOffset = gap;\n\t    notifications.filter(function (item) { return item.position === position; }).forEach(function (item) {\n\t      item.verticalOffset = verticalOffset;\n\t      verticalOffset += item.$el.offsetHeight + gap;\n\t    });\n\t  };\n\n\t  var Notifiable = {\n\t    props: {\n\t      verticalOffset: Number,\n\t      showClose: {\n\t        type: Boolean,\n\t        default: function () { return true; }\n\t      },\n\t      position: {\n\t        type: String,\n\t        default: function () { return 'top-right'; }\n\t      },\n\t      timeout: {\n\t        type: Number,\n\t        default: function () { return 4500; }\n\t      },\n\t      width: {\n\t        type: Number,\n\t        default: function () { return 330; }\n\t      },\n\t      zIndex: {\n\t        type: Number,\n\t        default: function () { return 2000; }\n\t      }\n\t    },\n\t    computed: {\n\t      horizontalClass: function horizontalClass() {\n\t        return this.position.indexOf('right') > -1 ? 'right' : 'left';\n\t      },\n\n\t      verticalProperty: function verticalProperty() {\n\t        return /^top-/.test(this.position) ? 'top' : 'bottom';\n\t      },\n\n\t      getStyle: function getStyle() {\n\t        var obj;\n\n\t        return ( obj = {}, obj[this.verticalProperty] = ((this.verticalOffset) + \"px\"), obj['max-width'] =  ((this.width) + \"px\"), obj['z-index'] =  this.zIndex, obj);\n\t      }\n\n\t    },\n\t    methods: {\n\t      _destroy: function _destroy() {\n\t        this.$el.addEventListener('transitionend', this.onTransitionEnd);\n\t      },\n\n\t      onTransitionEnd: function onTransitionEnd() {\n\t        this.$el.removeEventListener('transitionend', this.onTransitionEnd);\n\t        this.$destroy();\n\t      },\n\n\t      clearTimer: function clearTimer() {\n\t        clearTimeout(this.timer);\n\t      },\n\n\t      startTimer: function startTimer() {\n\t        if (this.timeout > 0) {\n\t          this.timer = setTimeout(this.close, this.timeout);\n\t        }\n\t      },\n\n\t      keydown: function keydown(e) {\n\t        if (e.keyCode === 46 || e.keyCode === 8) {\n\t          this.clearTimer(); // detele key\n\t        } else if (e.keyCode === 27) {\n\t          // esc key\n\t          this.close();\n\t        } else {\n\t          this.startTimer(); // any key\n\t        }\n\t      },\n\n\t      close: function close() {\n\t        this.isActive = false;\n\t      }\n\n\t    },\n\t    watch: {\n\t      isActive: function isActive(val) {\n\t        if (val) {\n\t          insertNotification(this);\n\t        } else {\n\t          deleteNotification(this);\n\t        }\n\t      }\n\n\t    },\n\n\t    mounted: function mounted() {\n\t      this.startTimer();\n\t      document.addEventListener('keydown', this.keydown);\n\t    },\n\n\t    beforeDestroy: function beforeDestroy() {\n\t      document.removeEventListener('keydown', this.keydown);\n\t    }\n\n\t  };\n\n\t  //\n\t  var script$2 = {\n\t    mixins: [Notifiable],\n\t    props: {\n\t      //   showClose: {\n\t      //     type: Boolean,\n\t      //     default: () => true\n\t      //   },\n\t      width: {\n\t        type: Number,\n\t        default: function () { return 330; }\n\t      }\n\t    },\n\t    computed: {\n\t      getStyle: function getStyle() {\n\t        var obj;\n\n\t        return ( obj = {}, obj[this.verticalProperty] = ((this.verticalOffset) + \"px\"), obj['max-width'] =  ((this.width) + \"px\"), obj['z-index'] =  this.zIndex, obj);\n\t      }\n\n\t    } // methods: {\n\t    //   _destroy () {\n\t    //     this.$el.addEventListener('transitionend', this.onTransitionEnd)\n\t    //   },\n\t    //   onTransitionEnd () {\n\t    //     this.$el.removeEventListener('transitionend', this.onTransitionEnd)\n\t    //     this.$destroy()\n\t    //   }\n\t    // }\n\n\t  };\n\n\t  /* script */\n\t              var __vue_script__$2 = script$2;\n\t              \n\t  /* template */\n\t  var __vue_render__$2 = function() {\n\t    var _vm = this;\n\t    var _h = _vm.$createElement;\n\t    var _c = _vm._self._c || _h;\n\t    return _c(\"transition\", { attrs: { name: \"vuedl-notification-fade\" } }, [\n\t      _c(\n\t        \"div\",\n\t        {\n\t          directives: [\n\t            {\n\t              name: \"show\",\n\t              rawName: \"v-show\",\n\t              value: _vm.isActive,\n\t              expression: \"isActive\"\n\t            }\n\t          ],\n\t          class: [\"vuedl-notification\", _vm.horizontalClass],\n\t          style: _vm.getStyle,\n\t          attrs: { role: \"alert\" },\n\t          on: { mouseenter: _vm.clearTimer, mouseleave: _vm.startTimer }\n\t        },\n\t        [\n\t          _vm._t(\"default\"),\n\t          _vm._v(\" \"),\n\t          _vm.showClose\n\t            ? _c(\n\t                \"div\",\n\t                {\n\t                  staticClass: \"vuedl-notification__closeBtn\",\n\t                  on: {\n\t                    click: function($event) {\n\t                      $event.stopPropagation();\n\t                      return _vm.close($event)\n\t                    }\n\t                  }\n\t                },\n\t                [_vm._v(\"×\")]\n\t              )\n\t            : _vm._e()\n\t        ],\n\t        2\n\t      )\n\t    ])\n\t  };\n\t  var __vue_staticRenderFns__$2 = [];\n\t  __vue_render__$2._withStripped = true;\n\n\t    /* style */\n\t    var __vue_inject_styles__$2 = function (inject) {\n\t      if (!inject) { return }\n\t      inject(\"data-v-f0792652_0\", { source: \"\\n.vuedl-notification {\\n   display:-webkit-box;\\n   display:-ms-flexbox;\\n   display:flex;\\n   -webkit-box-sizing:border-box;\\n   box-sizing:border-box;\\n   position:fixed;\\n   -webkit-box-shadow:0 2px 12px 0 rgba(0,0,0,.1);\\n   box-shadow:0 2px 12px 0 rgba(0,0,0,.1);\\n   -webkit-transition:opacity .3s,left .3s,right .3s,top .4s,bottom .3s,-webkit-transform .3s;\\n   transition:opacity .3s,left .3s,right .3s,top .4s,bottom .3s,-webkit-transform .3s;\\n   transition:opacity .3s,transform .3s,left .3s,right .3s,top .4s,bottom .3s;\\n   transition:opacity .3s,transform .3s,left .3s,right .3s,top .4s,bottom .3s,-webkit-transform .3s;\\n   overflow:hidden\\n}\\n.vuedl-notification>div:first-child {\\n   width: 100%\\n}\\n.vuedl-notification.right {\\n   right:16px\\n}\\n.vuedl-notification.left {\\n   left:16px\\n}\\n.vuedl-notification__closeBtn {\\n   position:absolute;\\n   top: 9px;\\n   right: 15px;\\n   cursor: pointer;\\n   color: #909399;\\n   font-size: 22px;\\n}\\n.vuedl-notification__closeBtn:hover {\\n   color:#606266\\n}\\n.vuedl-notification-fade-enter.right{\\n   right:0;\\n   -webkit-transform:translateX(100%);\\n   transform:translateX(100%)\\n}\\n.vuedl-notification-fade-enter.left{\\n   left:0;\\n   -webkit-transform:translateX(-100%);\\n   transform:translateX(-100%)\\n}\\n.vuedl-notification-fade-leave-active {\\n   opacity:0\\n}\\n@media screen and (max-width: 450px) {\\n.vuedl-notification {\\n     left:8px!important;\\n     right:8px!important;\\n     max-width: inherit!important;\\n}\\n}\\n\\n/* .el-notification-fade-enter {\\n   &.right {\\n     right: 0;\\n     transform: translateX(100%);\\n   }\\n\\n   &.left {\\n     left: 0;\\n     transform: translateX(-100%);\\n   }\\n }\\n\\n .el-notification-fade-leave-active {\\n   opacity: 0;\\n }*/\\n\", map: {\"version\":3,\"sources\":[\"/Users/yarik/Projects/clones/vuedl/src/components/NotificationLayout.vue\"],\"names\":[],\"mappings\":\";AAwDA;GACA,oBAAA;GACA,oBAAA;GACA,aAAA;GACA,8BAAA;GACA,sBAAA;GACA,eAAA;GACA,+CAAA;GACA,uCAAA;GACA,2FAAA;GACA,mFAAA;GACA,2EAAA;GACA,iGAAA;GACA,eAAA;CACA;AACA;GACA,WAAA;CACA;AACA;GACA,UAAA;CACA;AACA;GACA,SAAA;CACA;AACA;GACA,kBAAA;GACA,SAAA;GACA,YAAA;GACA,gBAAA;GACA,eAAA;GACA,gBAAA;CACA;AACA;GACA,aAAA;CACA;AACA;GACA,QAAA;GACA,mCAAA;GACA,0BAAA;CACA;AACA;GACA,OAAA;GACA,oCAAA;GACA,2BAAA;CACA;AACA;GACA,SAAA;CACA;AACA;AACA;KACA,mBAAA;KACA,oBAAA;KACA,6BAAA;CACA;CACA;;AAEA;;;;;;;;;;;;;;IAcA\",\"file\":\"NotificationLayout.vue\",\"sourcesContent\":[\"<template>\\n  <transition name=\\\"vuedl-notification-fade\\\">\\n    <div\\n      :class=\\\"['vuedl-notification', horizontalClass]\\\"\\n      v-show=\\\"isActive\\\"\\n      :style=\\\"getStyle\\\"\\n      @mouseenter=\\\"clearTimer\\\"\\n      @mouseleave=\\\"startTimer\\\"\\n      role=\\\"alert\\\"\\n    >\\n      <slot/>\\n      <div\\n        class=\\\"vuedl-notification__closeBtn\\\"\\n        v-if=\\\"showClose\\\"\\n        @click.stop=\\\"close\\\">×</div>\\n    </div>\\n  </transition>\\n</template>\\n\\n<script>\\n\\nimport Notifiable from '../mixins/notifiable'\\n\\nexport default {\\n  mixins: [ Notifiable ],\\n  props: {\\n  //   showClose: {\\n  //     type: Boolean,\\n  //     default: () => true\\n  //   },\\n    width: {\\n      type: Number,\\n      default: () => 330\\n    }\\n  },\\n  computed: {\\n    getStyle () {\\n      return {\\n        [this.verticalProperty]: `${this.verticalOffset}px`,\\n        'max-width': `${this.width}px`,\\n        'z-index': this.zIndex\\n      }\\n    }\\n  }\\n  // methods: {\\n  //   _destroy () {\\n  //     this.$el.addEventListener('transitionend', this.onTransitionEnd)\\n  //   },\\n  //   onTransitionEnd () {\\n  //     this.$el.removeEventListener('transitionend', this.onTransitionEnd)\\n  //     this.$destroy()\\n  //   }\\n  // }\\n}\\n</script>\\n<style>\\n  .vuedl-notification {\\n    display:-webkit-box;\\n    display:-ms-flexbox;\\n    display:flex;\\n    -webkit-box-sizing:border-box;\\n    box-sizing:border-box;\\n    position:fixed;\\n    -webkit-box-shadow:0 2px 12px 0 rgba(0,0,0,.1);\\n    box-shadow:0 2px 12px 0 rgba(0,0,0,.1);\\n    -webkit-transition:opacity .3s,left .3s,right .3s,top .4s,bottom .3s,-webkit-transform .3s;\\n    transition:opacity .3s,left .3s,right .3s,top .4s,bottom .3s,-webkit-transform .3s;\\n    transition:opacity .3s,transform .3s,left .3s,right .3s,top .4s,bottom .3s;\\n    transition:opacity .3s,transform .3s,left .3s,right .3s,top .4s,bottom .3s,-webkit-transform .3s;\\n    overflow:hidden\\n  }\\n  .vuedl-notification>div:first-child {\\n    width: 100%\\n  }\\n  .vuedl-notification.right {\\n    right:16px\\n  }\\n  .vuedl-notification.left {\\n    left:16px\\n  }\\n  .vuedl-notification__closeBtn {\\n    position:absolute;\\n    top: 9px;\\n    right: 15px;\\n    cursor: pointer;\\n    color: #909399;\\n    font-size: 22px;\\n  }\\n  .vuedl-notification__closeBtn:hover {\\n    color:#606266\\n  }\\n  .vuedl-notification-fade-enter.right{\\n    right:0;\\n    -webkit-transform:translateX(100%);\\n    transform:translateX(100%)\\n  }\\n  .vuedl-notification-fade-enter.left{\\n    left:0;\\n    -webkit-transform:translateX(-100%);\\n    transform:translateX(-100%)\\n  }\\n  .vuedl-notification-fade-leave-active {\\n    opacity:0\\n  }\\n  @media screen and (max-width: 450px) {\\n    .vuedl-notification {\\n      left:8px!important;\\n      right:8px!important;\\n      max-width: inherit!important;\\n    }\\n  }\\n\\n /* .el-notification-fade-enter {\\n    &.right {\\n      right: 0;\\n      transform: translateX(100%);\\n    }\\n\\n    &.left {\\n      left: 0;\\n      transform: translateX(-100%);\\n    }\\n  }\\n\\n  .el-notification-fade-leave-active {\\n    opacity: 0;\\n  }*/\\n</style>\\n\"]}, media: undefined });\n\n\t    };\n\t    /* scoped */\n\t    var __vue_scope_id__$2 = undefined;\n\t    /* module identifier */\n\t    var __vue_module_identifier__$2 = undefined;\n\t    /* functional template */\n\t    var __vue_is_functional_template__$2 = false;\n\t    /* component normalizer */\n\t    function __vue_normalize__$2(\n\t      template, style, script,\n\t      scope, functional, moduleIdentifier,\n\t      createInjector, createInjectorSSR\n\t    ) {\n\t      var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t      // For security concerns, we use only base name in production mode.\n\t      component.__file = \"/Users/yarik/Projects/clones/vuedl/src/components/NotificationLayout.vue\";\n\n\t      if (!component.render) {\n\t        component.render = template.render;\n\t        component.staticRenderFns = template.staticRenderFns;\n\t        component._compiled = true;\n\n\t        if (functional) { component.functional = true; }\n\t      }\n\n\t      component._scopeId = scope;\n\n\t      {\n\t        var hook;\n\t        if (style) {\n\t          hook = function(context) {\n\t            style.call(this, createInjector(context));\n\t          };\n\t        }\n\n\t        if (hook !== undefined) {\n\t          if (component.functional) {\n\t            // register for functional component in vue file\n\t            var originalRender = component.render;\n\t            component.render = function renderWithStyleInjection(h, context) {\n\t              hook.call(context);\n\t              return originalRender(h, context)\n\t            };\n\t          } else {\n\t            // inject component registration as beforeCreate hook\n\t            var existing = component.beforeCreate;\n\t            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n\t          }\n\t        }\n\t      }\n\n\t      return component\n\t    }\n\t    /* style inject */\n\t    function __vue_create_injector__$2() {\n\t      var head = document.head || document.getElementsByTagName('head')[0];\n\t      var styles = __vue_create_injector__$2.styles || (__vue_create_injector__$2.styles = {});\n\t      var isOldIE =\n\t        typeof navigator !== 'undefined' &&\n\t        /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t      return function addStyle(id, css) {\n\t        if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t        var group = isOldIE ? css.media || 'default' : id;\n\t        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t        if (!style.ids.includes(id)) {\n\t          var code = css.source;\n\t          var index = style.ids.length;\n\n\t          style.ids.push(id);\n\n\t          if (isOldIE) {\n\t            style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t          }\n\n\t          if (!style.element) {\n\t            var el = style.element = document.createElement('style');\n\t            el.type = 'text/css';\n\n\t            if (css.media) { el.setAttribute('media', css.media); }\n\t            if (isOldIE) {\n\t              el.setAttribute('data-group', group);\n\t              el.setAttribute('data-next-index', '0');\n\t            }\n\n\t            head.appendChild(el);\n\t          }\n\n\t          if (isOldIE) {\n\t            index = parseInt(style.element.getAttribute('data-next-index'));\n\t            style.element.setAttribute('data-next-index', index + 1);\n\t          }\n\n\t          if (style.element.styleSheet) {\n\t            style.parts.push(code);\n\t            style.element.styleSheet.cssText = style.parts\n\t              .filter(Boolean)\n\t              .join('\\n');\n\t          } else {\n\t            var textNode = document.createTextNode(code);\n\t            var nodes = style.element.childNodes;\n\t            if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t            else { style.element.appendChild(textNode); }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /* style inject SSR */\n\t    \n\n\t    \n\t    var NotificationLayout = __vue_normalize__$2(\n\t      { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },\n\t      __vue_inject_styles__$2,\n\t      __vue_script__$2,\n\t      __vue_scope_id__$2,\n\t      __vue_is_functional_template__$2,\n\t      __vue_module_identifier__$2,\n\t      __vue_create_injector__$2,\n\t      undefined\n\t    );\n\n\t  //\n\t  //\n\t  //\n\t  //\n\t  //\n\t  var script$3 = {\n\t    name: 'VDialogOverlay',\n\t    props: {\n\t      zIndex: {\n\t        type: Number,\n\t        default: function () { return 1250; }\n\t      },\n\t      visible: {\n\t        type: Boolean,\n\t        default: function () { return false; }\n\t      }\n\t    }\n\t  };\n\n\t  /* script */\n\t              var __vue_script__$3 = script$3;\n\t              \n\t  /* template */\n\t  var __vue_render__$3 = function() {\n\t    var _vm = this;\n\t    var _h = _vm.$createElement;\n\t    var _c = _vm._self._c || _h;\n\t    return _c(\"transition\", { attrs: { name: \"opacity\" } }, [\n\t      _vm.visible\n\t        ? _c(\n\t            \"div\",\n\t            {\n\t              staticClass: \"dialog-overlay-loading\",\n\t              style: { zIndex: _vm.zIndex }\n\t            },\n\t            [_vm._v(\"Loading…\")]\n\t          )\n\t        : _vm._e()\n\t    ])\n\t  };\n\t  var __vue_staticRenderFns__$3 = [];\n\t  __vue_render__$3._withStripped = true;\n\n\t    /* style */\n\t    var __vue_inject_styles__$3 = function (inject) {\n\t      if (!inject) { return }\n\t      inject(\"data-v-05d353e2_0\", { source: \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* Absolute Center Spinner */\\n.dialog-overlay-loading {\\n  position: fixed;\\n  z-index: 999;\\n  height: 2em;\\n  width: 2em;\\n  overflow: show;\\n  margin: auto;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  /* background: rgba(112, 112, 112, 0.4); */\\n  cursor: wait;\\n}\\n\\n/* Transparent Overlay */\\n.dialog-overlay-loading:before {\\n  content: '';\\n  display: block;\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background: radial-gradient(rgba(112, 112, 112, 0.4), rgba(50, 50, 50, .8));\\n  background: -webkit-radial-gradient(rgba(112, 112, 112, 0.4), rgba(50, 50, 50, .8));\\n}\\n\\n/* :not(:required) hides these rules from IE9 and below */\\n.dialog-overlay-loading:not(:required) {\\n  /* hide \\\"loading...\\\" text */\\n  font: 0/0 a;\\n  color: transparent;\\n  text-shadow: none;\\n  background-color: transparent;\\n  border: 0;\\n}\\n.dialog-overlay-loading:not(:required):after {\\n  content: '';\\n  display: block;\\n  font-size: 10px;\\n  width: 1em;\\n  height: 1em;\\n  margin-top: -0.5em;\\n  -webkit-animation: spinner 1500ms infinite linear;\\n  -moz-animation: spinner 1500ms infinite linear;\\n  -ms-animation: spinner 1500ms infinite linear;\\n  -o-animation: spinner 1500ms infinite linear;\\n  animation: spinner 1500ms infinite linear;\\n  border-radius: 0.5em;\\n  -webkit-box-shadow: rgba(255,255,255, 0.75) 1.5em 0 0 0, rgba(255,255,255, 0.75) 1.1em 1.1em 0 0, rgba(255,255,255, 0.75) 0 1.5em 0 0, rgba(255,255,255, 0.75) -1.1em 1.1em 0 0, rgba(255,255,255, 0.75) -1.5em 0 0 0, rgba(255,255,255, 0.75) -1.1em -1.1em 0 0, rgba(255,255,255, 0.75) 0 -1.5em 0 0, rgba(255,255,255, 0.75) 1.1em -1.1em 0 0;\\nbox-shadow: rgba(255,255,255, 0.75) 1.5em 0 0 0, rgba(255,255,255, 0.75) 1.1em 1.1em 0 0, rgba(255,255,255, 0.75) 0 1.5em 0 0, rgba(255,255,255, 0.75) -1.1em 1.1em 0 0, rgba(255,255,255, 0.75) -1.5em 0 0 0, rgba(255,255,255, 0.75) -1.1em -1.1em 0 0, rgba(255,255,255, 0.75) 0 -1.5em 0 0, rgba(255,255,255, 0.75) 1.1em -1.1em 0 0;\\n}\\n\\n/* Animation */\\n@-webkit-keyframes spinner {\\n0% {\\n    -webkit-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -ms-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n}\\n100% {\\n    -webkit-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -ms-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n}\\n}\\n@-moz-keyframes spinner {\\n0% {\\n    -webkit-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -ms-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n}\\n100% {\\n    -webkit-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -ms-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n}\\n}\\n@-o-keyframes spinner {\\n0% {\\n    -webkit-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -ms-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n}\\n100% {\\n    -webkit-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -ms-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n}\\n}\\n@keyframes spinner {\\n0% {\\n    -webkit-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -ms-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n}\\n100% {\\n    -webkit-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -ms-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n}\\n}\\n\", map: {\"version\":3,\"sources\":[\"/Users/yarik/Projects/clones/vuedl/src/components/DialogOverlay.vue\"],\"names\":[],\"mappings\":\";;;;;;;;;;;;;;;;;;;;;AAqBA,6BAAA;AACA;EACA,gBAAA;EACA,aAAA;EACA,YAAA;EACA,WAAA;EACA,eAAA;EACA,aAAA;EACA,OAAA;EACA,QAAA;EACA,UAAA;EACA,SAAA;EACA,2CAAA;EACA,aAAA;CACA;;AAEA,yBAAA;AACA;EACA,YAAA;EACA,eAAA;EACA,gBAAA;EACA,OAAA;EACA,QAAA;EACA,YAAA;EACA,aAAA;EACA,4EAAA;EACA,oFAAA;CACA;;AAEA,0DAAA;AACA;EACA,4BAAA;EACA,YAAA;EACA,mBAAA;EACA,kBAAA;EACA,8BAAA;EACA,UAAA;CACA;AAEA;EACA,YAAA;EACA,eAAA;EACA,gBAAA;EACA,WAAA;EACA,YAAA;EACA,mBAAA;EACA,kDAAA;EACA,+CAAA;EACA,8CAAA;EACA,6CAAA;EACA,0CAAA;EACA,qBAAA;EACA,iVAAA;AACA,yUAAA;CACA;;AAEA,eAAA;AAEA;AACA;IACA,gCAAA;IACA,6BAAA;IACA,4BAAA;IACA,2BAAA;IACA,wBAAA;CACA;AACA;IACA,kCAAA;IACA,+BAAA;IACA,8BAAA;IACA,6BAAA;IACA,0BAAA;CACA;CACA;AACA;AACA;IACA,gCAAA;IACA,6BAAA;IACA,4BAAA;IACA,2BAAA;IACA,wBAAA;CACA;AACA;IACA,kCAAA;IACA,+BAAA;IACA,8BAAA;IACA,6BAAA;IACA,0BAAA;CACA;CACA;AACA;AACA;IACA,gCAAA;IACA,6BAAA;IACA,4BAAA;IACA,2BAAA;IACA,wBAAA;CACA;AACA;IACA,kCAAA;IACA,+BAAA;IACA,8BAAA;IACA,6BAAA;IACA,0BAAA;CACA;CACA;AACA;AACA;IACA,gCAAA;IACA,6BAAA;IACA,4BAAA;IACA,2BAAA;IACA,wBAAA;CACA;AACA;IACA,kCAAA;IACA,+BAAA;IACA,8BAAA;IACA,6BAAA;IACA,0BAAA;CACA;CACA\",\"file\":\"DialogOverlay.vue\",\"sourcesContent\":[\"<template>\\n  <transition name=\\\"opacity\\\">\\n    <div class=\\\"dialog-overlay-loading\\\" :style=\\\"{zIndex: zIndex}\\\" v-if=\\\"visible\\\">Loading&#8230;</div>\\n  </transition>\\n</template>\\n<script>\\nexport default {\\n  name: 'VDialogOverlay',\\n  props: {\\n    zIndex: {\\n      type: Number,\\n      default: () => 1250\\n    },\\n    visible: {\\n      type: Boolean,\\n      default: () => false\\n    }\\n  }\\n}\\n</script>\\n<style>\\n/* Absolute Center Spinner */\\n.dialog-overlay-loading {\\n  position: fixed;\\n  z-index: 999;\\n  height: 2em;\\n  width: 2em;\\n  overflow: show;\\n  margin: auto;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  /* background: rgba(112, 112, 112, 0.4); */\\n  cursor: wait;\\n}\\n\\n/* Transparent Overlay */\\n.dialog-overlay-loading:before {\\n  content: '';\\n  display: block;\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background: radial-gradient(rgba(112, 112, 112, 0.4), rgba(50, 50, 50, .8));\\n  background: -webkit-radial-gradient(rgba(112, 112, 112, 0.4), rgba(50, 50, 50, .8));\\n}\\n\\n/* :not(:required) hides these rules from IE9 and below */\\n.dialog-overlay-loading:not(:required) {\\n  /* hide \\\"loading...\\\" text */\\n  font: 0/0 a;\\n  color: transparent;\\n  text-shadow: none;\\n  background-color: transparent;\\n  border: 0;\\n}\\n\\n.dialog-overlay-loading:not(:required):after {\\n  content: '';\\n  display: block;\\n  font-size: 10px;\\n  width: 1em;\\n  height: 1em;\\n  margin-top: -0.5em;\\n  -webkit-animation: spinner 1500ms infinite linear;\\n  -moz-animation: spinner 1500ms infinite linear;\\n  -ms-animation: spinner 1500ms infinite linear;\\n  -o-animation: spinner 1500ms infinite linear;\\n  animation: spinner 1500ms infinite linear;\\n  border-radius: 0.5em;\\n  -webkit-box-shadow: rgba(255,255,255, 0.75) 1.5em 0 0 0, rgba(255,255,255, 0.75) 1.1em 1.1em 0 0, rgba(255,255,255, 0.75) 0 1.5em 0 0, rgba(255,255,255, 0.75) -1.1em 1.1em 0 0, rgba(255,255,255, 0.75) -1.5em 0 0 0, rgba(255,255,255, 0.75) -1.1em -1.1em 0 0, rgba(255,255,255, 0.75) 0 -1.5em 0 0, rgba(255,255,255, 0.75) 1.1em -1.1em 0 0;\\nbox-shadow: rgba(255,255,255, 0.75) 1.5em 0 0 0, rgba(255,255,255, 0.75) 1.1em 1.1em 0 0, rgba(255,255,255, 0.75) 0 1.5em 0 0, rgba(255,255,255, 0.75) -1.1em 1.1em 0 0, rgba(255,255,255, 0.75) -1.5em 0 0 0, rgba(255,255,255, 0.75) -1.1em -1.1em 0 0, rgba(255,255,255, 0.75) 0 -1.5em 0 0, rgba(255,255,255, 0.75) 1.1em -1.1em 0 0;\\n}\\n\\n/* Animation */\\n\\n@-webkit-keyframes spinner {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -ms-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -ms-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n@-moz-keyframes spinner {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -ms-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -ms-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n@-o-keyframes spinner {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -ms-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -ms-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n@keyframes spinner {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n    -moz-transform: rotate(0deg);\\n    -ms-transform: rotate(0deg);\\n    -o-transform: rotate(0deg);\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n    -moz-transform: rotate(360deg);\\n    -ms-transform: rotate(360deg);\\n    -o-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n  }\\n}\\n</style>\\n\"]}, media: undefined });\n\n\t    };\n\t    /* scoped */\n\t    var __vue_scope_id__$3 = undefined;\n\t    /* module identifier */\n\t    var __vue_module_identifier__$3 = undefined;\n\t    /* functional template */\n\t    var __vue_is_functional_template__$3 = false;\n\t    /* component normalizer */\n\t    function __vue_normalize__$3(\n\t      template, style, script,\n\t      scope, functional, moduleIdentifier,\n\t      createInjector, createInjectorSSR\n\t    ) {\n\t      var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t      // For security concerns, we use only base name in production mode.\n\t      component.__file = \"/Users/yarik/Projects/clones/vuedl/src/components/DialogOverlay.vue\";\n\n\t      if (!component.render) {\n\t        component.render = template.render;\n\t        component.staticRenderFns = template.staticRenderFns;\n\t        component._compiled = true;\n\n\t        if (functional) { component.functional = true; }\n\t      }\n\n\t      component._scopeId = scope;\n\n\t      {\n\t        var hook;\n\t        if (style) {\n\t          hook = function(context) {\n\t            style.call(this, createInjector(context));\n\t          };\n\t        }\n\n\t        if (hook !== undefined) {\n\t          if (component.functional) {\n\t            // register for functional component in vue file\n\t            var originalRender = component.render;\n\t            component.render = function renderWithStyleInjection(h, context) {\n\t              hook.call(context);\n\t              return originalRender(h, context)\n\t            };\n\t          } else {\n\t            // inject component registration as beforeCreate hook\n\t            var existing = component.beforeCreate;\n\t            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n\t          }\n\t        }\n\t      }\n\n\t      return component\n\t    }\n\t    /* style inject */\n\t    function __vue_create_injector__$3() {\n\t      var head = document.head || document.getElementsByTagName('head')[0];\n\t      var styles = __vue_create_injector__$3.styles || (__vue_create_injector__$3.styles = {});\n\t      var isOldIE =\n\t        typeof navigator !== 'undefined' &&\n\t        /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t      return function addStyle(id, css) {\n\t        if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t        var group = isOldIE ? css.media || 'default' : id;\n\t        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t        if (!style.ids.includes(id)) {\n\t          var code = css.source;\n\t          var index = style.ids.length;\n\n\t          style.ids.push(id);\n\n\t          if (isOldIE) {\n\t            style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t          }\n\n\t          if (!style.element) {\n\t            var el = style.element = document.createElement('style');\n\t            el.type = 'text/css';\n\n\t            if (css.media) { el.setAttribute('media', css.media); }\n\t            if (isOldIE) {\n\t              el.setAttribute('data-group', group);\n\t              el.setAttribute('data-next-index', '0');\n\t            }\n\n\t            head.appendChild(el);\n\t          }\n\n\t          if (isOldIE) {\n\t            index = parseInt(style.element.getAttribute('data-next-index'));\n\t            style.element.setAttribute('data-next-index', index + 1);\n\t          }\n\n\t          if (style.element.styleSheet) {\n\t            style.parts.push(code);\n\t            style.element.styleSheet.cssText = style.parts\n\t              .filter(Boolean)\n\t              .join('\\n');\n\t          } else {\n\t            var textNode = document.createTextNode(code);\n\t            var nodes = style.element.childNodes;\n\t            if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t            else { style.element.appendChild(textNode); }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /* style inject SSR */\n\t    \n\n\t    \n\t    var DialogOverlay = __vue_normalize__$3(\n\t      { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },\n\t      __vue_inject_styles__$3,\n\t      __vue_script__$3,\n\t      __vue_scope_id__$3,\n\t      __vue_is_functional_template__$3,\n\t      __vue_module_identifier__$3,\n\t      __vue_create_injector__$3,\n\t      undefined\n\t    );\n\n\t  var Confirmable = {\n\t    name: 'Confirmable',\n\t    props: {\n\t      type: {\n\t        type: String\n\t      },\n\t      text: {\n\t        type: String,\n\t        reqiured: true\n\t      },\n\t      title: {\n\t        type: String\n\t      },\n\t      actions: {\n\t        type: [Array, Object]\n\t      }\n\t    }\n\t  };\n\n\t  /* @vue/component */\n\t  var Returnable = {\n\t    name: 'Returnable',\n\t    props: {\n\t      returnValue: null\n\t    },\n\n\t    data: function data() {\n\t      return {\n\t        originalValue: this.returnValue,\n\t        returnResovers: []\n\t      };\n\t    },\n\n\t    // watch: {\n\t    //   'wrapper.isActive' (val) {\n\t    //     console.log('watch.isActive', val)\n\t    //     if (val) {\n\t    //       this.originalValue = this.returnValue\n\t    //     } else {\n\t    //       // console.log('emit', this.originalValue)\n\t    //       // this.$emit('submit', this.originalValue)\n\t    //       this.$emit('update:returnValue', this.originalValue)\n\t    //     }\n\t    //   }\n\t    // },\n\t    methods: {\n\t      return: function return$1(value) {\n\t        this.originalValue = value;\n\t        this.$root.$emit('submit', this.originalValue);\n\t        this.$emit('submit', this.originalValue);\n\t      }\n\n\t    }\n\t  };\n\n\t  var Actionable = {\n\t    name: 'Actionable',\n\t    mixins: [Returnable],\n\n\t    data: function data() {\n\t      return {\n\t        loadingAction: null\n\t      };\n\t    },\n\n\t    props: {\n\t      actions: {\n\t        type: [Array, Object],\n\t        default: function () { return []; }\n\t      }\n\t    },\n\t    computed: {\n\t      actionlist: function actionlist() {\n\t        var this$1 = this;\n\n\t        var actions = [];\n\n\t        for (var key in this$1.actions) {\n\t          var action = this$1.actions[key];\n\n\t          if (typeof action === 'string') {\n\t            action = {\n\t              text: action\n\t            };\n\t          }\n\n\t          this$1.$set(action, 'loading', false);\n\n\t          if (!action.key) {\n\t            action.key = isNaN(key) ? key : action.text;\n\t          }\n\n\t          if (['true', 'false'].indexOf(action.key) >= 0) {\n\t            action.key = JSON.parse(action.key);\n\t          }\n\n\t          actions.push(action);\n\t        }\n\n\t        return actions;\n\t      }\n\n\t    },\n\t    methods: {\n\t      trigger: function trigger(name) {\n\t        var action = this.actionlist.find(function (action) { return action.key === name; });\n\n\t        if (action && !this.isActionDisabled(action) && this.isActionVisible(action)) {\n\t          this.onActionClick(action);\n\t        }\n\t      },\n\n\t      setLoadingToInstance: function setLoadingToInstance(vm, value) {\n\t        if (vm && vm.loading !== undefined) {\n\t          vm.loading = value;\n\t        }\n\t      },\n\n\t      setLoadingState: function setLoadingState(value) {\n\t        this.$emit('loading', value);\n\t        !value && (this.loadingAction = null);\n\t        this.setLoadingToInstance(this.$root, value);\n\t        this.setLoadingToInstance(this.$root._dialogInstance, value);\n\t      },\n\n\t      isActionDisabled: function isActionDisabled(action) {\n\t        if (action.disabled === undefined) {\n\t          return false;\n\t        }\n\n\t        if (typeof action.disabled === 'function') {\n\t          return action.disabled();\n\t        }\n\n\t        return action.disabled;\n\t      },\n\n\t      isActionVisible: function isActionVisible(action) {\n\t        if (action.visible === undefined) {\n\t          return true;\n\t        }\n\n\t        if (typeof action.visible === 'function') {\n\t          return action.visible();\n\t        }\n\n\t        return action.visible;\n\t      },\n\n\t      onActionClick: function onActionClick(action) {\n\t        return new Promise(function ($return, $error) {\n\t          var closable;\n\t          closable = action.closable === undefined || action.closable === true;\n\n\t          if (action.handle) {\n\t            this.loadingAction = action.key;\n\t            this.setLoadingState(true);\n\n\t            var $Try_1_Post = function () {\n\t              try {\n\t                return $If_2.call(this);\n\t              } catch ($boundEx) {\n\t                return $error($boundEx);\n\t              }\n\t            }.bind(this);\n\n\t            var $Try_1_Catch = function (e) {\n\t              try {\n\t                this.setLoadingState(false);\n\t                console.log('error', e); // TODO\n\n\t                throw e;\n\t              } catch ($boundEx) {\n\t                return $error($boundEx);\n\t              }\n\t            }.bind(this);\n\n\t            try {\n\t              var ret;\n\t              return Promise.resolve(action.handle()).then(function ($await_3) {\n\t                try {\n\t                  ret = $await_3;\n\t                  this.setLoadingState(false);\n\n\t                  if (ret !== false && closable) {\n\t                    this.return(ret || action.key);\n\t                  }\n\n\t                  return $Try_1_Post();\n\t                } catch ($boundEx) {\n\t                  return $Try_1_Catch($boundEx);\n\t                }\n\t              }.bind(this), $Try_1_Catch);\n\t            } catch (e) {\n\t              $Try_1_Catch(e);\n\t            }\n\t          } else {\n\t            closable && this.return(action.key);\n\t            return $If_2.call(this);\n\t          }\n\n\t          function $If_2() {\n\t            return $return();\n\t          }\n\t        }.bind(this));\n\t      }\n\n\t    }\n\t  };\n\n\t  //\n\t  var script$4 = {\n\t    mixins: [Actionable]\n\t  };\n\n\t  /* script */\n\t              var __vue_script__$4 = script$4;\n\t              \n\t  /* template */\n\t  var __vue_render__$4 = function() {\n\t    var _vm = this;\n\t    var _h = _vm.$createElement;\n\t    var _c = _vm._self._c || _h;\n\t    return _c(\n\t      \"span\",\n\t      _vm._l(_vm.actionlist, function(action) {\n\t        return _c(\n\t          \"button\",\n\t          {\n\t            key: action.key,\n\t            staticClass: \"button\",\n\t            class: { loading: _vm.loadingAction === action.key },\n\t            attrs: {\n\t              \"action-key\": \"\" + action.key,\n\t              disabled: _vm.isActionDisabled(action) || !!_vm.loadingAction\n\t            },\n\t            on: {\n\t              click: function($event) {\n\t                _vm.onActionClick(action);\n\t              }\n\t            }\n\t          },\n\t          [_vm._v(\"\\n    \" + _vm._s(action.text) + \"\\n  \")]\n\t        )\n\t      })\n\t    )\n\t  };\n\t  var __vue_staticRenderFns__$4 = [];\n\t  __vue_render__$4._withStripped = true;\n\n\t    /* style */\n\t    var __vue_inject_styles__$4 = undefined;\n\t    /* scoped */\n\t    var __vue_scope_id__$4 = undefined;\n\t    /* module identifier */\n\t    var __vue_module_identifier__$4 = undefined;\n\t    /* functional template */\n\t    var __vue_is_functional_template__$4 = false;\n\t    /* component normalizer */\n\t    function __vue_normalize__$4(\n\t      template, style, script,\n\t      scope, functional, moduleIdentifier,\n\t      createInjector, createInjectorSSR\n\t    ) {\n\t      var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t      // For security concerns, we use only base name in production mode.\n\t      component.__file = \"/Users/yarik/Projects/clones/vuedl/src/components/DialogActions.vue\";\n\n\t      if (!component.render) {\n\t        component.render = template.render;\n\t        component.staticRenderFns = template.staticRenderFns;\n\t        component._compiled = true;\n\n\t        if (functional) { component.functional = true; }\n\t      }\n\n\t      component._scopeId = scope;\n\n\t      \n\n\t      return component\n\t    }\n\t    /* style inject */\n\t    function __vue_create_injector__$4() {\n\t      var head = document.head || document.getElementsByTagName('head')[0];\n\t      var styles = __vue_create_injector__$4.styles || (__vue_create_injector__$4.styles = {});\n\t      var isOldIE =\n\t        typeof navigator !== 'undefined' &&\n\t        /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t      return function addStyle(id, css) {\n\t        if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t        var group = isOldIE ? css.media || 'default' : id;\n\t        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t        if (!style.ids.includes(id)) {\n\t          var code = css.source;\n\t          var index = style.ids.length;\n\n\t          style.ids.push(id);\n\n\t          if (isOldIE) {\n\t            style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t          }\n\n\t          if (!style.element) {\n\t            var el = style.element = document.createElement('style');\n\t            el.type = 'text/css';\n\n\t            if (css.media) { el.setAttribute('media', css.media); }\n\t            if (isOldIE) {\n\t              el.setAttribute('data-group', group);\n\t              el.setAttribute('data-next-index', '0');\n\t            }\n\n\t            head.appendChild(el);\n\t          }\n\n\t          if (isOldIE) {\n\t            index = parseInt(style.element.getAttribute('data-next-index'));\n\t            style.element.setAttribute('data-next-index', index + 1);\n\t          }\n\n\t          if (style.element.styleSheet) {\n\t            style.parts.push(code);\n\t            style.element.styleSheet.cssText = style.parts\n\t              .filter(Boolean)\n\t              .join('\\n');\n\t          } else {\n\t            var textNode = document.createTextNode(code);\n\t            var nodes = style.element.childNodes;\n\t            if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t            else { style.element.appendChild(textNode); }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /* style inject SSR */\n\t    \n\n\t    \n\t    var DialogActions = __vue_normalize__$4(\n\t      { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },\n\t      __vue_inject_styles__$4,\n\t      __vue_script__$4,\n\t      __vue_scope_id__$4,\n\t      __vue_is_functional_template__$4,\n\t      __vue_module_identifier__$4,\n\t      __vue_create_injector__$4,\n\t      undefined\n\t    );\n\n\t  //\n\t  var script$5 = {\n\t    components: {\n\t      DialogActions: DialogActions\n\t    },\n\t    layout: 'default',\n\t    mixins: [Confirmable]\n\t  };\n\n\t  /* script */\n\t              var __vue_script__$5 = script$5;\n\t              \n\t  /* template */\n\t  var __vue_render__$5 = function() {\n\t    var _vm = this;\n\t    var _h = _vm.$createElement;\n\t    var _c = _vm._self._c || _h;\n\t    return _c(\"div\", { staticClass: \"confirm-box\" }, [\n\t      !!_vm.title\n\t        ? _c(\"div\", { staticClass: \"confirm-title\" }, [\n\t            _c(\"h1\", { staticClass: \"title\" }, [_vm._v(_vm._s(_vm.title))])\n\t          ])\n\t        : _vm._e(),\n\t      _vm._v(\" \"),\n\t      _c(\"div\", {\n\t        staticClass: \"confirm-message\",\n\t        domProps: { innerHTML: _vm._s(_vm.message) }\n\t      }),\n\t      _vm._v(\" \"),\n\t      _c(\"div\", { staticClass: \"confirm-buttons\" }, [\n\t        _c(\n\t          \"div\",\n\t          { staticClass: \"column\" },\n\t          [_c(\"DialogActions\", { attrs: { actions: _vm.actions } })],\n\t          1\n\t        )\n\t      ])\n\t    ])\n\t  };\n\t  var __vue_staticRenderFns__$5 = [];\n\t  __vue_render__$5._withStripped = true;\n\n\t    /* style */\n\t    var __vue_inject_styles__$5 = function (inject) {\n\t      if (!inject) { return }\n\t      inject(\"data-v-8a87651c_0\", { source: \"\\n.confirm-box {\\n  background: #ffffff;\\n}\\n.confirm-box .confirm-title {\\n  padding: 20px\\n}\\n.confirm-box .confirm-message {\\n  padding: 0 20px;\\n}\\n.confirm-box .confirm-buttons {\\n  text-align:  right;\\n  padding: 10px 20px;\\n}\\n.confirm-box .confirm-buttons .button {\\n  font-size: 20px;\\n  padding-left: 20px;\\n}\\n\", map: {\"version\":3,\"sources\":[\"/Users/yarik/Projects/clones/vuedl/src/components/Confirm.vue\"],\"names\":[],\"mappings\":\";AA6BA;EACA,oBAAA;CACA;AACA;EACA,aAAA;CACA;AACA;EACA,gBAAA;CACA;AACA;EACA,mBAAA;EACA,mBAAA;CACA;AACA;EACA,gBAAA;EACA,mBAAA;CACA\",\"file\":\"Confirm.vue\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"confirm-box\\\">\\n    <div v-if=\\\"!!title\\\" class=\\\"confirm-title\\\">\\n      <h1 class=\\\"title\\\">{{ title }}</h1>\\n    </div>\\n    <div class=\\\"confirm-message\\\" v-html=\\\"message\\\" />\\n    <div class=\\\"confirm-buttons\\\">\\n      <div class=\\\"column\\\">\\n        <DialogActions :actions=\\\"actions\\\"/>\\n      </div>\\n    </div>\\n  </div>\\n</template>\\n<script>\\n\\nimport Confirmable from '../mixins/confirmable'\\nimport DialogActions from './DialogActions.vue'\\n\\nexport default {\\n  components: {\\n    DialogActions\\n  },\\n  layout: 'default',\\n  mixins: [ Confirmable ]\\n}\\n\\n</script>\\n\\n<style>\\n  .confirm-box {\\n    background: #ffffff;\\n  }\\n  .confirm-box .confirm-title {\\n    padding: 20px\\n  }\\n  .confirm-box .confirm-message {\\n    padding: 0 20px;\\n  }\\n  .confirm-box .confirm-buttons {\\n    text-align:  right;\\n    padding: 10px 20px;\\n  }\\n  .confirm-box .confirm-buttons .button {\\n    font-size: 20px;\\n    padding-left: 20px;\\n  }\\n</style>\\n\"]}, media: undefined });\n\n\t    };\n\t    /* scoped */\n\t    var __vue_scope_id__$5 = undefined;\n\t    /* module identifier */\n\t    var __vue_module_identifier__$5 = undefined;\n\t    /* functional template */\n\t    var __vue_is_functional_template__$5 = false;\n\t    /* component normalizer */\n\t    function __vue_normalize__$5(\n\t      template, style, script,\n\t      scope, functional, moduleIdentifier,\n\t      createInjector, createInjectorSSR\n\t    ) {\n\t      var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t      // For security concerns, we use only base name in production mode.\n\t      component.__file = \"/Users/yarik/Projects/clones/vuedl/src/components/Confirm.vue\";\n\n\t      if (!component.render) {\n\t        component.render = template.render;\n\t        component.staticRenderFns = template.staticRenderFns;\n\t        component._compiled = true;\n\n\t        if (functional) { component.functional = true; }\n\t      }\n\n\t      component._scopeId = scope;\n\n\t      {\n\t        var hook;\n\t        if (style) {\n\t          hook = function(context) {\n\t            style.call(this, createInjector(context));\n\t          };\n\t        }\n\n\t        if (hook !== undefined) {\n\t          if (component.functional) {\n\t            // register for functional component in vue file\n\t            var originalRender = component.render;\n\t            component.render = function renderWithStyleInjection(h, context) {\n\t              hook.call(context);\n\t              return originalRender(h, context)\n\t            };\n\t          } else {\n\t            // inject component registration as beforeCreate hook\n\t            var existing = component.beforeCreate;\n\t            component.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n\t          }\n\t        }\n\t      }\n\n\t      return component\n\t    }\n\t    /* style inject */\n\t    function __vue_create_injector__$5() {\n\t      var head = document.head || document.getElementsByTagName('head')[0];\n\t      var styles = __vue_create_injector__$5.styles || (__vue_create_injector__$5.styles = {});\n\t      var isOldIE =\n\t        typeof navigator !== 'undefined' &&\n\t        /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t      return function addStyle(id, css) {\n\t        if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t        var group = isOldIE ? css.media || 'default' : id;\n\t        var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t        if (!style.ids.includes(id)) {\n\t          var code = css.source;\n\t          var index = style.ids.length;\n\n\t          style.ids.push(id);\n\n\t          if (isOldIE) {\n\t            style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t          }\n\n\t          if (!style.element) {\n\t            var el = style.element = document.createElement('style');\n\t            el.type = 'text/css';\n\n\t            if (css.media) { el.setAttribute('media', css.media); }\n\t            if (isOldIE) {\n\t              el.setAttribute('data-group', group);\n\t              el.setAttribute('data-next-index', '0');\n\t            }\n\n\t            head.appendChild(el);\n\t          }\n\n\t          if (isOldIE) {\n\t            index = parseInt(style.element.getAttribute('data-next-index'));\n\t            style.element.setAttribute('data-next-index', index + 1);\n\t          }\n\n\t          if (style.element.styleSheet) {\n\t            style.parts.push(code);\n\t            style.element.styleSheet.cssText = style.parts\n\t              .filter(Boolean)\n\t              .join('\\n');\n\t          } else {\n\t            var textNode = document.createTextNode(code);\n\t            var nodes = style.element.childNodes;\n\t            if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t            if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t            else { style.element.appendChild(textNode); }\n\t          }\n\t        }\n\t      }\n\t    }\n\t    /* style inject SSR */\n\t    \n\n\t    \n\t    var Confirm = __vue_normalize__$5(\n\t      { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },\n\t      __vue_inject_styles__$5,\n\t      __vue_script__$5,\n\t      __vue_scope_id__$5,\n\t      __vue_is_functional_template__$5,\n\t      __vue_module_identifier__$5,\n\t      __vue_create_injector__$5,\n\t      undefined\n\t    );\n\n\t  /*\n\t   * vuedl\n\t   *\n\t   * (c) Savaryn Yaroslav <yariksav@gmail.com>\n\t   *\n\t   * For the full copyright and license information, please view the LICENSE\n\t   * file that was distributed with this source code.\n\t  */\n\t  var Plugin = {\n\t    install: function install(Vue$$1, options) {\n\t      if ( options === void 0 ) options = {};\n\n\t      var property = options.property || '$dialog';\n\t      var manager = new DialogManager(options); // const no = new Notificator(manager)\n\n\t      Object.defineProperty(Vue$$1.prototype, property, {\n\t        get: function get() {\n\t          return manager;\n\t        }\n\n\t      });\n\t      manager.layout('default', DialogLayout);\n\t      manager.layout('notification', NotificationLayout);\n\t      manager.overlay('default', DialogOverlay);\n\t      manager.component('confirm', Confirm, {\n\t        waitForResult: true,\n\t        actions: {\n\t          'false': 'Cancel',\n\t          'true': 'OK'\n\t        }\n\t      });\n\t      manager.component('warning', Confirm, {\n\t        type: 'warning',\n\t        waitForResult: true,\n\t        actions: {\n\t          'false': 'Cancel',\n\t          'true': 'OK'\n\t        }\n\t      });\n\t      manager.component('error', Confirm, {\n\t        type: 'error',\n\t        waitForResult: true,\n\t        actions: ['OK']\n\t      });\n\t    }\n\n\t  };\n\n\t  return Plugin;\n\n\t})));\n\t});\n\n\t/* @vue/component */\n\tvar Returnable = {\n\t  name: 'Returnable',\n\n\t  props: {\n\t    returnValue: null\n\t  },\n\n\t  data () {\n\t    return {\n\t      originalValue: this.returnValue,\n\t      returnResovers: []\n\t    }\n\t  },\n\n\t  // watch: {\n\t  //   'wrapper.isActive' (val) {\n\t  //     console.log('watch.isActive', val)\n\t  //     if (val) {\n\t  //       this.originalValue = this.returnValue\n\t  //     } else {\n\t  //       // console.log('emit', this.originalValue)\n\t  //       // this.$emit('submit', this.originalValue)\n\t  //       this.$emit('update:returnValue', this.originalValue)\n\t  //     }\n\t  //   }\n\t  // },\n\n\t  methods: {\n\t    return (value) {\n\t      this.originalValue = value;\n\t      this.$root.$emit('submit', this.originalValue);\n\t      this.$emit('submit', this.originalValue);\n\t    }\n\t  }\n\t}\n\n\tvar Actionable = {\n\t  name: 'Actionable',\n\n\t  mixins: [ Returnable ],\n\n\t  data () {\n\t    return {\n\t      loadingAction: null\n\t    }\n\t  },\n\n\t  props: {\n\t    actions: {\n\t      type: [Array, Object],\n\t      default: () => []\n\t    }\n\t  },\n\n\t  computed: {\n\t    actionlist () {\n\t      const actions = [];\n\t      for (let key in this.actions) {\n\t        let action = this.actions[key];\n\t        if (typeof action === 'string') {\n\t          action = {text: action};\n\t        }\n\t        this.$set(action, 'loading', false);\n\t        if (!action.key) {\n\t          action.key = isNaN(key) ? key : action.text;\n\t        }\n\t        if (['true', 'false'].indexOf(action.key) >= 0) {\n\t          action.key = JSON.parse(action.key);\n\t        }\n\t        actions.push(action);\n\t      }\n\t      return actions\n\t    }\n\t  },\n\n\t  methods: {\n\t    trigger (name) {\n\t      const action = this.actionlist.find(action => action.key === name);\n\t      if (action && !this.isActionDisabled(action) && this.isActionVisible(action)) {\n\t        this.onActionClick(action);\n\t      }\n\t    },\n\t    setLoadingToInstance (vm, value) {\n\t      if (vm && vm.loading !== undefined) {\n\t        vm.loading = value;\n\t      }\n\t    },\n\t    setLoadingState (value) {\n\t      this.$emit('loading', value);\n\t      !value && (this.loadingAction = null);\n\t      this.setLoadingToInstance(this.$root, value);\n\t      this.setLoadingToInstance(this.$root._dialogInstance, value);\n\t    },\n\t    isActionDisabled (action) {\n\t      if (action.disabled === undefined) {\n\t        return false\n\t      }\n\t      if (typeof action.disabled === 'function') {\n\t        return action.disabled()\n\t      }\n\t      return action.disabled\n\t    },\n\t    isActionVisible (action) {\n\t      if (action.visible === undefined) {\n\t        return true\n\t      }\n\t      if (typeof action.visible === 'function') {\n\t        return action.visible()\n\t      }\n\t      return action.visible\n\t    },\n\t    async onActionClick (action) {\n\t      const closable = action.closable === undefined || action.closable === true;\n\t      if (action.handle) {\n\t        this.loadingAction = action.key;\n\t        this.setLoadingState(true);\n\t        try {\n\t          let ret = await action.handle();\n\t          this.setLoadingState(false);\n\t          if (ret !== false && closable) {\n\t            this.return(ret || action.key);\n\t          }\n\t        } catch (e) {\n\t          this.setLoadingState(false);\n\t          console.log('error', e); // TODO\n\t          throw e\n\t        }\n\t      } else {\n\t        closable && this.return(action.key);\n\t      }\n\t    }\n\t  }\n\t}\n\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\tvar script = {\n\t  name: 'BeatLoader',\n\t  props: {\n\t    loading: {\n\t      type: Boolean,\n\t      default: true\n\t    },\n\t    color: {\n\t      type: String,\n\t      default: '#5dc596'\n\t    },\n\t    size: {\n\t      type: String,\n\t      default: '15px'\n\t    },\n\t    margin: {\n\t      type: String,\n\t      default: '2px'\n\t    },\n\t    radius: {\n\t      type: String,\n\t      default: '100%'\n\t    }\n\t  },\n\n\t  data: function data() {\n\t    return {\n\t      spinnerStyle: {\n\t        backgroundColor: this.color,\n\t        height: this.size,\n\t        width: this.size,\n\t        margin: this.margin,\n\t        borderRadius: this.radius\n\t      }\n\t    };\n\t  }\n\n\t};\n\n\t/* script */\n\t            var __vue_script__ = script;\n\t            \n\t/* template */\n\tvar __vue_render__ = function() {\n\t  var _vm = this;\n\t  var _h = _vm.$createElement;\n\t  var _c = _vm._self._c || _h;\n\t  return _c(\n\t    \"div\",\n\t    {\n\t      directives: [\n\t        {\n\t          name: \"show\",\n\t          rawName: \"v-show\",\n\t          value: _vm.loading,\n\t          expression: \"loading\"\n\t        }\n\t      ],\n\t      staticClass: \"v-spinner\"\n\t    },\n\t    [\n\t      _c(\"div\", { staticClass: \"v-beat v-beat-odd\", style: _vm.spinnerStyle }),\n\t      _vm._v(\" \"),\n\t      _c(\"div\", { staticClass: \"v-beat v-beat-even\", style: _vm.spinnerStyle }),\n\t      _vm._v(\" \"),\n\t      _c(\"div\", { staticClass: \"v-beat v-beat-odd\", style: _vm.spinnerStyle })\n\t    ]\n\t  )\n\t};\n\tvar __vue_staticRenderFns__ = [];\n\t__vue_render__._withStripped = true;\n\n\t  /* style */\n\t  var __vue_inject_styles__ = function (inject) {\n\t    if (!inject) { return }\n\t    inject(\"data-v-7929aa72_0\", { source: \"\\n.v-spinner .v-beat\\n{\\n    -webkit-animation: v-beatStretchDelay 0.7s infinite linear;\\n            animation: v-beatStretchDelay 0.7s infinite linear;\\n    -webkit-animation-fill-mode: both;\\n            animation-fill-mode: both;\\n    display: inline-block;\\n}\\n.v-spinner .v-beat-odd\\n{\\n  animation-delay: 0s;\\n}\\n.v-spinner .v-beat-even\\n{\\n  animation-delay: 0.35s;\\n}\\n@-webkit-keyframes v-beatStretchDelay\\n{\\n50%\\n    {\\n        -webkit-transform: scale(0.75);\\n                transform: scale(0.75);\\n        -webkit-opacity: 0.2;\\n                opacity: 0.2;\\n}\\n100%\\n    {\\n        -webkit-transform: scale(1);\\n                transform: scale(1);\\n        -webkit-opacity: 1;\\n                opacity: 1;\\n}\\n}\\n@keyframes v-beatStretchDelay\\n{\\n50%\\n    {\\n        -webkit-transform: scale(0.75);\\n                transform: scale(0.75);\\n        -webkit-opacity: 0.2;\\n                opacity: 0.2;\\n}\\n100%\\n    {\\n        -webkit-transform: scale(1);\\n                transform: scale(1);\\n        -webkit-opacity: 1;\\n                opacity: 1;\\n}\\n}\\n\", map: {\"version\":3,\"sources\":[\"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Loader.vue\"],\"names\":[],\"mappings\":\";AAmDA;;IAEA,2DAAA;YACA,mDAAA;IACA,kCAAA;YACA,0BAAA;IACA,sBAAA;CACA;AAEA;;EAEA,oBAAA;CACA;AACA;;EAEA,uBAAA;CACA;AAEA;;AAEA;;QAEA,+BAAA;gBACA,uBAAA;QACA,qBAAA;gBACA,aAAA;CACA;AACA;;QAEA,4BAAA;gBACA,oBAAA;QACA,mBAAA;gBACA,WAAA;CACA;CACA;AAEA;;AAEA;;QAEA,+BAAA;gBACA,uBAAA;QACA,qBAAA;gBACA,aAAA;CACA;AACA;;QAEA,4BAAA;gBACA,oBAAA;QACA,mBAAA;gBACA,WAAA;CACA;CACA\",\"file\":\"Loader.vue\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"v-spinner\\\" v-show=\\\"loading\\\">\\n    <div class=\\\"v-beat v-beat-odd\\\" :style=\\\"spinnerStyle\\\"/>\\n    <div class=\\\"v-beat v-beat-even\\\" :style=\\\"spinnerStyle\\\"/>\\n    <div class=\\\"v-beat v-beat-odd\\\" :style=\\\"spinnerStyle\\\"/>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  name: 'BeatLoader',\\n\\n  props: {\\n    loading: {\\n      type: Boolean,\\n      default: true\\n    },\\n    color: {\\n      type: String,\\n      default: '#5dc596'\\n    },\\n    size: {\\n      type: String,\\n      default: '15px'\\n    },\\n    margin: {\\n      type: String,\\n      default: '2px'\\n    },\\n    radius: {\\n      type: String,\\n      default: '100%'\\n    }\\n  },\\n  data () {\\n    return {\\n      spinnerStyle: {\\n        backgroundColor: this.color,\\n        height: this.size,\\n        width: this.size,\\n        margin: this.margin,\\n        borderRadius: this.radius\\n      }\\n    }\\n  }\\n\\n}\\n</script>\\n\\n<style>\\n\\n.v-spinner .v-beat\\n{\\n    -webkit-animation: v-beatStretchDelay 0.7s infinite linear;\\n            animation: v-beatStretchDelay 0.7s infinite linear;\\n    -webkit-animation-fill-mode: both;\\n            animation-fill-mode: both;\\n    display: inline-block;\\n}\\n\\n.v-spinner .v-beat-odd\\n{\\n  animation-delay: 0s;\\n}\\n.v-spinner .v-beat-even\\n{\\n  animation-delay: 0.35s;\\n}\\n\\n@-webkit-keyframes v-beatStretchDelay\\n{\\n    50%\\n    {\\n        -webkit-transform: scale(0.75);\\n                transform: scale(0.75);\\n        -webkit-opacity: 0.2;\\n                opacity: 0.2;\\n    }\\n    100%\\n    {\\n        -webkit-transform: scale(1);\\n                transform: scale(1);\\n        -webkit-opacity: 1;\\n                opacity: 1;\\n    }\\n}\\n\\n@keyframes v-beatStretchDelay\\n{\\n    50%\\n    {\\n        -webkit-transform: scale(0.75);\\n                transform: scale(0.75);\\n        -webkit-opacity: 0.2;\\n                opacity: 0.2;\\n    }\\n    100%\\n    {\\n        -webkit-transform: scale(1);\\n                transform: scale(1);\\n        -webkit-opacity: 1;\\n                opacity: 1;\\n    }\\n}\\n</style>\\n\"]}, media: undefined });\n\n\t  };\n\t  /* scoped */\n\t  var __vue_scope_id__ = undefined;\n\t  /* module identifier */\n\t  var __vue_module_identifier__ = undefined;\n\t  /* functional template */\n\t  var __vue_is_functional_template__ = false;\n\t  /* component normalizer */\n\t  function __vue_normalize__(\n\t    template, style, script$$1,\n\t    scope, functional, moduleIdentifier,\n\t    createInjector, createInjectorSSR\n\t  ) {\n\t    var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};\n\n\t    // For security concerns, we use only base name in production mode.\n\t    component.__file = \"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Loader.vue\";\n\n\t    if (!component.render) {\n\t      component.render = template.render;\n\t      component.staticRenderFns = template.staticRenderFns;\n\t      component._compiled = true;\n\n\t      if (functional) { component.functional = true; }\n\t    }\n\n\t    component._scopeId = scope;\n\n\t    {\n\t      var hook;\n\t      if (style) {\n\t        hook = function(context) {\n\t          style.call(this, createInjector(context));\n\t        };\n\t      }\n\n\t      if (hook !== undefined) {\n\t        if (component.functional) {\n\t          // register for functional component in vue file\n\t          var originalRender = component.render;\n\t          component.render = function renderWithStyleInjection(h, context) {\n\t            hook.call(context);\n\t            return originalRender(h, context)\n\t          };\n\t        } else {\n\t          // inject component registration as beforeCreate hook\n\t          var existing = component.beforeCreate;\n\t          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n\t        }\n\t      }\n\t    }\n\n\t    return component\n\t  }\n\t  /* style inject */\n\t  function __vue_create_injector__() {\n\t    var head = document.head || document.getElementsByTagName('head')[0];\n\t    var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});\n\t    var isOldIE =\n\t      typeof navigator !== 'undefined' &&\n\t      /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t    return function addStyle(id, css) {\n\t      if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t      var group = isOldIE ? css.media || 'default' : id;\n\t      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t      if (!style.ids.includes(id)) {\n\t        var code = css.source;\n\t        var index = style.ids.length;\n\n\t        style.ids.push(id);\n\n\t        if (isOldIE) {\n\t          style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t        }\n\n\t        if (!style.element) {\n\t          var el = style.element = document.createElement('style');\n\t          el.type = 'text/css';\n\n\t          if (css.media) { el.setAttribute('media', css.media); }\n\t          if (isOldIE) {\n\t            el.setAttribute('data-group', group);\n\t            el.setAttribute('data-next-index', '0');\n\t          }\n\n\t          head.appendChild(el);\n\t        }\n\n\t        if (isOldIE) {\n\t          index = parseInt(style.element.getAttribute('data-next-index'));\n\t          style.element.setAttribute('data-next-index', index + 1);\n\t        }\n\n\t        if (style.element.styleSheet) {\n\t          style.parts.push(code);\n\t          style.element.styleSheet.cssText = style.parts\n\t            .filter(Boolean)\n\t            .join('\\n');\n\t        } else {\n\t          var textNode = document.createTextNode(code);\n\t          var nodes = style.element.childNodes;\n\t          if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t          else { style.element.appendChild(textNode); }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  /* style inject SSR */\n\t  \n\n\t  \n\t  var Loader = __vue_normalize__(\n\t    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },\n\t    __vue_inject_styles__,\n\t    __vue_script__,\n\t    __vue_scope_id__,\n\t    __vue_is_functional_template__,\n\t    __vue_module_identifier__,\n\t    __vue_create_injector__,\n\t    undefined\n\t  )\n\n\t//\n\tvar script$1 = {\n\t  components: {\n\t    Loader: Loader\n\t  },\n\t  mixins: [Actionable],\n\t  props: {\n\t    variant: {\n\t      type: String,\n\t      default: 'outline-primary'\n\t    }\n\t  }\n\t};\n\n\t/* script */\n\t            var __vue_script__$1 = script$1;\n\t            \n\t/* template */\n\tvar __vue_render__$1 = function() {\n\t  var _vm = this;\n\t  var _h = _vm.$createElement;\n\t  var _c = _vm._self._c || _h;\n\t  return _c(\n\t    \"span\",\n\t    { staticClass: \"dialog-actions\" },\n\t    _vm._l(_vm.actionlist, function(action) {\n\t      return _c(\n\t        \"b-btn\",\n\t        {\n\t          key: action.key,\n\t          attrs: {\n\t            variant: action.variant || _vm.variant,\n\t            loading: _vm.loadingAction === action.key,\n\t            disabled: _vm.isActionDisabled(action) || !!_vm.loadingAction\n\t          },\n\t          on: {\n\t            click: function($event) {\n\t              _vm.onActionClick(action);\n\t            }\n\t          }\n\t        },\n\t        [\n\t          _vm.loadingAction === action.key\n\t            ? _c(\"Loader\", { attrs: { size: \"8px\" } })\n\t            : [_vm._v(_vm._s(action.text))]\n\t        ],\n\t        2\n\t      )\n\t    })\n\t  )\n\t};\n\tvar __vue_staticRenderFns__$1 = [];\n\t__vue_render__$1._withStripped = true;\n\n\t  /* style */\n\t  var __vue_inject_styles__$1 = function (inject) {\n\t    if (!inject) { return }\n\t    inject(\"data-v-b0725018_0\", { source: \"\\n.dialog-actions button {\\n   margin-right: 4px;\\n   margin-right: .25rem;\\n}\\n\", map: {\"version\":3,\"sources\":[\"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogActions.vue\"],\"names\":[],\"mappings\":\";AA+BA;GACA,kBAAA;GACA,qBAAA;CACA\",\"file\":\"DialogActions.vue\",\"sourcesContent\":[\"<template>\\n  <span class=\\\"dialog-actions\\\">\\n    <b-btn v-for=\\\"action in actionlist\\\" :key=\\\"action.key\\\"\\n      :variant=\\\"action.variant || variant\\\"\\n      :loading=\\\"loadingAction === action.key\\\"\\n      :disabled=\\\"isActionDisabled(action) || !!loadingAction\\\"\\n      @click=\\\"onActionClick(action)\\\">\\n      <Loader v-if=\\\"loadingAction === action.key\\\" size=\\\"8px\\\"/>\\n      <template v-else>{{ action.text }}</template>\\n    </b-btn>\\n  </span>\\n</template>\\n<script>\\n\\nimport Actionable from 'vuedl/src/mixins/actionable'\\nimport Loader from './Loader.vue'\\n\\nexport default {\\n  components: {\\n    Loader\\n  },\\n  mixins: [ Actionable ],\\n  props: {\\n    variant: {\\n      type: String,\\n      default: 'outline-primary'\\n    }\\n  }\\n}\\n</script>\\n<style>\\n  .dialog-actions button {\\n     margin-right: 4px;\\n     margin-right: .25rem;\\n  }\\n</style>\\n\"]}, media: undefined });\n\n\t  };\n\t  /* scoped */\n\t  var __vue_scope_id__$1 = undefined;\n\t  /* module identifier */\n\t  var __vue_module_identifier__$1 = undefined;\n\t  /* functional template */\n\t  var __vue_is_functional_template__$1 = false;\n\t  /* component normalizer */\n\t  function __vue_normalize__$1(\n\t    template, style, script,\n\t    scope, functional, moduleIdentifier,\n\t    createInjector, createInjectorSSR\n\t  ) {\n\t    var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t    // For security concerns, we use only base name in production mode.\n\t    component.__file = \"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogActions.vue\";\n\n\t    if (!component.render) {\n\t      component.render = template.render;\n\t      component.staticRenderFns = template.staticRenderFns;\n\t      component._compiled = true;\n\n\t      if (functional) { component.functional = true; }\n\t    }\n\n\t    component._scopeId = scope;\n\n\t    {\n\t      var hook;\n\t      if (style) {\n\t        hook = function(context) {\n\t          style.call(this, createInjector(context));\n\t        };\n\t      }\n\n\t      if (hook !== undefined) {\n\t        if (component.functional) {\n\t          // register for functional component in vue file\n\t          var originalRender = component.render;\n\t          component.render = function renderWithStyleInjection(h, context) {\n\t            hook.call(context);\n\t            return originalRender(h, context)\n\t          };\n\t        } else {\n\t          // inject component registration as beforeCreate hook\n\t          var existing = component.beforeCreate;\n\t          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n\t        }\n\t      }\n\t    }\n\n\t    return component\n\t  }\n\t  /* style inject */\n\t  function __vue_create_injector__$1() {\n\t    var head = document.head || document.getElementsByTagName('head')[0];\n\t    var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});\n\t    var isOldIE =\n\t      typeof navigator !== 'undefined' &&\n\t      /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t    return function addStyle(id, css) {\n\t      if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t      var group = isOldIE ? css.media || 'default' : id;\n\t      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t      if (!style.ids.includes(id)) {\n\t        var code = css.source;\n\t        var index = style.ids.length;\n\n\t        style.ids.push(id);\n\n\t        if (isOldIE) {\n\t          style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t        }\n\n\t        if (!style.element) {\n\t          var el = style.element = document.createElement('style');\n\t          el.type = 'text/css';\n\n\t          if (css.media) { el.setAttribute('media', css.media); }\n\t          if (isOldIE) {\n\t            el.setAttribute('data-group', group);\n\t            el.setAttribute('data-next-index', '0');\n\t          }\n\n\t          head.appendChild(el);\n\t        }\n\n\t        if (isOldIE) {\n\t          index = parseInt(style.element.getAttribute('data-next-index'));\n\t          style.element.setAttribute('data-next-index', index + 1);\n\t        }\n\n\t        if (style.element.styleSheet) {\n\t          style.parts.push(code);\n\t          style.element.styleSheet.cssText = style.parts\n\t            .filter(Boolean)\n\t            .join('\\n');\n\t        } else {\n\t          var textNode = document.createTextNode(code);\n\t          var nodes = style.element.childNodes;\n\t          if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t          else { style.element.appendChild(textNode); }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  /* style inject SSR */\n\t  \n\n\t  \n\t  var DialogActions = __vue_normalize__$1(\n\t    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },\n\t    __vue_inject_styles__$1,\n\t    __vue_script__$1,\n\t    __vue_scope_id__$1,\n\t    __vue_is_functional_template__$1,\n\t    __vue_module_identifier__$1,\n\t    __vue_create_injector__$1,\n\t    undefined\n\t  )\n\n\t//\n\tvar zIndex = 1100;\n\tvar script$2 = {\n\t  components: {\n\t    DialogActions: DialogActions\n\t  },\n\t  props: {\n\t    size: {\n\t      type: String,\n\t      default: function () {\n\t        'md';\n\t      }\n\t    },\n\t    title: String,\n\t    actions: [Array, Object],\n\t    hideBackdrop: Boolean,\n\t    centered: Boolean\n\t  },\n\t  methods: {\n\t    _destroy: function _destroy() {// stub\n\t    },\n\n\t    onModalHidden: function onModalHidden() {\n\t      zIndex = zIndex - 2;\n\t      this.$destroy();\n\t    },\n\n\t    onModalShown: function onModalShown(ev) {\n\t      var parent = ev.target.parentElement;\n\t      var backdrop = parent.querySelector('.modal-backdrop');\n\t      backdrop && backdrop.style && (backdrop.style['z-index'] = ++zIndex);\n\t      var modal = parent.querySelector('.modal');\n\t      modal && modal.style && (modal.style['z-index'] = ++zIndex);\n\t    }\n\n\t  }\n\t};\n\n\t/* script */\n\t            var __vue_script__$2 = script$2;\n\t            \n\t/* template */\n\tvar __vue_render__$2 = function() {\n\t  var _vm = this;\n\t  var _h = _vm.$createElement;\n\t  var _c = _vm._self._c || _h;\n\t  return _c(\n\t    \"b-modal\",\n\t    {\n\t      staticClass: \"dialog-layout\",\n\t      attrs: {\n\t        \"hide-header\": \"\",\n\t        \"hide-footer\": \"\",\n\t        \"hide-backdrop\": _vm.hideBackdrop,\n\t        centered: _vm.centered,\n\t        size: _vm.size,\n\t        \"body-class\": \"dialog-layout-modal-body\",\n\t        \"no-close-on-backdrop\": _vm.persistent || _vm.loading,\n\t        \"no-close-on-esc\": _vm.persistent || _vm.loading\n\t      },\n\t      on: { hidden: _vm.onModalHidden, shown: _vm.onModalShown },\n\t      model: {\n\t        value: _vm.isActive,\n\t        callback: function($$v) {\n\t          _vm.isActive = $$v;\n\t        },\n\t        expression: \"isActive\"\n\t      }\n\t    },\n\t    [_vm._t(\"default\")],\n\t    2\n\t  )\n\t};\n\tvar __vue_staticRenderFns__$2 = [];\n\t__vue_render__$2._withStripped = true;\n\n\t  /* style */\n\t  var __vue_inject_styles__$2 = function (inject) {\n\t    if (!inject) { return }\n\t    inject(\"data-v-0f764872_0\", { source: \"\\n.dialog-layout-modal-body {\\n  padding: 0;\\n}\\n\", map: {\"version\":3,\"sources\":[\"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogLayout.vue\"],\"names\":[],\"mappings\":\";AAwDA;EACA,WAAA;CACA\",\"file\":\"DialogLayout.vue\",\"sourcesContent\":[\"<template>\\n  <b-modal v-model=\\\"isActive\\\"\\n    class=\\\"dialog-layout\\\"\\n    hide-header\\n    hide-footer\\n    :hide-backdrop=\\\"hideBackdrop\\\"\\n    :centered=\\\"centered\\\"\\n    :size=\\\"size\\\"\\n    body-class=\\\"dialog-layout-modal-body\\\"\\n    :no-close-on-backdrop=\\\"persistent || loading\\\"\\n    :no-close-on-esc=\\\"persistent || loading\\\"\\n    @hidden=\\\"onModalHidden\\\"\\n    @shown=\\\"onModalShown\\\">\\n    <slot/>\\n  </b-modal>\\n</template>\\n\\n<script>\\n\\nimport DialogActions from './DialogActions.vue'\\n\\nlet zIndex = 1100\\n\\nexport default {\\n  components: {\\n    DialogActions\\n  },\\n  props: {\\n    size: {\\n      type: String,\\n      default: () => { 'md' }\\n    },\\n    title: String,\\n    actions: [Array, Object],\\n    hideBackdrop: Boolean,\\n    centered: Boolean\\n  },\\n  methods: {\\n    _destroy () {\\n      // stub\\n    },\\n    onModalHidden () {\\n      zIndex = zIndex - 2\\n      this.$destroy()\\n    },\\n    onModalShown (ev) {\\n      const parent = ev.target.parentElement\\n      const backdrop = parent.querySelector('.modal-backdrop')\\n      backdrop && backdrop.style && (backdrop.style['z-index'] = ++zIndex)\\n      const modal = parent.querySelector('.modal')\\n      modal && modal.style && (modal.style['z-index'] = ++zIndex)\\n    }\\n  }\\n}\\n</script>\\n<style>\\n  .dialog-layout-modal-body {\\n    padding: 0;\\n  }\\n</style>\\n\"]}, media: undefined });\n\n\t  };\n\t  /* scoped */\n\t  var __vue_scope_id__$2 = undefined;\n\t  /* module identifier */\n\t  var __vue_module_identifier__$2 = undefined;\n\t  /* functional template */\n\t  var __vue_is_functional_template__$2 = false;\n\t  /* component normalizer */\n\t  function __vue_normalize__$2(\n\t    template, style, script,\n\t    scope, functional, moduleIdentifier,\n\t    createInjector, createInjectorSSR\n\t  ) {\n\t    var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t    // For security concerns, we use only base name in production mode.\n\t    component.__file = \"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogLayout.vue\";\n\n\t    if (!component.render) {\n\t      component.render = template.render;\n\t      component.staticRenderFns = template.staticRenderFns;\n\t      component._compiled = true;\n\n\t      if (functional) { component.functional = true; }\n\t    }\n\n\t    component._scopeId = scope;\n\n\t    {\n\t      var hook;\n\t      if (style) {\n\t        hook = function(context) {\n\t          style.call(this, createInjector(context));\n\t        };\n\t      }\n\n\t      if (hook !== undefined) {\n\t        if (component.functional) {\n\t          // register for functional component in vue file\n\t          var originalRender = component.render;\n\t          component.render = function renderWithStyleInjection(h, context) {\n\t            hook.call(context);\n\t            return originalRender(h, context)\n\t          };\n\t        } else {\n\t          // inject component registration as beforeCreate hook\n\t          var existing = component.beforeCreate;\n\t          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n\t        }\n\t      }\n\t    }\n\n\t    return component\n\t  }\n\t  /* style inject */\n\t  function __vue_create_injector__$2() {\n\t    var head = document.head || document.getElementsByTagName('head')[0];\n\t    var styles = __vue_create_injector__$2.styles || (__vue_create_injector__$2.styles = {});\n\t    var isOldIE =\n\t      typeof navigator !== 'undefined' &&\n\t      /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\n\n\t    return function addStyle(id, css) {\n\t      if (document.querySelector('style[data-vue-ssr-id~=\"' + id + '\"]')) { return } // SSR styles are present.\n\n\t      var group = isOldIE ? css.media || 'default' : id;\n\t      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });\n\n\t      if (!style.ids.includes(id)) {\n\t        var code = css.source;\n\t        var index = style.ids.length;\n\n\t        style.ids.push(id);\n\n\t        if (isOldIE) {\n\t          style.element = style.element || document.querySelector('style[data-group=' + group + ']');\n\t        }\n\n\t        if (!style.element) {\n\t          var el = style.element = document.createElement('style');\n\t          el.type = 'text/css';\n\n\t          if (css.media) { el.setAttribute('media', css.media); }\n\t          if (isOldIE) {\n\t            el.setAttribute('data-group', group);\n\t            el.setAttribute('data-next-index', '0');\n\t          }\n\n\t          head.appendChild(el);\n\t        }\n\n\t        if (isOldIE) {\n\t          index = parseInt(style.element.getAttribute('data-next-index'));\n\t          style.element.setAttribute('data-next-index', index + 1);\n\t        }\n\n\t        if (style.element.styleSheet) {\n\t          style.parts.push(code);\n\t          style.element.styleSheet.cssText = style.parts\n\t            .filter(Boolean)\n\t            .join('\\n');\n\t        } else {\n\t          var textNode = document.createTextNode(code);\n\t          var nodes = style.element.childNodes;\n\t          if (nodes[index]) { style.element.removeChild(nodes[index]); }\n\t          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }\n\t          else { style.element.appendChild(textNode); }\n\t        }\n\t      }\n\t    }\n\t  }\n\t  /* style inject SSR */\n\t  \n\n\t  \n\t  var DialogLayout = __vue_normalize__$2(\n\t    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },\n\t    __vue_inject_styles__$2,\n\t    __vue_script__$2,\n\t    __vue_scope_id__$2,\n\t    __vue_is_functional_template__$2,\n\t    __vue_module_identifier__$2,\n\t    __vue_create_injector__$2,\n\t    undefined\n\t  )\n\n\tvar Confirmable = {\n\t  name: 'Confirmable',\n\n\t  props: {\n\t    type: {\n\t      type: String\n\t    },\n\t    text: {\n\t      type: String,\n\t      reqiured: true\n\t    },\n\t    title: {\n\t      type: String\n\t    },\n\t    actions: {\n\t      type: [Array, Object]\n\t    }\n\t  }\n\t}\n\n\tvar Colorable = {\n\t  props: {\n\t    type: String,\n\t    color: String\n\t  },\n\t  computed: {\n\t    getColor: function getColor() {\n\t      return this.color || this.type;\n\t    }\n\n\t  }\n\t};\n\n\t//\n\tvar script$3 = {\n\t  components: {\n\t    DialogActions: DialogActions\n\t  },\n\t  layout: 'default',\n\t  mixins: [Confirmable, Colorable],\n\t  computed: {\n\t    headerTextVariant: function headerTextVariant() {\n\t      return ['info', 'danger'].indexOf(this.type) >= 0 ? 'light' : 'dark';\n\t    }\n\n\t  }\n\t};\n\n\t/* script */\n\t            var __vue_script__$3 = script$3;\n\t            \n\t/* template */\n\tvar __vue_render__$3 = function() {\n\t  var _vm = this;\n\t  var _h = _vm.$createElement;\n\t  var _c = _vm._self._c || _h;\n\t  return _c(\n\t    \"div\",\n\t    [\n\t      _c(\n\t        \"DialogCard\",\n\t        {\n\t          attrs: {\n\t            actions: _vm.actions,\n\t            title: _vm.title,\n\t            \"header-bg-variant\": _vm.type,\n\t            \"header-text-variant\": _vm.headerTextVariant\n\t          }\n\t        },\n\t        [\n\t          _c(\"div\", {\n\t            staticClass: \"dialog-confirm-text\",\n\t            domProps: { innerHTML: _vm._s(_vm.text) }\n\t          })\n\t        ]\n\t      )\n\t    ],\n\t    1\n\t  )\n\t};\n\tvar __vue_staticRenderFns__$3 = [];\n\t__vue_render__$3._withStripped = true;\n\n\t  /* style */\n\t  var __vue_inject_styles__$3 = undefined;\n\t  /* scoped */\n\t  var __vue_scope_id__$3 = undefined;\n\t  /* module identifier */\n\t  var __vue_module_identifier__$3 = undefined;\n\t  /* functional template */\n\t  var __vue_is_functional_template__$3 = false;\n\t  /* component normalizer */\n\t  function __vue_normalize__$3(\n\t    template, style, script,\n\t    scope, functional, moduleIdentifier,\n\t    createInjector, createInjectorSSR\n\t  ) {\n\t    var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t    // For security concerns, we use only base name in production mode.\n\t    component.__file = \"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Confirm.vue\";\n\n\t    if (!component.render) {\n\t      component.render = template.render;\n\t      component.staticRenderFns = template.staticRenderFns;\n\t      component._compiled = true;\n\n\t      if (functional) { component.functional = true; }\n\t    }\n\n\t    component._scopeId = scope;\n\n\t    \n\n\t    return component\n\t  }\n\t  /* style inject */\n\t  \n\t  /* style inject SSR */\n\t  \n\n\t  \n\t  var Confirm = __vue_normalize__$3(\n\t    { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },\n\t    __vue_inject_styles__$3,\n\t    __vue_script__$3,\n\t    __vue_scope_id__$3,\n\t    __vue_is_functional_template__$3,\n\t    __vue_module_identifier__$3,\n\t    undefined,\n\t    undefined\n\t  )\n\n\t//\n\tvar script$4 = {\n\t  components: {\n\t    DialogActions: DialogActions\n\t  },\n\t  layout: ['notification', {\n\t    showClose: false\n\t  }],\n\t  props: {\n\t    type: {\n\t      type: String,\n\t      default: function () { return 'info'; }\n\t    },\n\t    actions: [Array, Object],\n\t    text: String,\n\t    dismissible: {\n\t      type: Boolean,\n\t      default: true\n\t    }\n\t  }\n\t};\n\n\t/* script */\n\t            var __vue_script__$4 = script$4;\n\t            \n\t/* template */\n\tvar __vue_render__$4 = function() {\n\t  var _vm = this;\n\t  var _h = _vm.$createElement;\n\t  var _c = _vm._self._c || _h;\n\t  return _c(\n\t    \"b-alert\",\n\t    {\n\t      staticStyle: { \"margin-bottom\": \"0\" },\n\t      attrs: { show: \"\", variant: _vm.type, dismissible: _vm.dismissible },\n\t      on: {\n\t        dismissed: function($event) {\n\t          _vm.$emit(\"submit\");\n\t        }\n\t      }\n\t    },\n\t    [_c(\"span\", { domProps: { innerHTML: _vm._s(_vm.text) } })]\n\t  )\n\t};\n\tvar __vue_staticRenderFns__$4 = [];\n\t__vue_render__$4._withStripped = true;\n\n\t  /* style */\n\t  var __vue_inject_styles__$4 = undefined;\n\t  /* scoped */\n\t  var __vue_scope_id__$4 = undefined;\n\t  /* module identifier */\n\t  var __vue_module_identifier__$4 = undefined;\n\t  /* functional template */\n\t  var __vue_is_functional_template__$4 = false;\n\t  /* component normalizer */\n\t  function __vue_normalize__$4(\n\t    template, style, script,\n\t    scope, functional, moduleIdentifier,\n\t    createInjector, createInjectorSSR\n\t  ) {\n\t    var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t    // For security concerns, we use only base name in production mode.\n\t    component.__file = \"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Alert.vue\";\n\n\t    if (!component.render) {\n\t      component.render = template.render;\n\t      component.staticRenderFns = template.staticRenderFns;\n\t      component._compiled = true;\n\n\t      if (functional) { component.functional = true; }\n\t    }\n\n\t    component._scopeId = scope;\n\n\t    \n\n\t    return component\n\t  }\n\t  /* style inject */\n\t  \n\t  /* style inject SSR */\n\t  \n\n\t  \n\t  var Alert = __vue_normalize__$4(\n\t    { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },\n\t    __vue_inject_styles__$4,\n\t    __vue_script__$4,\n\t    __vue_scope_id__$4,\n\t    __vue_is_functional_template__$4,\n\t    __vue_module_identifier__$4,\n\t    undefined,\n\t    undefined\n\t  )\n\n\t//\n\tvar script$5 = {\n\t  components: {\n\t    DialogActions: DialogActions\n\t  },\n\t  props: {\n\t    title: String,\n\t    actions: [Array, Object],\n\t    headerBgVariant: String,\n\t    headerTextVariant: String,\n\t    headerBorderVariant: String,\n\t    headerClass: String\n\t  },\n\t  computed: {\n\t    headerClasses: function headerClasses() {\n\t      var obj;\n\n\t      return ['modal-header', ( obj = {}, obj[(\"bg-\" + (this.headerBgVariant))] = Boolean(this.headerBgVariant), obj[(\"text-\" + (this.headerTextVariant))] = Boolean(this.headerTextVariant), obj[(\"border-\" + (this.headerBorderVariant))] = Boolean(this.headerBorderVariant), obj), this.headerClass];\n\t    }\n\n\t  },\n\t  methods: {\n\t    trigger: function trigger(name) {\n\t      this.$refs.actions && this.$refs.actions.trigger(name);\n\t    }\n\n\t  }\n\t};\n\n\t/* script */\n\t            var __vue_script__$5 = script$5;\n\t            \n\t/* template */\n\tvar __vue_render__$5 = function() {\n\t  var _vm = this;\n\t  var _h = _vm.$createElement;\n\t  var _c = _vm._self._c || _h;\n\t  return _c(\"div\", [\n\t    _c(\n\t      \"header\",\n\t      { class: _vm.headerClasses },\n\t      [\n\t        _vm._t(\"title\", [\n\t          _c(\"h5\", { staticClass: \"modal-title\" }, [_vm._v(_vm._s(_vm.title))])\n\t        ]),\n\t        _vm._v(\" \"),\n\t        _c(\n\t          \"button\",\n\t          {\n\t            staticClass: \"close\",\n\t            attrs: { type: \"button\", \"aria-label\": \"Close\" }\n\t          },\n\t          [_vm._v(\"×\")]\n\t        )\n\t      ],\n\t      2\n\t    ),\n\t    _vm._v(\" \"),\n\t    _c(\"div\", { staticClass: \"modal-body\" }, [_vm._t(\"default\")], 2),\n\t    _vm._v(\" \"),\n\t    _vm.actions\n\t      ? _c(\n\t          \"footer\",\n\t          { staticClass: \"modal-footer\" },\n\t          [\n\t            _c(\"DialogActions\", {\n\t              ref: \"actions\",\n\t              attrs: { actions: _vm.actions }\n\t            })\n\t          ],\n\t          1\n\t        )\n\t      : _vm._e()\n\t  ])\n\t};\n\tvar __vue_staticRenderFns__$5 = [];\n\t__vue_render__$5._withStripped = true;\n\n\t  /* style */\n\t  var __vue_inject_styles__$5 = undefined;\n\t  /* scoped */\n\t  var __vue_scope_id__$5 = undefined;\n\t  /* module identifier */\n\t  var __vue_module_identifier__$5 = undefined;\n\t  /* functional template */\n\t  var __vue_is_functional_template__$5 = false;\n\t  /* component normalizer */\n\t  function __vue_normalize__$5(\n\t    template, style, script,\n\t    scope, functional, moduleIdentifier,\n\t    createInjector, createInjectorSSR\n\t  ) {\n\t    var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t    // For security concerns, we use only base name in production mode.\n\t    component.__file = \"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/DialogCard.vue\";\n\n\t    if (!component.render) {\n\t      component.render = template.render;\n\t      component.staticRenderFns = template.staticRenderFns;\n\t      component._compiled = true;\n\n\t      if (functional) { component.functional = true; }\n\t    }\n\n\t    component._scopeId = scope;\n\n\t    \n\n\t    return component\n\t  }\n\t  /* style inject */\n\t  \n\t  /* style inject SSR */\n\t  \n\n\t  \n\t  var DialogCard = __vue_normalize__$5(\n\t    { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },\n\t    __vue_inject_styles__$5,\n\t    __vue_script__$5,\n\t    __vue_scope_id__$5,\n\t    __vue_is_functional_template__$5,\n\t    __vue_module_identifier__$5,\n\t    undefined,\n\t    undefined\n\t  )\n\n\t//\n\tvar script$6 = {\n\t  components: {\n\t    DialogCard: DialogCard\n\t  },\n\t  layout: 'default',\n\t  mixins: [Confirmable],\n\t  props: {\n\t    value: String\n\t  },\n\t  computed: {\n\t    parsedActions: function parsedActions() {\n\t      var actions = this.actions;\n\n\t      if (actions[true]) {\n\t        if (typeof actions[true] === 'string') {\n\t          actions[true] = {\n\t            'text': actions[true],\n\t            handle: this.onSubmit\n\t          };\n\t        } else {\n\t          actions[true].handle = this.onSubmit;\n\t        }\n\t      }\n\n\t      return actions;\n\t    }\n\n\t  },\n\n\t  data: function data() {\n\t    return {\n\t      editedValue: this.value\n\t    };\n\t  },\n\n\t  methods: {\n\t    onSubmit: function onSubmit() {\n\t      this.$emit('submit', this.editedValue);\n\t    }\n\n\t  }\n\t};\n\n\t/* script */\n\t            var __vue_script__$6 = script$6;\n\t            \n\t/* template */\n\tvar __vue_render__$6 = function() {\n\t  var _vm = this;\n\t  var _h = _vm.$createElement;\n\t  var _c = _vm._self._c || _h;\n\t  return _c(\n\t    \"div\",\n\t    [\n\t      _c(\n\t        \"DialogCard\",\n\t        { attrs: { title: _vm.title, actions: _vm.parsedActions } },\n\t        [\n\t          _c(\"b-form-input\", {\n\t            attrs: { autofocus: \"\", placeholder: _vm.text, required: \"\" },\n\t            on: {\n\t              keypress: function($event) {\n\t                if (\n\t                  !(\"button\" in $event) &&\n\t                  _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")\n\t                ) {\n\t                  return null\n\t                }\n\t                return _vm.onSubmit($event)\n\t              }\n\t            },\n\t            model: {\n\t              value: _vm.editedValue,\n\t              callback: function($$v) {\n\t                _vm.editedValue = $$v;\n\t              },\n\t              expression: \"editedValue\"\n\t            }\n\t          })\n\t        ],\n\t        1\n\t      )\n\t    ],\n\t    1\n\t  )\n\t};\n\tvar __vue_staticRenderFns__$6 = [];\n\t__vue_render__$6._withStripped = true;\n\n\t  /* style */\n\t  var __vue_inject_styles__$6 = undefined;\n\t  /* scoped */\n\t  var __vue_scope_id__$6 = undefined;\n\t  /* module identifier */\n\t  var __vue_module_identifier__$6 = undefined;\n\t  /* functional template */\n\t  var __vue_is_functional_template__$6 = false;\n\t  /* component normalizer */\n\t  function __vue_normalize__$6(\n\t    template, style, script,\n\t    scope, functional, moduleIdentifier,\n\t    createInjector, createInjectorSSR\n\t  ) {\n\t    var component = (typeof script === 'function' ? script.options : script) || {};\n\n\t    // For security concerns, we use only base name in production mode.\n\t    component.__file = \"/Users/yarik/Projects/clones/bootstrap-vue-dialog/src/components/Prompt.vue\";\n\n\t    if (!component.render) {\n\t      component.render = template.render;\n\t      component.staticRenderFns = template.staticRenderFns;\n\t      component._compiled = true;\n\n\t      if (functional) { component.functional = true; }\n\t    }\n\n\t    component._scopeId = scope;\n\n\t    \n\n\t    return component\n\t  }\n\t  /* style inject */\n\t  \n\t  /* style inject SSR */\n\t  \n\n\t  \n\t  var Prompt = __vue_normalize__$6(\n\t    { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },\n\t    __vue_inject_styles__$6,\n\t    __vue_script__$6,\n\t    __vue_scope_id__$6,\n\t    __vue_is_functional_template__$6,\n\t    __vue_module_identifier__$6,\n\t    undefined,\n\t    undefined\n\t  )\n\n\tvar Plugin = {\n\t  install: function install(Vue, options) {\n\t    if ( options === void 0 ) options = {};\n\n\t    var property = options.property || '$dialog'; // const messageProperty = options.messageProperty\n\n\t    Vue.use(vuedl, options);\n\t    var manager = Vue.prototype[property];\n\t    manager.layout('default', DialogLayout);\n\t    Vue.component('DialogActions', DialogActions);\n\t    Vue.component('DialogCard', DialogCard);\n\t    manager.on('show', function () {\n\t      document.body.classList.remove('modal-open');\n\t    });\n\t    manager.component('confirm', Confirm, {\n\t      waitForResult: true,\n\t      actions: {\n\t        'false': 'Cancel',\n\t        'true': 'OK'\n\t      }\n\t    });\n\t    manager.component('warning', Confirm, {\n\t      type: 'warning',\n\t      waitForResult: true,\n\t      actions: {\n\t        'false': 'Cancel',\n\t        'true': 'OK'\n\t      }\n\t    });\n\t    manager.component('info', Confirm, {\n\t      type: 'info',\n\t      waitForResult: true,\n\t      actions: {\n\t        'false': 'Cancel',\n\t        'true': 'OK'\n\t      }\n\t    });\n\t    manager.component('error', Confirm, {\n\t      type: 'danger',\n\t      waitForResult: true,\n\t      actions: ['Close']\n\t    }); // manager.component('toast', Toast, {\n\t    //   waitForResult: true\n\t    // })\n\t    // manager.message = {\n\t    //   info: (message, options) => manager.toast({ text: message, variant: 'info', ...options }),\n\t    //   error: (message, options) => manager.toast({ text: message, variant: 'danger', ...options }),\n\t    //   success: (message, options) => manager.toast({ text: message, variant: 'success', ...options }),\n\t    //   warning: (message, options) => manager.toast({ text: message, variant: 'warning', ...options })\n\t    // }\n\t    // messageProperty && (Vue.prototype[messageProperty] = manager.message)\n\n\t    manager.component('alert', Alert, {\n\t      waitForResult: true\n\t    });\n\t    manager.notify = {\n\t      info: function (message, options) { return manager.alert(Object.assign({\n\t        text: message,\n\t        type: 'info'\n\t      }, options)); },\n\t      error: function (message, options) { return manager.alert(Object.assign({\n\t        text: message,\n\t        type: 'danger'\n\t      }, options)); },\n\t      success: function (message, options) { return manager.alert(Object.assign({\n\t        text: message,\n\t        type: 'success'\n\t      }, options)); },\n\t      warning: function (message, options) { return manager.alert(Object.assign({\n\t        text: message,\n\t        type: 'warning'\n\t      }, options)); }\n\t    };\n\t    manager.component('prompt', Prompt, {\n\t      waitForResult: true,\n\t      actions: {\n\t        false: 'Cancel',\n\t        true: 'OK'\n\t      }\n\t    });\n\t  }\n\n\t};\n\n\treturn Plugin;\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bootstrap-vue-dialog/dist/bootstrap-vue-dialog.js\n");

/***/ })

}]);