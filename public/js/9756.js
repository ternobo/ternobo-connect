(self.webpackChunkternobo = self.webpackChunkternobo || []).push([[9756], { 9756: (t, a, i) => { "use strict"; i.r(a), i.d(a, { default: () => n }); var e = i(8412), s = i(875); const c = { computed: { tagsToShow: function () { var t = this; return this.searchTag.length > 0 ? this.tags.filter((function (a) { return a.startsWith(t.searchTag) })) : this.tags.slice(0, 5 * this.tagPage) } }, watch: { action: function (t) { var a = this; if (null != t) { this.activeCategory = null, this.activeTag = null, this.$emit("input", { action: t }); axios.post("/" + this.slug + "/tags", {}).then((function (t) { a.tags = t.data.tags })) } }, activeCategory: function (t, a) { var i = this; if (null != t) { this.action = null, this.$emit("input", { category: t, tag: this.activeTag }); var e = { category: t }; axios.post("/" + this.slug + "/tags", e).then((function (t) { i.tags = t.data.tags })) } } }, methods: { addCategory: function (t) { this.list.push(t) }, removeTag: function (t) { this.removedTags.push(t), this.tags.splice(this.tags.indexOf(t), 1) }, categorySelect: function (t) { t == this.activeCategory && (this.activeCategory = null, this.action = "all"), this.activeCategory = t }, saveTagRemove: function () { var t = this; axios.post("/tags/delete", { tags: this.removedTags }).catch((function (a) { t.toast("خطا در حذف اطلاعات"); var i = {}; null != t.activeCategory && (i.category = t.activeCategory), axios.post("/" + t.slug + "/tags", i).then((function (a) { t.tags = a.data.tags })) })).then((function () { t.removedTags = [], t.tagsEdit = !1, t.action = "all", t.activeCategory = null, t.activeTag = null })) }, cancelRemove: function () { var t = this; this.tagsEdit = !1, this.removedTags = []; var a = {}; null != this.activeCategory && (a.category = this.activeCategory), axios.post("/" + this.slug + "/tags", a).then((function (a) { t.tags = a.data.tags })) }, tagAction: function (t) { if (this.tagsEdit) return this.removeTag(t); if (t == this.activeTag) { this.activeTag = null; var a = {}; return null != this.activeCategory ? a.category = this.activeCategory : null != this.action ? a.action = this.action : (a.action = "all", this.action = "all"), void this.$emit("input", a) } this.action = null, this.activeTag = t, null != this.activeCategory ? this.$emit("input", { category: this.activeCategory, tag: this.activeTag }) : this.$emit("input", { tag: this.activeTag }) } }, created: function () { this.list = this.categories }, data: function () { return { edit: !1, tagsEdit: !1, list: [], activeTag: null, action: "all", activeCategory: null, tags: [], removedTags: [], searchTag: "", tagPage: 1 } }, mounted: function () { var t = this, a = {}; null != this.activeCategory && (a.category = this.activeCategory), axios.post("/" + this.slug + "/tags", a).then((function (a) { t.tags = a.data.tags })) }, components: { CategoryItem: e.Z, CategoriesModal: s.Z }, props: { pageId: { default: 0, required: !0 }, slug: { type: String, default: null, required: !0 }, categories: { type: Array, default: [], required: !0 } } }; const n = (0, i(1900).Z)(c, (function () { var t = this, a = t.$createElement, i = t._self._c || a; return i("div", { staticClass: "sticky-aside" }, [i("CategoriesModal", { attrs: { show: t.edit, categories: t.list }, on: { categoryAdded: t.addCategory, "update:show": function (a) { t.edit = a }, "update:categories": function (a) { t.list = a } } }), t._v(" "), i("div", { staticClass: "card mb-3" }, [i("div", { staticClass: "card-body" }, [i("div", { staticClass: "actions-list" }, [i("button", { staticClass: "action-item", class: { active: "all" == t.action }, on: { click: function (a) { t.action = "all" } } }, [i("i", { staticClass: "material-icons" }, [t._v("library_books")]), t._v(" همه مطالب")]), t._v(" "), i("button", { staticClass: "action-item", class: { active: "comments" == t.action }, on: { click: function (a) { t.action = "comments" } } }, [i("i", { staticClass: "material-icons-outlined" }, [t._v("comment")]), t._v(" نظرات")]), t._v(" "), i("button", { staticClass: "action-item", class: { active: "likes" == t.action }, on: { click: function (a) { t.action = "likes" } } }, [i("i", { staticClass: "material-icons" }, [t._v("favorite_border")]), t._v(" پسند‌ها")])])])]), t._v(" "), i("div", { staticClass: "card" }, [i("div", { staticClass: "card-body" }, [i("div", { staticClass: "categories" }, [i("div", { staticClass: "d-flex justify-content-between" }, [i("h2", { staticClass: "category--title" }, [t._v("دسته‌بندی‌ها")]), t._v(" "), t.checkUser(t.pageId) ? i("i", { staticClass: "clickable hover-dark material-icons-outlined", on: { click: function (a) { t.edit = !t.edit } } }, [t._v(t._s(t.edit ? "save" : "edit"))]) : t._e()]), t._v(" "), i("ul", t._l(t.list, (function (a) { return i("category-item", { key: a.id, class: { active: a.id == t.activeCategory }, attrs: { category: a }, nativeOn: { click: function (i) { return t.categorySelect(a.id) } } }) })), 1), t._v(" "), t.tags.length > 0 ? i("hr") : t._e(), t._v(" "), t.tags.length > 0 ? i("div", { staticClass: "d-flex justify-content-between" }, [i("h2", { staticClass: "category--title" }, [t._v("برچسب‌ها")]), t._v(" "), t.checkUser(t.pageId) ? i("div", { staticClass: "d-flex align-items-center" }, [t.tagsEdit ? t._e() : i("i", { staticClass: "clickable hover-dark material-icons-outlined", on: { click: function (a) { t.tagsEdit = !t.tagsEdit } } }, [t._v("edit")]), t._v(" "), t.tagsEdit ? i("i", { staticClass: "clickable hover-dark material-icons-outlined", on: { click: t.cancelRemove } }, [t._v("close")]) : t._e(), t._v(" "), t.tagsEdit ? i("i", { staticClass: "clickable hover-dark material-icons-outlined", on: { click: t.saveTagRemove } }, [t._v("save")]) : t._e()]) : t._e()]) : t._e(), t._v(" "), i("div", [i("input", { directives: [{ name: "model", rawName: "v-model", value: t.searchTag, expression: "searchTag" }], staticClass: "form-control my-2 rounded-pill", attrs: { placeholder: "جستجو" }, domProps: { value: t.searchTag }, on: { input: function (a) { a.target.composing || (t.searchTag = a.target.value) } } })]), t._v(" "), i("div", { staticClass: "profile-tags tags", class: { "tag-edit": t.tagsEdit } }, t._l(t.tagsToShow, (function (a) { return i("div", { key: "tag_item_" + a, staticClass: "tag-item", class: { active: a == t.activeTag }, on: { click: function (i) { return t.tagAction(a) } } }, [t._v("\n\t\t\t\t\t\t" + t._s(a) + "\n\t\t\t\t\t")]) })), 0), t._v(" "), t.tags.length > 5 && 5 * t.tagPage < t.tags.length ? i("span", { staticClass: "text-action clickable mt-2", on: { click: function (a) { t.tagPage++ } } }, [t._v("نمایش بیشتر")]) : t._e()])])])], 1) }), [], !1, null, null, null).exports } }]);
//# sourceMappingURL=9756.js.map
